/**
 * skylark-jsmodeler - A version of jsmodeler that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-jsmodeler/
 * @license MIT
 */
define(["../../core/jsm"],function(e){return e.ConvertBodyToThreeMeshes=function(n,o,r){var t={textureLoadedCallback:null,hasConvexPolygons:!1};void 0!==r&&null!==r&&(t.textureLoadedCallback=e.ValueOrDefault(r.textureLoadedCallback,t.textureLoadedCallback),t.hasConvexPolygons=e.ValueOrDefault(r.hasConvexPolygons,t.hasConvexPolygons));var a=[],s=null,i=null,u={hasConvexPolygons:t.hasConvexPolygons,onPointGeometryStart:function(n){i=new e.THREE.PointsMaterial({color:n.diffuse,size:n.pointSize}),s=new e.THREE.Geometry},onPointGeometryEnd:function(){var n=new e.THREE.Points(s,i);a.push(n)},onPoint:function(n){s.vertices.push(new e.THREE.Vector3(n.x,n.y,n.z))},onLineGeometryStart:function(n){s=new e.THREE.Geometry,i=new e.THREE.LineBasicMaterial({color:n.diffuse})},onLineGeometryEnd:function(){var n=new e.THREE.LineSegments(s,i);a.push(n)},onLine:function(n,o){s.vertices.push(new e.THREE.Vector3(n.x,n.y,n.z)),s.vertices.push(new e.THREE.Vector3(o.x,o.y,o.z))},onGeometryStart:function(n){var o=null!==n.texture,r=1!==n.opacity,a=n.diffuse,u=n.specular,l=n.shininess;if(0===l&&(u=0,l=1),i=new e.THREE.MeshPhongMaterial({color:a,specular:u,shininess:l}),n.singleSided||(i.side=e.THREE.DoubleSide),r&&(i.opacity=n.opacity,i.transparent=!0),o){var E=i,c=n.texture;(new e.THREE.TextureLoader).load(c,function(n){n.image=e.ResizeImageToPowerOfTwoSides(n.image),n.wrapS=e.THREE.RepeatWrapping,n.wrapT=e.THREE.RepeatWrapping,E.map=n,E.needsUpdate=!0,null!==t.textureLoadedCallback&&t.textureLoadedCallback()})}s=new e.THREE.Geometry},onGeometryEnd:function(){s.computeFaceNormals();var n=new e.THREE.Mesh(s,i);a.push(n)},onTriangle:function(n,o,r,t,a,i,u,l,E){var c=s.vertices.length;s.vertices.push(new e.THREE.Vector3(n.x,n.y,n.z)),s.vertices.push(new e.THREE.Vector3(o.x,o.y,o.z)),s.vertices.push(new e.THREE.Vector3(r.x,r.y,r.z));var p=new e.THREE.Face3(c+0,c+1,c+2);if(s.faces.push(p),null!==t&&null!==a&&null!==i){var h=[];h.push(new e.THREE.Vector3(t.x,t.y,t.z)),h.push(new e.THREE.Vector3(a.x,a.y,a.z)),h.push(new e.THREE.Vector3(i.x,i.y,i.z)),s.faces[s.faces.length-1].vertexNormals=h}if(null!==u&&null!==l&&null!==E){var v=[];v.push(new e.THREE.Vector2(u.x,-u.y)),v.push(new e.THREE.Vector2(l.x,-l.y)),v.push(new e.THREE.Vector2(E.x,-E.y)),s.faceVertexUvs[0].push(v)}}};return e.ExplodeBody(n,o,u),a},e.ConvertModelToThreeMeshes=function(n,o){var r,t,a,s,i=[],u=n.GetMaterialSet();for(r=0;r<n.BodyCount();r++)for(a=n.GetBody(r),s=e.ConvertBodyToThreeMeshes(a,u,o),t=0;t<s.length;t++)i.push(s[t]);return i},e.ConvertJSONDataToThreeMeshes=function(n,o,r){var t=[],a=n.materials;if(void 0===a)return t;var s=n.meshes;if(void 0===s)return t;var i=0;return e.AsyncRunTask(function(){return function(n,r,t,a){function s(n,t,a,s,i,u){function l(n,o,r,t,a){var s=new e.THREE.Vector2(n,o);if(!e.IsZero(a)){var i=Math.sin(a*e.DegRad),u=Math.cos(a*e.DegRad);s.x=u*n-i*o,s.y=i*n+u*o}return s.x=r[0]+s.x*t[0],s.y=r[1]+s.y*t[1],s}var E=n.material,c=n.parameters,p=i[E],h=p.texture,v=p.offset,d=p.scale,T=p.rotation,f=new e.THREE.Color,R=new e.THREE.Color,w=p.shininess||0;f.setRGB(p.diffuse[0],p.diffuse[1],p.diffuse[2]),R.setRGB(p.specular[0],p.specular[1],p.specular[2]),void 0!==h&&null!==h&&(f.setRGB(1,1,1),R.setRGB(1,1,1),void 0!==v&&null!==v||(v=[0,0]),void 0!==d&&null!==d||(d=[1,1]),void 0!==T&&null!==T||(T=0)),0===w&&(R.setRGB(0,0,0),w=1);var H=new e.THREE.MeshPhongMaterial({color:f.getHex(),specular:R.getHex(),shininess:w,side:e.THREE.DoubleSide});if(1!==p.opacity&&(H.opacity=p.opacity,H.transparent=!0),void 0!==h&&null!==h){var y=H;(new e.THREE.TextureLoader).load(h,function(n){n.image=e.ResizeImageToPowerOfTwoSides(n.image),n.wrapS=e.THREE.RepeatWrapping,n.wrapT=e.THREE.RepeatWrapping,y.map=n,y.needsUpdate=!0,void 0!==o&&null!==o&&o()})}var x,g,m,V,C,M,G,P,S,z,L,B,b,k,D=new e.THREE.Geometry;for(k=0;k<c.length;k+=9)x=3*c[k+0],g=3*c[k+1],m=3*c[k+2],V=3*c[k+3],C=3*c[k+4],M=3*c[k+5],G=2*c[k+6],P=2*c[k+7],S=2*c[k+8],z=D.vertices.length,L=D.faces.length,D.vertices.push(new e.THREE.Vector3(t[x+0],t[x+1],t[x+2])),D.vertices.push(new e.THREE.Vector3(t[g+0],t[g+1],t[g+2])),D.vertices.push(new e.THREE.Vector3(t[m+0],t[m+1],t[m+2])),D.faces.push(new e.THREE.Face3(z+0,z+1,z+2)),(B=[]).push(new e.THREE.Vector3(a[V+0],a[V+1],a[V+2])),B.push(new e.THREE.Vector3(a[C+0],a[C+1],a[C+2])),B.push(new e.THREE.Vector3(a[M+0],a[M+1],a[M+2])),D.faces[L].vertexNormals=B,void 0!==h&&null!==h&&((b=[]).push(l(s[G+0],s[G+1],v,d,T)),b.push(l(s[P+0],s[P+1],v,d,T)),b.push(l(s[S+0],s[S+1],v,d,T)),D.faceVertexUvs[0].push(b));var I=new e.THREE.Mesh(D,H);I.originalJsonMaterialIndex=E,I.originalJsonMeshIndex=r,u.push(I)}var i=n.vertices;if(void 0!==i){var u=n.normals;if(void 0!==u){var l=n.uvs;if(void 0!==l){var E,c=n.triangles;for(E=0;E<c.length;E++)s(c[E],i,u,l,t,a)}}}}(s[i],i,a,t),i+=1,!0},r,s.length,0,t),t},e});
//# sourceMappingURL=../../sourcemaps/extensions/threeviewer/threeconverter.js.map
