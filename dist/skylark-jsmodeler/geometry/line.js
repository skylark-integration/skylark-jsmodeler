/**
 * skylark-jsmodeler - A version of jsmodeler that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-jsmodeler/
 * @license MIT
 */
define(["../core/jsm"],function(i){return i.CoordLinePosition2D={CoordOnLine:0,CoordAtLineLeft:1,CoordAtLineRight:2},i.LineLinePosition2D={LinesDontIntersect:0,LinesIntersectsOnePoint:1,LinesIntersectsCoincident:2},i.CoordLinePosition={CoordOnLine:0,CoordOutsideOfLine:1},i.LineLinePosition={LinesDontIntersect:0,LinesIntersectsOnePoint:1,LinesIntersectsCoincident:2},i.Line2D=function(i,t){this.start=i,this.direction=t},i.Line2D.prototype.Set=function(i,t){this.start=i,this.direction=t},i.Line2D.prototype.CoordPosition=function(t){var n=this.CoordSignedDistance(t);return i.IsPositive(n)?i.CoordLinePosition2D.CoordAtLineLeft:i.IsNegative(n)?i.CoordLinePosition2D.CoordAtLineRight:i.CoordLinePosition2D.CoordOnLine},i.Line2D.prototype.CoordSignedDistance=function(i){var t=i.x,n=i.y,o=this.start,e=this.direction;return e.x*(n-o.y)-e.y*(t-o.x)},i.Line2D.prototype.LinePosition=function(t,n){var o=this.start.x,e=this.start.y,r=this.start.x+this.direction.x,s=this.start.y+this.direction.y,d=t.start.x,L=t.start.y,c=t.start.x+t.direction.x,C=t.start.y+t.direction.y,a=(c-d)*(e-L)-(C-L)*(o-d),y=(r-o)*(e-L)-(s-e)*(o-d),u=(C-L)*(r-o)-(c-d)*(s-e);if(i.IsZero(u))return i.IsZero(a)&&i.IsZero(y)?i.LineLinePosition2D.LinesIntersectsCoincident:i.LineLinePosition2D.LinesDontIntersect;var l=a/u;return null!==n&&(n.x=o+l*(r-o),n.y=e+l*(s-e)),i.LineLinePosition2D.LinesIntersectsOnePoint},i.Line2D.prototype.Clone=function(){return new i.Line2D(this.start.Clone(),this.direction.Clone())},i.Line=function(i,t){this.start=i,this.direction=t},i.Line.prototype.Set=function(i,t){this.start=i,this.direction=t},i.Line.prototype.CoordPosition=function(t,n){var o=t.x,e=t.y,r=t.z,s=this.start,d=this.direction,L=s.x,c=s.y,C=s.z,a=s.x+d.x,y=s.y+d.y,u=s.z+d.z,l=(a-L)*(a-L)+(y-c)*(y-c)+(u-C)*(u-C);if(i.IsZero(l))return void 0!==n&&n.Set(s.x,s.y,s.z),s.IsEqual(t)?i.CoordLinePosition.CoordOnLine:i.CoordLinePosition.CoordOutsideOfLine;var h=((a-L)*(o-L)+(y-c)*(e-c)+(u-C)*(r-C))/l,P=d.Clone().MultiplyScalar(h),f=i.CoordAdd(s,P);void 0!==n&&n.Set(f.x,f.y,f.z);var x=t.DistanceTo(f);return i.IsZero(x)?i.CoordLinePosition.CoordOnLine:i.CoordLinePosition.CoordOutsideOfLine},i.Line.prototype.ProjectCoord=function(t){var n=t.x,o=t.y,e=t.z,r=this.start,s=this.direction,d=r.x,L=r.y,c=r.z,C=r.x+s.x,a=r.y+s.y,y=r.z+s.z,u=(C-d)*(C-d)+(a-L)*(a-L)+(y-c)*(y-c);if(i.IsZero(u))return r.Clone();var l=((C-d)*(n-d)+(a-L)*(o-L)+(y-c)*(e-c))/u,h=s.Clone().MultiplyScalar(l);return i.CoordAdd(r,h)},i.Line.prototype.ClosestPoint=function(t,n,o){function e(i,t,n,o,e){return(i[t].x-i[n].x)*(i[o].x-i[e].x)+(i[t].y-i[n].y)*(i[o].y-i[e].y)+(i[t].z-i[n].z)*(i[o].z-i[e].z)}var r=this.direction.Clone().Normalize(),s=this.start,d=i.CoordAdd(s,r),L=t.direction.Clone().Normalize(),c=t.start,C=[s,d,c,i.CoordAdd(c,L)],a=e(C,1,0,1,0),y=e(C,0,2,1,0),u=e(C,0,2,3,2),l=e(C,3,2,1,0),h=e(C,3,2,3,2),P=a*h-l*l;if(i.IsEqual(P,0))return!1;var f=(u*l-y*h)/P,x=(u+f*l)/h;if(void 0!==n){r.MultiplyScalar(f);var p=i.CoordAdd(s,r);n.Set(p.x,p.y,p.z)}if(void 0!==o){L.MultiplyScalar(x);var I=i.CoordAdd(c,L);o.Set(I.x,I.y,I.z)}return!0},i.Line.prototype.LinePosition=function(t,n){var o=new i.Coord(0,0,0),e=new i.Coord(0,0,0);return this.ClosestPoint(t,o,e)?o.IsEqual(e)?(void 0!==n&&n.Set(o.x,o.y,o.z),i.LineLinePosition.LinesIntersectsOnePoint):i.LineLinePosition.LinesDontIntersect:i.LineLinePosition.LinesIntersectsCoincident},i.Line.prototype.Clone=function(){return new i.Line(this.start.Clone(),this.direction.Clone())},i});
//# sourceMappingURL=../sourcemaps/geometry/line.js.map
