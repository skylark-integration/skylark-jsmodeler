/**
 * skylark-jsmodeler - A version of jsmodeler that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-jsmodeler/
 * @license MIT
 */
define(["../core/jsm"],function(e){return e.CutVertexType={Left:1,Right:2,Cut:3},e.PolygonCutter=function(e){this.geometryInterface=e,this.Reset()},e.PolygonCutter.prototype.Cut=function(t,n,r,o){this.Reset();var i=this.CalculateOriginalPolygonData(t);if(null!==i){var u=t.Clone();return i==e.CutVertexType.Left?n.push(u):i==e.CutVertexType.Right?r.push(u):o.push(u),!0}return!!this.CalculateCutPolygonData()&&(!!this.CalculateEntryVertices()&&!!this.CalculateCuttedPolygons(n,r))},e.PolygonCutter.prototype.Reset=function(){this.originalPolygon=null,this.originalPolygonVertexTypes=null,this.cutPolygon=null,this.cutPolygonVertexTypes=null,this.cutPolygonVertexDistances=null,this.cutVertexIndices=null,this.entryVertices=null,this.entryVertexTypes=null},e.PolygonCutter.prototype.CalculateOriginalPolygonData=function(t){this.originalPolygon=t,this.originalPolygonVertexTypes=[];var n,r,o,i=!1,u=!1;for(n=0;n<this.originalPolygon.VertexCount();n++)r=t.GetVertex(n),(o=this.geometryInterface.getVertexSide(r))==e.CutVertexType.Left?i=!0:o==e.CutVertexType.Right&&(u=!0),this.originalPolygonVertexTypes.push(o);return i&&u?null:i?e.CutVertexType.Left:u?e.CutVertexType.Right:e.CutVertexType.Cut},e.PolygonCutter.prototype.CalculateCutPolygonData=function(){function t(t,n){if(0===t.length)return!1;var r=t[t.length-1];return r!=e.CutVertexType.Cut&&n!=e.CutVertexType.Cut&&r!=n}function n(t,n,r){t.cutPolygon.AddVertexCoord(n),t.cutPolygonVertexTypes.push(r),r==e.CutVertexType.Cut&&t.cutVertexIndices.push(t.cutPolygonVertexTypes.length-1)}function r(t,r){var o=t.originalPolygon.GetPrevVertex(r),i=t.originalPolygon.GetVertex(o),u=t.originalPolygon.GetVertex(r),l=t.geometryInterface.getIntersectionVertex(i,u);return null!==l&&(n(t,l,e.CutVertexType.Cut),!0)}function o(t,r,o){var i=t.originalPolygon.GetVertex(r).Clone();n(t,i,o);var u=t.originalPolygon.VertexCount(),l=t.originalPolygonVertexTypes[e.PrevIndex(r,u)],s=t.originalPolygonVertexTypes[e.NextIndex(r,u)];return o==e.CutVertexType.Cut&&l==s&&n(t,i,o),!0}this.cutPolygon=this.geometryInterface.createPolygon(),this.cutPolygonVertexTypes=[],this.cutVertexIndices=[];var i,u,l,s,y,g,c=this.originalPolygon.VertexCount();for(i=0;i<=c;i++)l=i,(u=i===c)&&(l=0),s=this.originalPolygonVertexTypes[l],t(this.cutPolygonVertexTypes,s)&&r(this,l),u||o(this,l,s);return this.cutPolygonVertexDistances=this.geometryInterface.getVertexDistances(this.cutPolygon),this.cutPolygon,y=this.cutVertexIndices,g=this.cutPolygonVertexDistances,!(y.length<2||(e.BubbleSort(y,function(t,n){var r=g[t],o=g[n];return e.IsLower(r,o)},function(t,n){e.SwapArrayValues(y,t,n)}),0))},e.PolygonCutter.prototype.CalculateEntryVertices=function(){function t(t,n,r){if(t[r]!=e.CutVertexType.Cut)return 0;var o=e.PrevIndex(r,t.length),i=e.NextIndex(r,t.length),u=t[o],l=t[i],s=n[r],y=n[o],g=n[i];if(u==e.CutVertexType.Right){if(l==e.CutVertexType.Left)return 1;if(l==e.CutVertexType.Cut&&e.IsLowerOrEqual(s,g))return 1}else if(u==e.CutVertexType.Left){if(l==e.CutVertexType.Right)return-1;if(l==e.CutVertexType.Cut&&e.IsGreaterOrEqual(s,g))return-1}else if(u==e.CutVertexType.Cut)if(l==e.CutVertexType.Left){if(e.IsLowerOrEqual(s,y))return 1}else if(l==e.CutVertexType.Right&&e.IsGreaterOrEqual(s,y))return-1;return 0}var n,r,o;for(this.entryVertices=[],this.entryVertexTypes=[],n=0;n<this.cutVertexIndices.length;n++)r=this.cutVertexIndices[n],0!==(o=t(this.cutPolygonVertexTypes,this.cutPolygonVertexDistances,r))&&(this.entryVertices.push(r),this.entryVertexTypes.push(o));return 0!==this.entryVertices.length&&this.entryVertices.length%2==0},e.PolygonCutter.prototype.CalculateCuttedPolygons=function(t,n){function r(t,n,r,o){function i(e,t,n,r){e[t[n]]=t[r],e[t[r]]=t[n]}function u(t,n,r){if(-1!=r[t]){var o=r[t];return function(e,t){e[e[t]]=-1,e[t]=-1}(r,t),o}return e.NextIndex(t,n.VertexCount())}function l(t,n,r,o,i){var l,s,y,g=t.entryVertices[r];if(-1!==n[g]){var c=t.geometryInterface.createPolygon();c.AddVertexCoord(t.cutPolygon.GetVertex(g).Clone());for(var a=u(g,t.cutPolygon,n),C=null;a!=g;)null===C&&t.cutPolygonVertexTypes[a]!==e.CutVertexType.Cut&&(C=t.cutPolygonVertexTypes[a]),l=c,s=t.cutPolygon.GetVertex(a).Clone(),void 0,(y=l.VertexCount())>0&&l.GetVertex(y-1).IsEqual(s)||l.AddVertexCoord(s),a=u(a,t.cutPolygon,n);c.VertexCount()>2&&(C==e.CutVertexType.Left?o.push(c):C==e.CutVertexType.Right&&i.push(c))}}var s=function(e,t,n){function r(e,t,n,r){var o;for(o=r+1;o<t.length;o++)if(-1==e[t[o]]&&n[r]!=n[o])return o;return-1}var o,u,l=[];for(o=0;o<e.VertexCount();o++)l.push(-1);for(o=0;o<t.length;o++)if(-1==l[t[o]]){if(-1==(u=r(l,t,n,o)))return null;i(l,t,o,u)}return l}(t.cutPolygon,t.entryVertices,t.entryVertexTypes);if(null===s)return!1;for(var y=o?t.entryVertices.length-1:0;y>=0&&y<t.entryVertices.length;)l(t,s,y,n,r),y=o?y-1:y+1;return!0}return!!r(this,t,n,!1)&&!!r(this,t,n,!0)},e.CutPolygon2DWithLine=function(t,n,r,o,i){var u={createPolygon:function(){return new e.Polygon2D},getVertexSide:function(t){var r=n.CoordPosition(t),o=e.CutVertexType.Cut;return r==e.CoordLinePosition2D.CoordAtLineLeft?o=e.CutVertexType.Left:r==e.CoordLinePosition2D.CoordAtLineRight&&(o=e.CutVertexType.Right),o},getIntersectionVertex:function(t,r){var o=new e.Line2D(r,e.CoordSub2D(r,t)),i=new e.Coord2D(0,0);return n.LinePosition(o,i)!=e.LineLinePosition2D.LinesIntersectsOnePoint?null:i},getVertexDistances:function(t){var r,o,i=new e.Coord2D(0,0),u=n.start.Clone(),l=n.direction.Clone().Rotate(-Math.PI/2,i),s=new e.Line2D(u,l),y=[];for(r=0;r<t.VertexCount();r++)o=t.GetVertex(r),y.push(s.CoordSignedDistance(o));return y}};return new e.PolygonCutter(u).Cut(t,r,o,i)},e.CutPolygonWithPlane=function(t,n,r,o,i){var u={createPolygon:function(){return new e.Polygon},getVertexSide:function(t){var r=n.CoordPosition(t),o=e.CutVertexType.Cut;return r==e.CoordPlanePosition.CoordInFrontOfPlane?o=e.CutVertexType.Left:r==e.CoordPlanePosition.CoordAtBackOfPlane&&(o=e.CutVertexType.Right),o},getIntersectionVertex:function(t,r){var o=new e.Line(r,e.CoordSub(r,t)),i=new e.Coord(0,0,0);return n.LinePosition(o,i)!=e.LinePlanePosition.LineIntersectsPlane?null:i},getVertexDistances:function(t){var r,o,i=t.GetNormal(),u=new e.Vector(n.a,n.b,n.c),l=e.VectorCross(u,i),s=t.GetVertex(0),y=e.GetPlaneFromCoordAndDirection(s,l),g=[];for(r=0;r<t.VertexCount();r++)o=t.GetVertex(r),g.push(y.CoordSignedDistance(o));return g}};return new e.PolygonCutter(u).Cut(t,r,o,i)},e.SegmentPolygon2D=function(t,n,r){function o(t,n,r,o,i,u,l){function s(t,n,r,o){var i=[],u=[];if(e.CutPolygon2DWithLine(t,n,i,u,[])){var l;for(l=0;l<i.length;l++)r.push(i[l]);for(l=0;l<u.length;l++)o.push(u[l])}}var y,g,c,a,C=t,V=i.Clone();for(y=1;y<r;y++){for(V.Offset(u,o),c=new e.Line2D(V,l),a=[],g=0;g<C.length;g++)s(C[g],c,n,a);C=a}for(g=0;g<C.length;g++)n.push(C[g])}var i=t.GetBoundingBox(),u=(i.max.x-i.min.x)/n,l=(i.max.y-i.min.y)/r,s=[t],y=new e.Coord2D(i.min.x,i.min.y),g=new e.Coord2D(i.min.x,i.max.y),c=[],a=[];return o(s,c,n,u,y,new e.Vector2D(1,0),new e.Vector2D(0,1)),o(c,a,r,l,g,new e.Vector2D(0,-1),new e.Vector2D(1,0)),a},e});
//# sourceMappingURL=../sourcemaps/geometry/cutpolygon.js.map
