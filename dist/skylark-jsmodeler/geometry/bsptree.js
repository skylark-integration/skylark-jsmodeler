/**
 * skylark-jsmodeler - A version of jsmodeler that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-jsmodeler/
 * @license MIT
 */
define(["../core/jsm"],function(o){return o.BSPTree=function(){this.root=null},o.BSPTree.prototype.AddPolygon=function(o,e){return null===this.root&&(this.root=this.CreateNewNode()),this.AddPolygonToNode(this.root,o,e)},o.BSPTree.prototype.Traverse=function(o){this.TraverseNode(this.root,o)},o.BSPTree.prototype.TraverseNode=function(o,e){null!==o&&(e(o),this.TraverseNode(o.inside,e),this.TraverseNode(o.outside,e))},o.BSPTree.prototype.GetNodes=function(){var o=[];return this.Traverse(function(e){o.push(e)}),o},o.BSPTree.prototype.NodeCount=function(){var o=0;return this.Traverse(function(){o+=1}),o},o.BSPTree.prototype.AddPolygonToNode=function(e,n,t){if(n.VertexCount()<3)return!1;var r;if(null===e.polygon){r=n.GetNormal();var i=o.GetPlaneFromCoordAndDirection(n.GetVertex(0),r);e.polygon=n,void 0!==t&&(e.userData=t),e.plane=i}else{var l=[],d=[],s=[];o.CutPolygonWithPlane(n,e.plane,d,l,s)&&(l.length>0&&this.AddInsidePolygonsToNode(e,l,t),d.length>0&&this.AddOutsidePolygonsToNode(e,d,t),s.length>0&&(r=n.GetNormal(),o.VectorDot(r,e.plane.GetNormal())>0?this.AddInsidePolygonsToNode(e,s,t):this.AddOutsidePolygonsToNode(e,s,t)))}return!0},o.BSPTree.prototype.AddInsidePolygonsToNode=function(o,e,n){var t;for(null===o.inside&&(o.inside=this.CreateNewNode(),o.inside.parent=o),t=0;t<e.length;t++)this.AddPolygonToNode(o.inside,e[t],n)},o.BSPTree.prototype.AddOutsidePolygonsToNode=function(o,e,n){var t;for(null===o.outside&&(o.outside=this.CreateNewNode(),o.outside.parent=o),t=0;t<e.length;t++)this.AddPolygonToNode(o.outside,e[t],n)},o.BSPTree.prototype.CreateNewNode=function(){return{polygon:null,userData:null,plane:null,parent:null,inside:null,outside:null}},o.ClipPolygonWithBSPTree=function(e,n,t,r,i,l){function d(e,n,t){if(null!==n){var r=[],i=[],l=[];if(o.CutPolygonWithPlane(e,n.plane,i,r,l)&&(r.length>0&&a(n,r,t),i.length>0&&P(n,i,t),l.length>0)){var d=e.GetNormal();o.VectorDot(d,n.plane.GetNormal())>0?a(n,l,!0):P(n,l,!0)}}}function s(o,e,n){var t;for(t=0;t<o.length;t++)d(o[t],e,n)}function u(o,e){var n;for(n=0;n<o.length;n++)e.push(o[n])}function a(o,e,n){null!==o.inside?s(e,o.inside,n):u(e,n?l:r)}function P(o,e,n){null!==o.outside?s(e,o.outside,n):u(e,n?i:t)}return d(e,n.root,!1),!0},o.TraverseBSPTreeForEyePosition=function(e,n,t){!function e(r){if(null!==r){var i=r.plane.CoordPosition(n);i==o.CoordPlanePosition.CoordInFrontOfPlane?(e(r.inside),t(r),e(r.outside)):i==o.CoordPlanePosition.CoordAtBackOfPlane?(e(r.outside),t(r),e(r.inside)):(e(r.outside),e(r.inside))}}(e.root)},o});
//# sourceMappingURL=../sourcemaps/geometry/bsptree.js.map
