/**
 * skylark-jsmodeler - A version of jsmodeler that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-jsmodeler/
 * @license MIT
 */
define(["../core/jsm"],function(o){return o.TraverseOctreeNodes=function(o,r){!function o(r,e){var n;if(e(r)&&null!==r.children)for(n=0;n<r.children.length;n++)o(r.children[n],e)}(o.root,r)},o.CreateOctreeChildNodes=function(r,e){function n(r,e,n,t,d){var i=r.GetSize().Clone();i.MultiplyScalar(.5);var s=new o.Coord(r.min.x+n*i.x,r.min.y+t*i.y,r.min.z+d*i.z),l=o.CoordAdd(s,i);return e(new o.Box(s,l))}var t=r.GetSize();return o.IsZero(t.x)&&o.IsZero(t.y)&&o.IsZero(t.z)?null:[n(r,e,0,0,0),n(r,e,1,0,0),n(r,e,1,1,0),n(r,e,0,1,0),n(r,e,0,0,1),n(r,e,1,0,1),n(r,e,1,1,1),n(r,e,0,1,1)]},o.Octree=function(o,r){this.coords=[],this.root=this.CreateNewNode(null,o),this.maxCoordNumInNodes=r,void 0!==this.maxCoordNumInNodes&&null!==this.maxCoordNumInNodes&&0!==this.maxCoordNumInNodes||(this.maxCoordNumInNodes=50)},o.Octree.prototype.AddCoord=function(o){return this.AddCoordToNode(o,this.root)},o.Octree.prototype.FindCoord=function(o){var r=this.FindNodeForCoord(o,this.root);return null===r?-1:this.FindCoordInNode(o,r)},o.Octree.prototype.FindCoordInNode=function(o,r){var e,n;for(e=0;e<r.coords.length;e++)if(n=r.coords[e],o.IsEqual(this.coords[n]))return n;return-1},o.Octree.prototype.AddCoordToNode=function(o,r){var e=this.FindNodeForCoord(o,r);if(null===e)return-1;var n=this.FindCoordInNode(o,e);if(-1!=n)return n;if(e.coords.length>=this.maxCoordNumInNodes&&this.SplitNode(e))return this.AddCoordToNode(o,e);var t=this.coords.length;return this.coords.push(o),e.coords.push(t),t},o.Octree.prototype.FindNodeForCoord=function(o,r){if(null===r.children)return r;var e=r.box.GetCenter(),n=o.x>e.x,t=o.y>e.y,d=o.z>e.z;return n||t||d?!n||t||d?n&&t&&!d?this.FindNodeForCoord(o,r.children[2]):n||!t||d?n||t||!d?n&&!t&&d?this.FindNodeForCoord(o,r.children[5]):n&&t&&d?this.FindNodeForCoord(o,r.children[6]):!n&&t&&d?this.FindNodeForCoord(o,r.children[7]):null:this.FindNodeForCoord(o,r.children[4]):this.FindNodeForCoord(o,r.children[3]):this.FindNodeForCoord(o,r.children[1]):this.FindNodeForCoord(o,r.children[0])},o.Octree.prototype.SplitNode=function(r){var e=this,n=o.CreateOctreeChildNodes(r.box,function(o){return e.CreateNewNode(r,o)});if(null===n)return!1;r.children=n;var t,d=r.coords;for(r.coords=[],t=0;t<d.length;t++)this.FindNodeForCoord(this.coords[d[t]],r).coords.push(d[t]);return!0},o.Octree.prototype.CreateNewNode=function(o,r){return{parent:o,box:r,coords:[],children:null}},o.TriangleOctree=function(o){this.root=this.CreateNewNode(null,o)},o.TriangleOctree.prototype.AddTriangle=function(o,r,e,n){return this.AddTriangleToNode(o,r,e,this.root,n)},o.TriangleOctree.prototype.AddTriangleToNode=function(r,e,n,t,d){if(!function(o,r,e,n){return n.box.IsCoordInside(o)&&n.box.IsCoordInside(r)&&n.box.IsCoordInside(e)}(r,e,n,t))return!1;if(null===t.children){var i=this;t.children=o.CreateOctreeChildNodes(t.box,function(o){return i.CreateNewNode(t,o)})}var s,l;if(null!==t.children)for(s=0;s<t.children.length;s++)if(l=t.children[s],this.AddTriangleToNode(r,e,n,l,d))return!0;return t.triangles.push({v0:r,v1:e,v2:n,userData:d}),!0},o.TriangleOctree.prototype.CreateNewNode=function(o,r){return{parent:o,box:r,triangles:[],children:null}},o});
//# sourceMappingURL=../sourcemaps/geometry/octree.js.map
