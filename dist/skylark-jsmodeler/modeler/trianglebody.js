/**
 * skylark-jsmodeler - A version of jsmodeler that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-jsmodeler/
 * @license MIT
 */
define(["../core/jsm"],function(t){return t.TriangleBody=function(t){this.name=t,this.vertices=[],this.normals=[],this.uvs=[],this.triangles=[],this.defaultUVIndex=-1},t.TriangleBody.prototype.SetName=function(t){this.name=t},t.TriangleBody.prototype.GetName=function(){return this.name},t.TriangleBody.prototype.AddVertex=function(e,n,r){return this.vertices.push(new t.Coord(e,n,r)),this.vertices.length-1},t.TriangleBody.prototype.GetVertex=function(t){return this.vertices[t]},t.TriangleBody.prototype.SetVertex=function(e,n,r,i){this.vertices[e]=new t.Coord(n,r,i)},t.TriangleBody.prototype.VertexCount=function(){return this.vertices.length},t.TriangleBody.prototype.AddNormal=function(e,n,r){return this.normals.push(new t.Vector(e,n,r)),this.normals.length-1},t.TriangleBody.prototype.GetNormal=function(t){return this.normals[t]},t.TriangleBody.prototype.GetTriangleNormal=function(e,n){var r=null,i=this.triangles[e];if(-1==i.curve)r=this.GetNormal(i.n0);else{var o=this.GetVertex(i.v0),s=this.GetVertex(i.v1),u=this.GetVertex(i.v2),a=this.GetNormal(i.n0),l=this.GetNormal(i.n1),h=this.GetNormal(i.n2);r=t.BarycentricInterpolation(o,s,u,a,l,h,n)}return r},t.TriangleBody.prototype.NormalCount=function(){return this.normals.length},t.TriangleBody.prototype.AddUV=function(e,n){return this.uvs.push(new t.Coord2D(e,n)),this.uvs.length-1},t.TriangleBody.prototype.AddDefaultUV=function(){return-1!=this.defaultUVIndex?this.defaultUVIndex:(this.defaultUVIndex=this.AddUV(0,0),this.defaultUVIndex)},t.TriangleBody.prototype.GetUV=function(t){return this.uvs[t]},t.TriangleBody.prototype.UVCount=function(){return this.uvs.length},t.TriangleBody.prototype.AddTriangle=function(t,e,n,r,i,o,s,u,a,l,h){return this.triangles.push({v0:t,v1:e,v2:n,n0:r,n1:i,n2:o,u0:s,u1:u,u2:a,mat:l,curve:h}),this.triangles.length-1},t.TriangleBody.prototype.GetTriangle=function(t){return this.triangles[t]},t.TriangleBody.prototype.TriangleCount=function(){return this.triangles.length},t.TriangleBody.prototype.GetBoundingBox=function(){var e,n,r=new t.Coord(t.Inf,t.Inf,t.Inf),i=new t.Coord(-t.Inf,-t.Inf,-t.Inf);for(e=0;e<this.vertices.length;e++)n=this.vertices[e],r.x=t.Minimum(r.x,n.x),r.y=t.Minimum(r.y,n.y),r.z=t.Minimum(r.z,n.z),i.x=t.Maximum(i.x,n.x),i.y=t.Maximum(i.y,n.y),i.z=t.Maximum(i.z,n.z);return new t.Box(r,i)},t.TriangleBody.prototype.GetCenter=function(){return this.GetBoundingBox().GetCenter()},t.TriangleBody.prototype.GetBoundingSphere=function(){var e,n,r=this.GetCenter(),i=0;for(e=0;e<this.vertices.length;e++)n=r.DistanceTo(this.vertices[e]),t.IsGreater(n,i)&&(i=n);return new t.Sphere(r,i)},t.TriangleBody.prototype.Finalize=function(e){function n(n,r,i,o){function s(e,n,r,i,o){var s,u,a,l=new t.Vector(0,0,0),h=0,d=e.GetTriangle(r),v=o[n];for(s=0;s<v.length;s++)u=v[s],a=e.GetTriangle(u),d.curve==a.curve&&(l=t.CoordAdd(l,i[u]),h+=1);return l.MultiplyScalar(1/h),l.Normalize(),e.AddNormal(l.x,l.y,l.z)}var u,a,l=n.triangles[r];(void 0===l.mat||l.mat<0)&&(l.mat=e.GetDefaultMaterialIndex()),void 0!==l.n0&&void 0!==l.n1&&void 0!==l.n2||(void 0===l.curve||l.curve<0?(u=i[r],a=n.AddNormal(u.x,u.y,u.z),l.n0=a,l.n1=a,l.n2=a,l.curve=-1):(l.n0=s(n,l.v0,r,i,o),l.n1=s(n,l.v1,r,i,o),l.n2=s(n,l.v2,r,i,o))),void 0!==l.u0&&void 0!==l.u1&&void 0!==l.u2||(l.u0=n.AddDefaultUV(),l.u1=n.AddDefaultUV(),l.u2=n.AddDefaultUV())}var r,i,o,s=[],u={};for(r=0;r<this.vertices.length;r++)u[r]=[];for(r=0;r<this.triangles.length;r++)i=this.triangles[r],o=t.CalculateTriangleNormal(this.vertices[i.v0],this.vertices[i.v1],this.vertices[i.v2]),s.push(o),u[i.v0].push(r),u[i.v1].push(r),u[i.v2].push(r);for(r=0;r<this.triangles.length;r++)n(this,r,s,u)},t.TriangleBody.prototype.Clone=function(){var e,n,r=new t.TriangleBody(this.name);for(e=0;e<this.vertices.length;e++)r.vertices.push(this.vertices[e].Clone());for(e=0;e<this.normals.length;e++)r.normals.push(this.normals[e].Clone());for(e=0;e<this.uvs.length;e++)r.uvs.push(this.uvs[e].Clone());for(e=0;e<this.triangles.length;e++)n=this.triangles[e],r.triangles.push({v0:n.v0,v1:n.v1,v2:n.v2,n0:n.n0,n1:n.n1,n2:n.n2,u0:n.u0,u1:n.u1,u2:n.u2,mat:n.mat,curve:n.curve});return r},t.ConvertTriangleBodyToOctree=function(e){var n,r,i,o,s,u=new t.TriangleOctree(e.GetBoundingBox());for(n=0;n<e.TriangleCount();n++)r=e.GetTriangle(n),i=e.GetVertex(r.v0),o=e.GetVertex(r.v1),s=e.GetVertex(r.v2),u.AddTriangle(i,o,s,{triangleIndex:n});return u},t});
//# sourceMappingURL=../sourcemaps/modeler/trianglebody.js.map
