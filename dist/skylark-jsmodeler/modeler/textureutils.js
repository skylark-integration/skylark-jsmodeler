/**
 * skylark-jsmodeler - A version of jsmodeler that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-jsmodeler/
 * @license MIT
 */
define(["../core/jsm"],function(e){return e.CalculatePlanarTextureCoord=function(o,r){var t=new e.Coord2D(0,0),n=r.e1.Clone().Normalize(),l=r.e2.Clone().Normalize(),a=e.VectorCross(r.e1,r.e2),u=e.GetPlaneFromCoordAndDirection(r.origo,a),C=e.GetPlaneFromCoordAndDirection(r.origo,l),i=e.GetPlaneFromCoordAndDirection(r.origo,n),d=u.ProjectCoord(o);return t.x=i.CoordSignedDistance(d),t.y=C.CoordSignedDistance(d),t},e.CalculateCubicTextureCoord=function(o,r,t){var n,l,a,u=new e.Coord2D(0,0),C=t.e1.Clone().Normalize(),i=t.e2.Clone().Normalize(),d=t.e3.Clone().Normalize(),c=-1,x=0;for(n=0;n<3;n++)0===n?l=C:1===n?l=i:2===n&&(l=d),a=Math.abs(e.VectorDot(r,l)),e.IsGreater(a,x)&&(c=n,x=a);if(-1===c)return u;var s=null;return 0===c?s=new e.CoordSystem(t.origo,i,d,new e.Coord(0,0,0)):1===c?s=new e.CoordSystem(t.origo,C,d,new e.Coord(0,0,0)):2===c&&(s=new e.CoordSystem(t.origo,C,i,new e.Coord(0,0,0))),null===s?u:e.CalculatePlanarTextureCoord(o,s)},e.CalculateCylindricalTextureCoord=function(o,r,t){var n=new e.Coord2D(0,0),l=t.e3.Clone().Normalize();if(l.IsCollinearWith(r))return[n=e.CalculateCubicTextureCoord(o,r,t),0];var a=new e.Line(t.origo,l).ProjectCoord(o),u=e.CoordSignedDistance(t.origo,a,l),C=t.e1.Clone().Normalize(),i=e.CoordSub(o,a),d=e.GetVectorsFullAngle(i,C,l),c=t.e1.Length();return n.x=d*c,n.y=u,[n,d]},e.CalculatePolygonPlanarTextureCoords=function(o,r){var t,n,l=[],a=o.GetPolygon(r),u=o.GetTextureProjection().GetCoords();for(t=0;t<a.VertexIndexCount();t++)n=o.GetVertexPosition(a.GetVertexIndex(t)),l.push(e.CalculatePlanarTextureCoord(n,u));return l},e.CalculatePolygonCubicTextureCoords=function(o,r,t){var n,l,a=[],u=o.GetPolygon(r),C=o.GetTextureProjection().GetCoords();for(n=0;n<u.VertexIndexCount();n++)l=o.GetVertexPosition(u.GetVertexIndex(n)),a.push(e.CalculateCubicTextureCoord(l,t,C));return a},e.CalculatePolygonCylindricalTextureCoords=function(o,r,t){var n,l,a,u,C=[],i=[],d=o.GetPolygon(r),c=o.GetTextureProjection().GetCoords();for(n=0;n<d.VertexIndexCount();n++)a=o.GetVertexPosition(d.GetVertexIndex(n)),u=e.CalculateCylindricalTextureCoord(a,t,c),C.push(u[0]),i.push(u[1]);if(c.e3.Clone().Normalize().IsCollinearWith(t))return C;var x=!1;for(n=0;n<i.length;n++){for(l=n+1;l<i.length;l++)if(e.IsGreater(Math.abs(i[n]-i[l]),Math.PI)){x=!0;break}if(x)break}if(x){var s=c.e1.Length();for(n=0;n<i.length;n++)e.IsLower(i[n],Math.PI)&&(C[n].x=s*(i[n]+2*Math.PI))}return C},e.CalculateBodyPlanarTextureCoords=function(o){var r,t=[];for(r=0;r<o.PolygonCount();r++)t.push(e.CalculatePolygonPlanarTextureCoords(o,r));return t},e.CalculateBodyCubicTextureCoords=function(o){var r,t,n=[],l=e.CalculateBodyPolygonNormals(o);for(r=0;r<o.PolygonCount();r++)t=l[r],n.push(e.CalculatePolygonCubicTextureCoords(o,r,t));return n},e.CalculateBodyCylindricalTextureCoords=function(o){var r,t,n=[],l=e.CalculateBodyPolygonNormals(o);for(r=0;r<o.PolygonCount();r++)t=l[r],n.push(e.CalculatePolygonCylindricalTextureCoords(o,r,t));return n},e.CalculateBodyTextureCoords=function(o){var r=[],t=o.GetTextureProjection().GetType();return t===e.TextureProjectionType.Planar?r=e.CalculateBodyPlanarTextureCoords(o):t===e.TextureProjectionType.Cubic?r=e.CalculateBodyCubicTextureCoords(o):t===e.TextureProjectionType.Cylindrical&&(r=e.CalculateBodyCylindricalTextureCoords(o)),r},e});
//# sourceMappingURL=../sourcemaps/modeler/textureutils.js.map
