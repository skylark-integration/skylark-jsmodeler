/**
 * skylark-jsmodeler - A version of jsmodeler that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-jsmodeler/
 * @license MIT
 */
define(["../core/jsm"],function(e){return e.ConvertBodyToTriangleBody=function(r){function t(e,r,t,a,n){var o=e.AddTriangle(t,a,n),s=e.GetTriangle(o);r.HasMaterialIndex()&&(s.mat=r.GetMaterialIndex()),r.HasCurveGroup()&&(s.curve=r.GetCurveGroup())}var a,n,o,s,i,l,u,m,f,d=new e.TriangleBody;for(a=0;a<r.VertexCount();a++)o=r.GetVertexPosition(a),d.AddVertex(o.x,o.y,o.z);for(a=0;a<r.PolygonCount();a++)if(!((i=(s=r.GetPolygon(a)).VertexIndexCount())<3))if(3==i)t(d,s,s.GetVertexIndex(0),s.GetVertexIndex(1),s.GetVertexIndex(2));else{for(l=new e.Polygon,n=0;n<i;n++)o=r.GetVertexPosition(s.GetVertexIndex(n)),l.AddVertex(o.x,o.y,o.z);if(u=e.CalculateBodyPolygonNormal(r,a),null!==(f=e.TriangulatePolygon(l,u)))for(n=0;n<f.length;n++)m=f[n],t(d,s,s.GetVertexIndex(m[0]),s.GetVertexIndex(m[1]),s.GetVertexIndex(m[2]))}return d},e.ConvertModelToTriangleModel=function(r){var t,a,n,o,s=new e.TriangleModel,i=r.GetMaterialSet();for(t=0;t<i.Count();t++)a=i.GetMaterial(t),s.AddMaterial({name:"Material"+t,ambient:e.HexColorToNormalizedRGBComponents(a.ambient),diffuse:e.HexColorToNormalizedRGBComponents(a.diffuse),specular:e.HexColorToNormalizedRGBComponents(a.specular),shininess:a.shininess,opacity:a.opacity,reflection:a.reflection});for(t=0;t<r.BodyCount();t++)n=r.GetBody(t),o=e.ConvertBodyToTriangleBody(n),s.AddBody(o);return s.Finalize(),s},e.ConvertTriangleModelToJsonData=function(r){function t(e,r,t){var a,n,o,s,i=[],l=e.MaterialCount();for(a=0;a<r.VertexCount();a++)o=r.GetVertex(a),t.vertices.push(o.x,o.y,o.z);for(a=0;a<r.NormalCount();a++)o=r.GetNormal(a),t.normals.push(o.x,o.y,o.z);for(a=0;a<r.UVCount();a++)o=r.GetUV(a),t.uvs.push(o.x,o.y);for(a=0;a<l;a++)i.push([]);for(a=0;a<r.TriangleCount();a++)void 0===(s=r.GetTriangle(a)).mat||s.mat<0||s.mat>=l||i[s.mat].push(a);var u,m;for(a=0;a<i.length;a++)if(0!==(u=i[a]).length){for(m={material:a,parameters:[]},n=0;n<u.length;n++)s=r.GetTriangle(u[n]),m.parameters.push(s.v0,s.v1,s.v2,s.n0,s.n1,s.n2,s.u0,s.u1,s.u2);u.length,t.triangles.push(m)}}var a,n,o,s={version:1,materials:[],meshes:[]};for(function(r,t){var a,n,o;for(a=0;a<r.MaterialCount();a++)n=r.GetMaterial(a),o={name:e.ValueOrDefault(n.name,""),ambient:n.ambient,diffuse:n.diffuse,specular:n.specular,shininess:n.shininess,opacity:n.opacity},void 0!==n.texture&&null!==n.texture&&(o.texture=e.ValueOrDefault(n.texture,null),o.offset=n.offset,o.scale=n.scale,o.rotation=n.rotation),t.push(o)}(r,s.materials),a=0;a<r.BodyCount();a++)0!==(n=r.GetBody(a)).TriangleCount()&&(t(r,n,o={name:n.GetName(),vertices:[],normals:[],uvs:[],triangles:[]}),s.meshes.push(o));return s},e.MergeJsonDataMeshes=function(e){function r(e,r,t){function a(e,r,t,a,n,o){var s=r.material,i=t[s];void 0===i&&(e.triangles.push({material:s,parameters:[]}),i=e.triangles.length-1,t[s]=i);var l,u=e.triangles[i].parameters;for(l=0;l<r.parameters.length;l+=9)u.push(r.parameters[l]+a,r.parameters[l+1]+a,r.parameters[l+2]+a,r.parameters[l+3]+n,r.parameters[l+4]+n,r.parameters[l+5]+n,r.parameters[l+6]+o,r.parameters[l+7]+o,r.parameters[l+8]+o)}var n,o=e.vertices.length/3,s=e.normals.length/3,i=e.uvs.length/2;for(function(e,r){var t;for(t=0;t<r.vertices.length;t++)e.vertices.push(r.vertices[t]);for(t=0;t<r.normals.length;t++)e.normals.push(r.normals[t]);for(t=0;t<r.uvs.length;t++)e.uvs.push(r.uvs[t])}(e,r),n=0;n<r.triangles.length;n++)a(e,r.triangles[n],t,o,s,i)}var t,a={version:e.version,materials:e.materials,meshes:[]},n={name:"Merged",vertices:[],normals:[],uvs:[],triangles:[]},o={};for(t=0;t<e.meshes.length;t++)r(n,e.meshes[t],o);return a.meshes.push(n),a},e});
//# sourceMappingURL=../sourcemaps/modeler/converter.js.map
