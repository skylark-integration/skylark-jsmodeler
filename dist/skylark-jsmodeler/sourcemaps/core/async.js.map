{"version":3,"sources":["core/async.js"],"names":["define","JSM","AsyncRunTask","taskFunction","callbacks","runCount","timeout","userData","i","undefined","onStart","OnStart","RunTask","currentCount","needContinue","onProgress","OnProgress","setTimeout","onFinish","OnFinished"],"mappings":";;;;;;;AAAAA,QAAQ,SAAS,SAASC,GAkEzB,OArDAA,EAAIC,aAAe,SAAUC,EAAcC,EAAWC,EAAUC,EAASC,GAuCvE,IAAIC,EADL,QAAkBC,IAAdL,GAAyC,OAAdA,GApC/B,SAAkBC,EAAUE,EAAUH,QAEXK,IAAtBL,EAAUM,SAA+C,OAAtBN,EAAUM,SAChDN,EAAUM,QAASL,EAAUE,GA4C/BI,CAASN,EAAUE,EAAUH,GA1B7B,SAASQ,EAASC,EAAcN,EAAUH,GAEzC,IAAIU,EAAeX,KAhBpB,SAAqBU,EAAcN,EAAUH,QAEfK,IAAzBL,EAAUW,YAAqD,OAAzBX,EAAUW,YACnDX,EAAUW,WAAYF,EAAcN,GAcrCS,CAAYH,EAAcN,EAAUH,GAChCU,GAAgBD,EAAeR,EAAW,EAC7CY,WAAY,WACXL,EAASC,EAAe,EAAGN,EAAUH,IACnCE,GAEHW,WAAY,YAhBd,SAAqBV,EAAUH,QAEHK,IAAvBL,EAAUc,UAAiD,OAAvBd,EAAUc,UACjDd,EAAUc,SAAUX,GAcnBY,CAAYZ,EAAUH,IACpBE,GAgBLM,CAAS,EAAGL,EAAUH,QAVrB,IAAKI,EAAI,EAAGA,EAAIH,GACAF,IADUK,OAarBP","file":"../../core/async.js","sourcesContent":["define([\"./jsm\"],function(JSM){\n\t/**\n\t* Function: AsyncRunTask\n\t* Description:\n\t*\tCalls a function multiple times asynchronously. If the environment\n\t*\tis not specified, it will run synchronously.\n\t* Parameters:\n\t*\ttaskFunction {function} the function to run\n\t*\tcallbacks {object} callbacks for start, process, and finish\n\t*\trunCount {integer} the count of runs\n\t*\ttimeout {integer} the timeout between runs\n\t*\tuserData {anything} task specific data\n\t*/\n\tJSM.AsyncRunTask = function (taskFunction, callbacks, runCount, timeout, userData)\n\t{\n\t\tfunction OnStart (runCount, userData, callbacks)\n\t\t{\n\t\t\tif (callbacks.onStart !== undefined && callbacks.onStart !== null) {\n\t\t\t\tcallbacks.onStart (runCount, userData);\n\t\t\t}\n\t\t}\n\n\t\tfunction OnProgress (currentCount, userData, callbacks)\n\t\t{\n\t\t\tif (callbacks.onProgress !== undefined && callbacks.onProgress !== null) {\n\t\t\t\tcallbacks.onProgress (currentCount, userData);\n\t\t\t}\n\t\t}\n\t\t\n\t\tfunction OnFinished (userData, callbacks)\n\t\t{\n\t\t\tif (callbacks.onFinish !== undefined && callbacks.onFinish !== null) {\n\t\t\t\tcallbacks.onFinish (userData);\n\t\t\t}\n\t\t}\n\n\t\tfunction RunTask (currentCount, userData, callbacks)\n\t\t{\n\t\t\tvar needContinue = taskFunction ();\n\t\t\tOnProgress (currentCount, userData, callbacks);\n\t\t\tif (needContinue && currentCount < runCount - 1) {\n\t\t\t\tsetTimeout (function () {\n\t\t\t\t\tRunTask (currentCount + 1, userData, callbacks);\n\t\t\t\t}, timeout);\n\t\t\t} else {\n\t\t\t\tsetTimeout (function () {\n\t\t\t\t\tOnFinished (userData, callbacks);\n\t\t\t\t}, timeout);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (callbacks === undefined || callbacks === null) {\n\t\t\tvar i, needContinue;\n\t\t\tfor (i = 0; i < runCount; i++) {\n\t\t\t\tneedContinue = taskFunction ();\n\t\t\t\tif (!needContinue) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tOnStart (runCount, userData, callbacks);\n\t\tRunTask (0, userData, callbacks);\n\t};\n\n\treturn JSM;\n});\n"]}