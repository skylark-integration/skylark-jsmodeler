{"version":3,"sources":["core/algorithm.js"],"names":["define","JSM","SwapArrayValues","array","from","to","temp","BubbleSort","onCompare","onSwap","length","compareFunction","undefined","i","j","swapFunction","ShiftArray","count","push","shift"],"mappings":";;;;;;;AAAAA,QAAQ,SAAS,SAASC,GAmEzB,OAzDAA,EAAIC,gBAAkB,SAAUC,EAAOC,EAAMC,GAC5C,IAAIC,EAAOH,EAAMC,GACjBD,EAAMC,GAAQD,EAAME,GACpBF,EAAME,GAAMC,GAWbL,EAAIM,WAAa,SAAUJ,EAAOK,EAAWC,GAC5C,GAAIN,EAAMO,OAAS,EAClB,OAAO,EAGR,IAAIC,EAAkBH,EACtB,QAAwBI,IAApBD,GAAqD,OAApBA,EACpC,OAAO,EAGR,IAOIE,EAAGC,EAPHC,EAAeN,EAQnB,SAPqBG,IAAjBG,GAA+C,OAAjBA,IACjCA,EAAe,SAAUF,EAAGC,GAC3Bb,EAAIC,gBAAiBC,EAAOU,EAAGC,KAK5BD,EAAI,EAAGA,EAAIV,EAAMO,OAAS,EAAGG,IACjC,IAAKC,EAAI,EAAGA,EAAIX,EAAMO,OAASG,EAAI,EAAGC,IAChCH,EAAiBR,EAAMW,GAAIX,EAAMW,EAAI,KACzCC,EAAcD,EAAGA,EAAI,GAKxB,OAAO,GAURb,EAAIe,WAAa,SAAUb,EAAOc,GACjC,IAAIJ,EACJ,IAAKA,EAAI,EAAGA,EAAII,EAAOJ,IACtBV,EAAMe,KAAMf,EAAMgB,UAIblB","file":"../../core/algorithm.js","sourcesContent":["define([\"./jsm\"],function(JSM){\n\n\t/**\n\t* Function: SwapArrayValues\n\t* Description: Swaps to array values.\n\t* Parameters:\n\t*\tarray {anything[]} the array\n\t*\tfrom {integer} from index\n\t*\tto {integer} to index\n\t*/\n\tJSM.SwapArrayValues = function (array, from, to){\n\t\tvar temp = array[from];\n\t\tarray[from] = array[to];\n\t\tarray[to] = temp;\n\t};\n\n\t/**\n\t* Function: BubbleSort\n\t* Description: Sorts an array with bubble sort.\n\t* Parameters:\n\t*\tarray {anything[]} the array to sort\n\t*\tonCompare {function} the compare function\n\t*\tonSwap {function} the swap function\n\t*/\n\tJSM.BubbleSort = function (array, onCompare, onSwap){\n\t\tif (array.length < 2) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar compareFunction = onCompare;\n\t\tif (compareFunction === undefined || compareFunction === null) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tvar swapFunction = onSwap;\n\t\tif (swapFunction === undefined || swapFunction === null) {\n\t\t\tswapFunction = function (i, j) {\n\t\t\t\tJSM.SwapArrayValues (array, i, j);\n\t\t\t};\n\t\t}\n\t\t\n\t\tvar i, j;\n\t\tfor (i = 0; i < array.length - 1; i++) {\n\t\t\tfor (j = 0; j < array.length - i - 1; j++) {\n\t\t\t\tif (!compareFunction (array[j], array[j + 1])) {\n\t\t\t\t\tswapFunction (j, j + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn true;\n\t};\n\n\t/**\n\t* Function: ShiftArray\n\t* Description: Shifts an array.\n\t* Parameters:\n\t*\tarray {anything[]} the array to shift\n\t*\tcount {integer} shift count\n\t*/\n\tJSM.ShiftArray = function (array, count){\n\t\tvar i;\n\t\tfor (i = 0; i < count; i++) {\n\t\t\tarray.push (array.shift ());\n\t\t}\n\t};\n\n\treturn JSM;\n});\n"]}