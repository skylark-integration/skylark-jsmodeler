{"version":3,"sources":["core/timer.js"],"names":["define","JSM","Timer","this","start","stop","prototype","Start","date","Date","getTime","Stop","end","Result","FPSCounter","frames","current","Get","interval","undefined","elapsed","parseInt"],"mappings":";;;;;;;AAAAA,QAAQ,SAAS,SAASC,GAkFzB,OA7EAA,EAAIC,MAAQ,WACXC,KAAKC,MAAQ,EACbD,KAAKE,KAAO,GAObJ,EAAIC,MAAMI,UAAUC,MAAQ,WAC3B,IAAIC,EAAO,IAAIC,KACfN,KAAKC,MAAQI,EAAKE,WAOnBT,EAAIC,MAAMI,UAAUK,KAAO,WAC1B,IAAIH,EAAO,IAAIC,KACfN,KAAKS,IAAMJ,EAAKE,WASjBT,EAAIC,MAAMI,UAAUO,OAAS,WAC5B,OAAQV,KAAKS,IAAMT,KAAKC,OASzBH,EAAIa,WAAa,WAChBX,KAAKC,MAAQ,KACbD,KAAKY,OAAS,KACdZ,KAAKa,QAAU,MAWhBf,EAAIa,WAAWR,UAAUW,IAAM,SAAUC,GACxC,IACIN,GADO,IAAIH,MACAC,UACI,OAAfP,KAAKC,QACRD,KAAKC,MAAQQ,EACbT,KAAKY,OAAS,EACdZ,KAAKa,QAAU,GAGC,OAAbE,QAAkCC,IAAbD,IACxBA,EAAW,KAGZf,KAAKY,OAASZ,KAAKY,OAAS,EAC5B,IAAIK,EAAUR,EAAMT,KAAKC,MAOzB,OANIgB,GAAWF,IACdf,KAAKa,QAAkBb,KAAKY,OAASK,EAAtB,IACfjB,KAAKC,MAAQQ,EACbT,KAAKY,OAAS,GAGRM,SAAUlB,KAAKa,QAAS,KAGzBf","file":"../../core/timer.js","sourcesContent":["define([\"./jsm\"],function(JSM){\n\t/**\n\t* Class: Timer\n\t* Description: Utility class for time measure.\n\t*/\n\tJSM.Timer = function ()\t{\n\t\tthis.start = 0;\n\t\tthis.stop = 0;\n\t};\n\n\t/**\n\t* Function: Timer.Start\n\t* Description: Starts the timer.\n\t*/\n\tJSM.Timer.prototype.Start = function ()\t{\n\t\tvar date = new Date ();\n\t\tthis.start = date.getTime ();\n\t};\n\n\t/**\n\t* Function: Timer.Stop\n\t* Description: Stops the timer.\n\t*/\n\tJSM.Timer.prototype.Stop = function ()\t{\n\t\tvar date = new Date ();\n\t\tthis.end = date.getTime ();\n\t};\n\n\t/**\n\t* Function: Timer.Result\n\t* Description: Returns the time between start and stop.\n\t* Returns:\n\t*\t{number} The result.\n\t*/\n\tJSM.Timer.prototype.Result = function (){\n\t\treturn (this.end - this.start);\n\t};\n\n\t/**\n\t* Class: FPSCounter\n\t* Description:\n\t*\tUtility class for FPS count. It calculates the frames and returns FPS count for the last interval\n\t*\twith the given length. The Get function should called in every frame.\n\t*/\n\tJSM.FPSCounter = function (){\n\t\tthis.start = null;\n\t\tthis.frames = null;\n\t\tthis.current = null;\n\t};\n\n\t/**\n\t* Function: FPSCounter.Get\n\t* Description: Returns the FPS count for the last interval with the given length.\n\t* Parameters:\n\t*\tinterval {integer} the interval length in milliseconds\n\t* Returns:\n\t*\t{integer} The result.\n\t*/\n\tJSM.FPSCounter.prototype.Get = function (interval)\t{\n\t\tvar date = new Date ();\n\t\tvar end = date.getTime ();\n\t\tif (this.start === null) {\n\t\t\tthis.start = end;\n\t\t\tthis.frames = 0;\n\t\t\tthis.current = 0;\n\t\t}\n\n\t\tif (interval === null || interval === undefined) {\n\t\t\tinterval = 1000;\n\t\t}\n\t\t\n\t\tthis.frames = this.frames + 1;\n\t\tvar elapsed = end - this.start;\n\t\tif (elapsed >= interval) {\n\t\t\tthis.current = 1000 * (this.frames / elapsed);\n\t\t\tthis.start = end;\n\t\t\tthis.frames = 0;\n\t\t}\n\n\t\treturn parseInt (this.current, 10);\n\t};\n\n\treturn JSM;\n});\n"]}