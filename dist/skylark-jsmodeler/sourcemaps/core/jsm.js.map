{"version":3,"sources":["core/jsm.js"],"names":["define","JSM","this","mainVersion","subVersion","RandomNumber","from","to","Math","random","RandomInt","floor","RandomBoolean","SeededRandomInt","seed","ValueOrDefault","val","def","undefined","PrevIndex","index","length","NextIndex","CopyObjectProperties","source","target","overwrite","property","hasOwnProperty","GetObjectProperty","object","propertyName","defaultValue","propertyValue","Message","message","console","log"],"mappings":";;;;;;;AAAAA,UAAU,WACT,IAAIC,EAAM,WAETC,KAAKC,YAAc,EACnBD,KAAKE,WAAa,IA8JnB,OAlJAH,EAAII,aAAe,SAAUC,EAAMC,GAElC,OAAOC,KAAKC,UAAaF,EAAKD,GAAQA,GAYvCL,EAAIS,UAAY,SAAUJ,EAAMC,GAE/B,OAAOC,KAAKG,MAAQH,KAAKC,UAAaF,EAAKD,EAAO,GAAMA,IASzDL,EAAIW,cAAgB,WAEnB,OAAgC,IAAzBX,EAAIS,UAAW,EAAG,IAa1BT,EAAIY,gBAAkB,SAAUP,EAAMC,EAAIO,GAEtC,IAAIL,GAAkB,KAAPK,EAAc,OAAS,OAAU,OACnD,OAAON,KAAKG,MAAQF,GAAUF,EAAKD,EAAO,GAAMA,IAYjDL,EAAIc,eAAiB,SAAUC,EAAKC,GAEnC,YAAYC,IAARF,GAA6B,OAARA,EACjBC,EAEDD,GAURf,EAAIkB,UAAY,SAAUC,EAAOC,GAEhC,OAAOD,EAAQ,EAAIA,EAAQ,EAAIC,EAAS,GAUzCpB,EAAIqB,UAAY,SAAUF,EAAOC,GAEhC,OAAOD,EAAQC,EAAS,EAAID,EAAQ,EAAI,GAWzCnB,EAAIsB,qBAAuB,SAAUC,EAAQC,EAAQC,GAQpD,IAAIC,EANJ,QAAeT,IAAXM,GAAmC,OAAXA,QAChBN,IAAXO,GAAmC,OAAXA,EAMzB,IAAKE,KAAYH,EACZA,EAAOI,eAAgBD,KACtBD,QAAkCR,IAArBO,EAAOE,IAAgD,OAArBF,EAAOE,MACzDF,EAAOE,GAAYH,EAAOG,KAc9B1B,EAAI4B,kBAAoB,SAAUC,EAAQC,EAAcC,GAEvD,QAAed,IAAXY,GAAmC,OAAXA,EAC3B,OAAOE,EAGR,IAAIC,EAAgBH,EAAOC,GAC3B,YAAsBb,IAAlBe,GAAiD,OAAlBA,EAC3BD,EAGDC,GASRhC,EAAIiC,QAAU,SAAUC,GAEvBC,QAAQC,IAAK,cAAgBF,IAGvBlC","file":"../../core/jsm.js","sourcesContent":["define([],function(){\n\tvar JSM = function ()\n\t{\n\t\tthis.mainVersion = 0;\n\t\tthis.subVersion = 45;\n\t};\n\n\t/**\n\t* Function: RandomNumber\n\t* Description: Generates a random number between two numbers.\n\t* Parameters:\n\t*\tfrom {number} lowest random result\n\t*\tto {number} highest random result\n\t* Returns:\n\t*\t{number} the result\n\t*/\n\tJSM.RandomNumber = function (from, to)\n\t{\n\t\treturn Math.random () * (to - from) + from;\n\t};\n\n\t/**\n\t* Function: RandomInt\n\t* Description: Generates a random integer between two integers.\n\t* Parameters:\n\t*\tfrom {integer} lowest random result\n\t*\tto {integer} highest random result\n\t* Returns:\n\t*\t{integer} the result\n\t*/\n\tJSM.RandomInt = function (from, to)\n\t{\n\t\treturn Math.floor ((Math.random () * (to - from + 1)) + from);\n\t};\n\n\t/**\n\t* Function: RandomBoolean\n\t* Description: Generates a random boolean value.\n\t* Returns:\n\t*\t{boolean} the result\n\t*/\n\tJSM.RandomBoolean = function ()\n\t{\n\t\treturn JSM.RandomInt (0, 1) === 1;\n\t};\n\n\t/**\n\t* Function: SeededRandomInt\n\t* Description: Generates a random integer between two integers. A seed number can be specified.\n\t* Parameters:\n\t*\tfrom {integer} lowest random result\n\t*\tto {integer} highest random result\n\t*\tseed {integer} seed value\n\t* Returns:\n\t*\t{integer} the result\n\t*/\n\tJSM.SeededRandomInt = function (from, to, seed)\n\t{\n\t    var random = ((seed * 9301 + 49297) % 233280) / 233280;\n\t\treturn Math.floor ((random * (to - from + 1)) + from);\n\t};\n\n\t/**\n\t* Function: ValueOrDefault\n\t* Description: Returns the given value, or a default if it is undefined.\n\t* Parameters:\n\t*\tval {anything} new value\n\t*\tdef {anything} default value\n\t* Returns:\n\t*\t{anything} the result\n\t*/\n\tJSM.ValueOrDefault = function (val, def)\n\t{\n\t\tif (val === undefined || val === null) {\n\t\t\treturn def;\n\t\t}\n\t\treturn val;\n\t};\n\n\t/**\n\t* Function: PrevIndex\n\t* Description: Returns the circular previous index for an array with the given length.\n\t* Parameters:\n\t*\tindex {integer} the index\n\t*\tlength {integer} the number of indices\n\t*/\n\tJSM.PrevIndex = function (index, length)\n\t{\n\t\treturn index > 0 ? index - 1 : length - 1;\n\t};\n\n\t/**\n\t* Function: NextIndex\n\t* Description: Returns the circular next index for an array with the given length.\n\t* Parameters:\n\t*\tindex {integer} the index\n\t*\tlength {integer} the number of indices\n\t*/\n\tJSM.NextIndex = function (index, length)\n\t{\n\t\treturn index < length - 1 ? index + 1 : 0;\n\t};\n\n\t/**\n\t* Function: CopyObjectProperties\n\t* Description: Copies one object properties to another object.\n\t* Parameters:\n\t*\tsource {anything} source object\n\t*\ttarget {anything} target object\n\t*\toverwrite {boolean} overwrite existing properties\n\t*/\n\tJSM.CopyObjectProperties = function (source, target, overwrite)\n\t{\n\t\tif (source === undefined || source === null ||\n\t\t\ttarget === undefined || target === null)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tvar property;\n\t\tfor (property in source) {\n\t\t\tif (source.hasOwnProperty (property)) {\n\t\t\t\tif (overwrite || target[property] === undefined || target[property] === null) {\n\t\t\t\t\ttarget[property] = source[property];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t* Function: GetObjectProperty\n\t* Description: Returns the given property of the object. If it doesn't exist, returns the given default value.\n\t* Parameters:\n\t*\tobject {anything} the object\n\t*\tpropertyName {string} the name of the property\n\t*\tdefaultValue {anything} the default value\n\t*/\n\tJSM.GetObjectProperty = function (object, propertyName, defaultValue)\n\t{\n\t\tif (object === undefined || object === null) {\n\t\t\treturn defaultValue;\n\t\t}\n\n\t\tvar propertyValue = object[propertyName];\n\t\tif (propertyValue === undefined || propertyValue === null) {\n\t\t\treturn defaultValue;\n\t\t}\n\t\t\n\t\treturn propertyValue;\n\t};\n\n\t/**\n\t* Function: Message\n\t* Description: Writes a message to the console.\n\t* Parameters:\n\t*\tmessage {string} the message\n\t*/\n\tJSM.Message = function (message)\n\t{\n\t\tconsole.log ('JSModeler: ' + message);\n\t};\n\n\treturn JSM;\n});\n\n\n"]}