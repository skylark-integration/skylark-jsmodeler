{"version":3,"sources":["viewer/drawing.js"],"names":["define","JSM","CanvasDrawer","canvas","this","context","getContext","prototype","GetWidth","width","GetHeight","height","Clear","clearRect","fillStyle","fillRect","DrawLine","from","to","beginPath","moveTo","x","y","lineTo","stroke","DrawPolygon","polygon","color","contour","hexColor","rgb","i","vertex","nextVertex","HexColorToRGBComponents","VertexCount","GetVertex","closePath","fill","SVGDrawer","svgObject","svgNameSpace","getAttribute","lastChild","removeChild","svgLine","document","createElementNS","setAttributeNS","appendChild","pointsString","svgPolyon","DrawProjectedBody","body","materials","camera","drawMode","needClear","drawer","AddProjectedCoord","projectedPolygon","coord","projected","Project","eye","center","up","fieldOfView","DegRad","aspectRatio","nearPlane","farPlane","viewPort","AddVertex","GetProjectedPolygonFromBody","Polygon2D","VertexIndexCount","GetVertexPosition","GetVertexIndex","j","materialIndex","nearClippingPlane","farClippingPlane","orderedPolygons","OrderPolygons","undefined","MaterialSet","length","GetPolygon","GetMaterialIndex","GetMaterial","diffuse","bspTree","BSPTree","AddBodyToBSPTree","TraverseBSPTreeForEyePosition","node","GetProjectedPolygonFromPolygon","userData","originalPolygon","PolygonCount","GetOrientation","Orientation","CounterClockwise","vertexCount","currentCoord","currentVertex","drawedLines"],"mappings":";;;;;;;AAAAA,QAAQ,eAAe,SAASC,GAyU/B,OAlUAA,EAAIC,aAAe,SAAUC,GAE5BC,KAAKD,OAASA,EACdC,KAAKC,QAAUD,KAAKD,OAAOG,WAAY,OASxCL,EAAIC,aAAaK,UAAUC,SAAW,WAErC,OAAOJ,KAAKD,OAAOM,OASpBR,EAAIC,aAAaK,UAAUG,UAAY,WAEtC,OAAON,KAAKD,OAAOQ,QAOpBV,EAAIC,aAAaK,UAAUK,MAAQ,WAElCR,KAAKC,QAAQQ,UAAW,EAAG,EAAGT,KAAKD,OAAOM,MAAOL,KAAKD,OAAOQ,QAC7DP,KAAKC,QAAQS,UAAY,UACzBV,KAAKC,QAAQU,SAAU,EAAG,EAAGX,KAAKD,OAAOM,MAAOL,KAAKD,OAAOQ,SAU7DV,EAAIC,aAAaK,UAAUS,SAAW,SAAUC,EAAMC,GAErDd,KAAKC,QAAQc,YACbf,KAAKC,QAAQe,OAAQH,EAAKI,EAAGjB,KAAKD,OAAOQ,OAASM,EAAKK,GACvDlB,KAAKC,QAAQkB,OAAQL,EAAGG,EAAGjB,KAAKD,OAAOQ,OAASO,EAAGI,GACnDlB,KAAKC,QAAQmB,UAWdvB,EAAIC,aAAaK,UAAUkB,YAAc,SAAUC,EAASC,EAAOC,GAElE,IAA8BC,EAEzBC,EAQDC,EAAGC,EAAQC,EACf,IAJA7B,KAAKC,QAAQS,WAPiBe,EAOgBF,EAJhC,QADTG,EAAM7B,EAAIiC,wBAAyBL,IACb,GAAK,IAAMC,EAAI,GAAK,IAAMA,EAAI,GAAK,KAK9D1B,KAAKC,QAAQc,YAGRY,EAAI,EAAGA,EAAIL,EAAQS,cAAgBJ,IACvCC,EAASN,EAAQU,UAAWL,GAClB,IAANA,EACH3B,KAAKC,QAAQe,OAAQY,EAAOX,EAAGjB,KAAKD,OAAOQ,OAASqB,EAAOV,GAE3DlB,KAAKC,QAAQkB,OAAQS,EAAOX,EAAGjB,KAAKD,OAAOQ,OAASqB,EAAOV,GAO7D,GAHAlB,KAAKC,QAAQgC,YACbjC,KAAKC,QAAQiC,OAETV,EACH,IAAKG,EAAI,EAAGA,EAAIL,EAAQS,cAAgBJ,IACvCC,EAASN,EAAQU,UAAWL,GAC5BE,EAAaP,EAAQU,UAAWL,EAAIL,EAAQS,cAAiB,EAAIJ,EAAI,EAAI,GACzE3B,KAAKY,SAAUgB,EAAQC,IAW1BhC,EAAIsC,UAAY,SAAUC,GAEzBpC,KAAKoC,UAAYA,EACjBpC,KAAKqC,aAAe,8BASrBxC,EAAIsC,UAAUhC,UAAUC,SAAW,WAElC,OAAOJ,KAAKoC,UAAUE,aAAc,UASrCzC,EAAIsC,UAAUhC,UAAUG,UAAY,WAEnC,OAAON,KAAKoC,UAAUE,aAAc,WAOrCzC,EAAIsC,UAAUhC,UAAUK,MAAQ,WAE/B,KAAOR,KAAKoC,UAAUG,WACrBvC,KAAKoC,UAAUI,YAAaxC,KAAKoC,UAAUG,YAW7C1C,EAAIsC,UAAUhC,UAAUS,SAAW,SAAUC,EAAMC,GAElD,IAAI2B,EAAUC,SAASC,gBAAiB3C,KAAKqC,aAAc,QACvD9B,EAASP,KAAKM,YAClBmC,EAAQG,eAAgB,KAAM,SAAU,SACxCH,EAAQG,eAAgB,KAAM,KAAM/B,EAAKI,GACzCwB,EAAQG,eAAgB,KAAM,KAAMrC,EAASM,EAAKK,GAClDuB,EAAQG,eAAgB,KAAM,KAAM9B,EAAGG,GACvCwB,EAAQG,eAAgB,KAAM,KAAMrC,EAASO,EAAGI,GAChDlB,KAAKoC,UAAUS,YAAaJ,IAW7B5C,EAAIsC,UAAUhC,UAAUkB,YAAc,SAAUC,EAASC,GASxD,IAGII,EAAGC,EAHHkB,EAAe,GACfvC,EAASP,KAAKM,YAGlB,IAAKqB,EAAI,EAAGA,EAAIL,EAAQS,cAAgBJ,IAEvCmB,EAAeA,GADflB,EAASN,EAAQU,UAAWL,IACSV,EAAI,MAAQV,EAASqB,EAAOV,GAC7DS,EAAIL,EAAQS,cAAiB,IAChCe,GAA8B,MAIhC,IAnB8BrB,EAEzBC,EAiBDqB,EAAYL,SAASC,gBAAiB3C,KAAKqC,aAAc,WAC7DU,EAAUH,eAAgB,KAAM,SAAUE,GAC1CC,EAAUH,eAAgB,KAAM,QArBFnB,EAqB+BF,EAlB/C,QADTG,EAAM7B,EAAIiC,wBAAyBL,IACb,GAAK,IAAMC,EAAI,GAAK,IAAMA,EAAI,GAAK,MAmB9DqB,EAAUH,eAAgB,KAAM,eAAgB,OAChDG,EAAUH,eAAgB,KAAM,SAAU,SAC1C5C,KAAKoC,UAAUS,YAAaE,IAc7BlD,EAAImD,kBAAoB,SAAUC,EAAMC,EAAWC,EAAQC,EAAUC,EAAWC,GAE/E,SAASC,EAAmBC,EAAkBC,GAE7C,IAAIC,EAAY7D,EAAI8D,QAASF,EAAOG,EAAKC,EAAQC,EAAIC,EAAclE,EAAImE,OAAQC,EAAaC,EAAWC,EAAUC,GACjHZ,EAAiBa,UAAWX,EAAUzC,EAAGyC,EAAUxC,GAGpD,SAASoD,EAA6BhD,GAErC,IACIK,EADA6B,EAAmB,IAAI3D,EAAI0E,UAE/B,IAAK5C,EAAI,EAAGA,EAAIL,EAAQkD,mBAAqB7C,IAE5C4B,EAAmBC,EADXP,EAAKwB,kBAAmBnD,EAAQoD,eAAgB/C,KAGzD,OAAO6B,EAcJH,GACHC,EAAO9C,QAGR,IAYImB,EAAGgD,EAAGrD,EAASmC,EAAOC,EAAWkB,EAAerD,EAZhDlB,EAAQiD,EAAOlD,WACfG,EAAS+C,EAAOhD,YAEhBsD,EAAMT,EAAOS,IACbC,EAASV,EAAOU,OAChBC,EAAKX,EAAOW,GACZC,EAAcZ,EAAOY,YACrBE,EAAc5D,EAAQE,EACtB2D,EAAYf,EAAO0B,kBACnBV,EAAWhB,EAAO2B,iBAClBV,GAAY,EAAG,EAAG/D,EAAOE,GAG7B,GAAgB,qBAAZ6C,EAAiC,CACpC,IAAI2B,EAAkBlF,EAAImF,cAAe/B,EAAMW,EAAKC,GAIpD,SAHkBoB,IAAd/B,GAAyC,OAAdA,IAC9BA,EAAY,IAAIrD,EAAIqF,aAEhBvD,EAAI,EAAGA,EAAIoD,EAAgBI,OAAQxD,IACvCL,EAAU2B,EAAKmC,WAAYL,EAAgBpD,IAC3C+B,EAAYY,EAA6BhD,GACzCsD,EAAgBtD,EAAQ+D,mBACxB9D,EAAQ2B,EAAUoC,YAAaV,GAAeW,QAC9CjC,EAAOjC,YAAaqC,EAAWnC,GAAO,QAEjC,GAAgB,qBAAZ6B,EAAiC,MACzB6B,IAAd/B,GAAyC,OAAdA,IAC9BA,EAAY,IAAIrD,EAAIqF,aAGrB,IAAIM,EAAU,IAAI3F,EAAI4F,QACtB5F,EAAI6F,iBAAkBzC,EAAMuC,GAE5B3F,EAAI8F,8BAA+BH,EAASrC,EAAOS,IAAK,SAAUgC,GACjElC,EAjDF,SAAyCpC,GAExC,IACIK,EADA6B,EAAmB,IAAI3D,EAAI0E,UAE/B,IAAK5C,EAAI,EAAGA,EAAIL,EAAQS,cAAgBJ,IAEvC4B,EAAmBC,EADXlC,EAAQU,UAAWL,IAG5B,OAAO6B,EAyCMqC,CAAgCD,EAAKtE,SACjDA,EAAU2B,EAAKmC,WAAYQ,EAAKE,SAASC,iBACzCnB,EAAgBtD,EAAQ+D,mBACxB9D,EAAQ2B,EAAUoC,YAAaV,GAAeW,QAC9CjC,EAAOjC,YAAaqC,EAAWnC,GAAO,UAEjC,GAAgB,yBAAZ6B,EAKV,SAJkB6B,IAAd/B,GAAyC,OAAdA,IAC9BA,EAAY,IAAIrD,EAAIqF,aAGhBvD,EAAI,EAAGA,EAAIsB,EAAK+C,eAAiBrE,IACrCL,EAAU2B,EAAKmC,WAAYzD,IAC3B+B,EAAYY,EAA6BhD,IAC3B2E,kBAAqBpG,EAAIqG,YAAYC,mBAClDvB,EAAgBtD,EAAQ+D,mBACxB9D,EAAQ2B,EAAUoC,YAAaV,GAAeW,QAC9CjC,EAAOjC,YAAaqC,EAAWnC,GAAO,SAGlC,GAAgB,aAAZ6B,EAAyB,CACnC,IAAIgD,EAAaC,EAAcC,EAAe1E,EAC1C2E,KACJ,IAAK5E,EAAI,EAAGA,EAAIsB,EAAK+C,eAAiBrE,IAKrC,IAJA0E,EAAe,KACfC,EAAgB,KAEhBF,GADA9E,EAAU2B,EAAKmC,WAAYzD,IACL6C,mBACjBG,EAAI,EAAGA,GAAKyB,EAAazB,IAC7B/C,EAASN,EAAQoD,eAAgBC,EAAIyB,GACrC3C,EAAQR,EAAKwB,kBAAmB7C,GAChC8B,EAAY7D,EAAI8D,QAASF,EAAOG,EAAKC,EAAQC,EAAIC,EAAclE,EAAImE,OAAQC,EAAaC,EAAWC,EAAUC,GACxF,OAAjBiC,GAA2C,OAAlBC,QAAmErB,IAAzCsB,GAAaD,EAAe1E,MAClF0B,EAAO1C,SAAUyF,EAAc3C,GAC/B6C,GAAaD,EAAe1E,KAAW,EACvC2E,GAAa3E,EAAQ0E,KAAkB,GAExCA,EAAgB1E,EAChByE,EAAe3C,EAKlB,OAAO,GAGD7D","file":"../../viewer/drawing.js","sourcesContent":["define([\"../core/jsm\"],function(JSM){\n\t/**\n\t* Class: CanvasDrawer\n\t* Description: Represents an object which can draw primitives to a canvas.\n\t* Parameters:\n\t*\tcanvas {html canvas element} the destination element\n\t*/\n\tJSM.CanvasDrawer = function (canvas)\n\t{\n\t\tthis.canvas = canvas;\n\t\tthis.context = this.canvas.getContext ('2d');\n\t};\n\n\t/**\n\t* Function: CanvasDrawer.GetWidth\n\t* Description: Returns the width of the target.\n\t* Returns:\n\t*\t{integer} the result\n\t*/\n\tJSM.CanvasDrawer.prototype.GetWidth = function ()\n\t{\n\t\treturn this.canvas.width;\n\t};\n\n\t/**\n\t* Function: CanvasDrawer.GetHeight\n\t* Description: Returns the height of the target.\n\t* Returns:\n\t*\t{integer} the result\n\t*/\n\tJSM.CanvasDrawer.prototype.GetHeight = function ()\n\t{\n\t\treturn this.canvas.height;\n\t};\n\n\t/**\n\t* Function: CanvasDrawer.Clear\n\t* Description: Clears the target.\n\t*/\n\tJSM.CanvasDrawer.prototype.Clear = function ()\n\t{\n\t\tthis.context.clearRect (0, 0, this.canvas.width, this.canvas.height);\n\t\tthis.context.fillStyle = '#ffffff';\n\t\tthis.context.fillRect (0, 0, this.canvas.width, this.canvas.height);\n\t};\n\n\t/**\n\t* Function: CanvasDrawer.DrawLine\n\t* Description: Draws a line to the target.\n\t* Parameters:\n\t*\tfrom {Coord2D} the start of the line\n\t*\tto {Coord2D} the end of the line\n\t*/\n\tJSM.CanvasDrawer.prototype.DrawLine = function (from, to)\n\t{\n\t\tthis.context.beginPath ();\n\t\tthis.context.moveTo (from.x, this.canvas.height - from.y);\n\t\tthis.context.lineTo (to.x, this.canvas.height - to.y);\n\t\tthis.context.stroke ();\n\t};\n\n\t/**\n\t* Function: CanvasDrawer.DrawPolygon\n\t* Description: Draws a polygon to the target.\n\t* Parameters:\n\t*\tpolygon {Polygon2D} the polygon\n\t*\tcolor {string} the hex color string\n\t*\tcontour {boolean} need to draw contour\n\t*/\n\tJSM.CanvasDrawer.prototype.DrawPolygon = function (polygon, color, contour)\n\t{\n\t\tfunction HexColorToHTMLColor (hexColor)\n\t\t{\n\t\t\tvar rgb = JSM.HexColorToRGBComponents (hexColor);\n\t\t\tvar result = 'rgb(' + rgb[0] + ',' + rgb[1] + ',' + rgb[2] + ')';\n\t\t\treturn result;\n\t\t}\n\t\t\n\t\tthis.context.fillStyle = HexColorToHTMLColor (color);\n\t\tthis.context.beginPath ();\n\n\t\tvar i, vertex, nextVertex;\n\t\tfor (i = 0; i < polygon.VertexCount (); i++) {\n\t\t\tvertex = polygon.GetVertex (i);\n\t\t\tif (i === 0) {\n\t\t\t\tthis.context.moveTo (vertex.x, this.canvas.height - vertex.y);\n\t\t\t} else {\n\t\t\t\tthis.context.lineTo (vertex.x, this.canvas.height - vertex.y);\n\t\t\t}\n\t\t}\n\n\t\tthis.context.closePath ();\n\t\tthis.context.fill ();\n\n\t\tif (contour) {\n\t\t\tfor (i = 0; i < polygon.VertexCount (); i++) {\n\t\t\t\tvertex = polygon.GetVertex (i);\n\t\t\t\tnextVertex = polygon.GetVertex (i < polygon.VertexCount () - 1 ? i + 1 : 0);\n\t\t\t\tthis.DrawLine (vertex, nextVertex);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t* Class: SVGDrawer\n\t* Description: Represents an object which can draw primitives to an svg.\n\t* Parameters:\n\t*\tsvgObject {html svg element} the destination element\n\t*/\n\tJSM.SVGDrawer = function (svgObject)\n\t{\n\t\tthis.svgObject = svgObject;\n\t\tthis.svgNameSpace = 'http://www.w3.org/2000/svg';\n\t};\n\n\t/**\n\t* Function: SVGDrawer.GetWidth\n\t* Description: Returns the width of the target.\n\t* Returns:\n\t*\t{integer} the result\n\t*/\n\tJSM.SVGDrawer.prototype.GetWidth = function ()\n\t{\n\t\treturn this.svgObject.getAttribute ('width');\n\t};\n\n\t/**\n\t* Function: SVGDrawer.GetHeight\n\t* Description: Returns the height of the target.\n\t* Returns:\n\t*\t{integer} the result\n\t*/\n\tJSM.SVGDrawer.prototype.GetHeight = function ()\n\t{\n\t\treturn this.svgObject.getAttribute ('height');\n\t};\n\n\t/**\n\t* Function: SVGDrawer.Clear\n\t* Description: Clears the target.\n\t*/\n\tJSM.SVGDrawer.prototype.Clear = function ()\n\t{\n\t\twhile (this.svgObject.lastChild) {\n\t\t\tthis.svgObject.removeChild (this.svgObject.lastChild);\n\t\t}\n\t};\n\n\t/**\n\t* Function: SVGDrawer.DrawLine\n\t* Description: Draws a line to the target.\n\t* Parameters:\n\t*\tfrom {Coord2D} the start of the line\n\t*\tto {Coord2D} the end of the line\n\t*/\n\tJSM.SVGDrawer.prototype.DrawLine = function (from, to)\n\t{\n\t\tvar svgLine = document.createElementNS (this.svgNameSpace, 'line');\n\t\tvar height = this.GetHeight ();\n\t\tsvgLine.setAttributeNS (null, 'stroke', 'black');\n\t\tsvgLine.setAttributeNS (null, 'x1', from.x);\n\t\tsvgLine.setAttributeNS (null, 'y1', height - from.y);\n\t\tsvgLine.setAttributeNS (null, 'x2', to.x);\n\t\tsvgLine.setAttributeNS (null, 'y2', height - to.y);\n\t\tthis.svgObject.appendChild (svgLine);\n\t};\n\n\t/**\n\t* Function: SVGDrawer.DrawPolygon\n\t* Description: Draws a polygon to the target.\n\t* Parameters:\n\t*\tpolygon {Polygon2D} the polygon\n\t*\tcolor {string} the hex color string\n\t*\tcontour {boolean} need to draw contour\n\t*/\n\tJSM.SVGDrawer.prototype.DrawPolygon = function (polygon, color/*, contour*/)\n\t{\n\t\tfunction HexColorToHTMLColor (hexColor)\n\t\t{\n\t\t\tvar rgb = JSM.HexColorToRGBComponents (hexColor);\n\t\t\tvar result = 'rgb(' + rgb[0] + ',' + rgb[1] + ',' + rgb[2] + ')';\n\t\t\treturn result;\n\t\t}\n\n\t\tvar pointsString = '';\n\t\tvar height = this.GetHeight ();\n\t\t\n\t\tvar i, vertex;\n\t\tfor (i = 0; i < polygon.VertexCount (); i++) {\n\t\t\tvertex = polygon.GetVertex (i);\n\t\t\tpointsString = pointsString + vertex.x + ', ' + (height - vertex.y);\n\t\t\tif (i < polygon.VertexCount () - 1) {\n\t\t\t\tpointsString = pointsString + ', ';\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar svgPolyon = document.createElementNS (this.svgNameSpace, 'polygon');\n\t\tsvgPolyon.setAttributeNS (null, 'points', pointsString);\n\t\tsvgPolyon.setAttributeNS (null, 'fill', HexColorToHTMLColor (color));\n\t\tsvgPolyon.setAttributeNS (null, 'fill-opacity', '1.0');\n\t\tsvgPolyon.setAttributeNS (null, 'stroke', 'black');\n\t\tthis.svgObject.appendChild (svgPolyon);\n\t};\n\n\t/**\n\t* Function: DrawProjectedBody\n\t* Description: Draws a projected body.\n\t* Parameters:\n\t*\tbody {Body} the body\n\t*\tmaterials {MaterialSet} the material container\n\t*\tcamera {Camera} the camera for projection\n\t*\tdrawMode {string} draw mode ('HiddenLinePainter', 'HiddenLineFrontFacing' or 'Wireframe')\n\t*\tneedClear {boolean} clear the display before draw\n\t*\tdrawer {drawer object} the drawer object\n\t*/\n\tJSM.DrawProjectedBody = function (body, materials, camera, drawMode, needClear, drawer)\n\t{\n\t\tfunction AddProjectedCoord (projectedPolygon, coord)\n\t\t{\n\t\t\tvar projected = JSM.Project (coord, eye, center, up, fieldOfView * JSM.DegRad, aspectRatio, nearPlane, farPlane, viewPort);\n\t\t\tprojectedPolygon.AddVertex (projected.x, projected.y);\n\t\t}\n\n\t\tfunction GetProjectedPolygonFromBody (polygon)\n\t\t{\n\t\t\tvar projectedPolygon = new JSM.Polygon2D ();\n\t\t\tvar i, coord;\n\t\t\tfor (i = 0; i < polygon.VertexIndexCount (); i++) {\n\t\t\t\tcoord = body.GetVertexPosition (polygon.GetVertexIndex (i));\n\t\t\t\tAddProjectedCoord (projectedPolygon, coord);\n\t\t\t}\n\t\t\treturn projectedPolygon;\n\t\t}\n\n\t\tfunction GetProjectedPolygonFromPolygon (polygon)\n\t\t{\n\t\t\tvar projectedPolygon = new JSM.Polygon2D ();\n\t\t\tvar i, coord;\n\t\t\tfor (i = 0; i < polygon.VertexCount (); i++) {\n\t\t\t\tcoord = polygon.GetVertex (i);\n\t\t\t\tAddProjectedCoord (projectedPolygon, coord);\n\t\t\t}\n\t\t\treturn projectedPolygon;\n\t\t}\n\n\t\tif (needClear) {\n\t\t\tdrawer.Clear ();\n\t\t}\n\n\t\tvar width = drawer.GetWidth ();\n\t\tvar height = drawer.GetHeight ();\n\t\t\n\t\tvar eye = camera.eye;\n\t\tvar center = camera.center;\n\t\tvar up = camera.up;\n\t\tvar fieldOfView = camera.fieldOfView;\n\t\tvar aspectRatio = width / height;\n\t\tvar nearPlane = camera.nearClippingPlane;\n\t\tvar farPlane = camera.farClippingPlane;\n\t\tvar viewPort = [0, 0, width, height];\n\n\t\tvar i, j, polygon, coord, projected, materialIndex, color;\n\t\tif (drawMode == 'HiddenLinePainter') {\n\t\t\tvar orderedPolygons = JSM.OrderPolygons (body, eye, center);\n\t\t\tif (materials === undefined || materials === null) {\n\t\t\t\tmaterials = new JSM.MaterialSet ();\n\t\t\t}\n\t\t\tfor (i = 0; i < orderedPolygons.length; i++) {\n\t\t\t\tpolygon = body.GetPolygon (orderedPolygons[i]);\n\t\t\t\tprojected = GetProjectedPolygonFromBody (polygon);\n\t\t\t\tmaterialIndex = polygon.GetMaterialIndex ();\n\t\t\t\tcolor = materials.GetMaterial (materialIndex).diffuse;\n\t\t\t\tdrawer.DrawPolygon (projected, color, true);\n\t\t\t}\n\t\t} else if (drawMode == 'HiddenLineBSPTree') {\n\t\t\tif (materials === undefined || materials === null) {\n\t\t\t\tmaterials = new JSM.MaterialSet ();\n\t\t\t}\n\n\t\t\tvar bspTree = new JSM.BSPTree ();\n\t\t\tJSM.AddBodyToBSPTree (body, bspTree);\n\n\t\t\tJSM.TraverseBSPTreeForEyePosition (bspTree, camera.eye, function (node) {\n\t\t\t\tprojected = GetProjectedPolygonFromPolygon (node.polygon);\n\t\t\t\tpolygon = body.GetPolygon (node.userData.originalPolygon);\n\t\t\t\tmaterialIndex = polygon.GetMaterialIndex ();\n\t\t\t\tcolor = materials.GetMaterial (materialIndex).diffuse;\n\t\t\t\tdrawer.DrawPolygon (projected, color, true);\n\t\t\t});\t\t\n\t\t} else if (drawMode == 'HiddenLineFrontFacing') {\n\t\t\tif (materials === undefined || materials === null) {\n\t\t\t\tmaterials = new JSM.MaterialSet ();\n\t\t\t}\n\t\t\t\n\t\t\tfor (i = 0; i < body.PolygonCount (); i++) {\n\t\t\t\tpolygon = body.GetPolygon (i);\n\t\t\t\tprojected = GetProjectedPolygonFromBody (polygon);\n\t\t\t\tif (projected.GetOrientation () == JSM.Orientation.CounterClockwise) {\n\t\t\t\t\tmaterialIndex = polygon.GetMaterialIndex ();\n\t\t\t\t\tcolor = materials.GetMaterial (materialIndex).diffuse;\n\t\t\t\t\tdrawer.DrawPolygon (projected, color, true);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (drawMode == 'Wireframe') {\n\t\t\tvar vertexCount, currentCoord, currentVertex, vertex;\n\t\t\tvar drawedLines = [];\n\t\t\tfor (i = 0; i < body.PolygonCount (); i++) {\n\t\t\t\tcurrentCoord = null;\n\t\t\t\tcurrentVertex = null;\n\t\t\t\tpolygon = body.GetPolygon (i);\n\t\t\t\tvertexCount = polygon.VertexIndexCount ();\n\t\t\t\tfor (j = 0; j <= vertexCount; j++) {\n\t\t\t\t\tvertex = polygon.GetVertexIndex (j % vertexCount);\n\t\t\t\t\tcoord = body.GetVertexPosition (vertex);\n\t\t\t\t\tprojected = JSM.Project (coord, eye, center, up, fieldOfView * JSM.DegRad, aspectRatio, nearPlane, farPlane, viewPort);\n\t\t\t\t\tif (currentCoord !== null && currentVertex !== null && drawedLines[[currentVertex, vertex]] === undefined) {\n\t\t\t\t\t\tdrawer.DrawLine (currentCoord, projected);\n\t\t\t\t\t\tdrawedLines[[currentVertex, vertex]] = true;\n\t\t\t\t\t\tdrawedLines[[vertex, currentVertex]] = true;\n\t\t\t\t\t}\n\t\t\t\t\tcurrentVertex = vertex;\n\t\t\t\t\tcurrentCoord = projected;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t};\n\n\treturn JSM;\n});\n"]}