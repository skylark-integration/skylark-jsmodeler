{"version":3,"sources":["viewer/painter.js"],"names":["define","JSM","OrderPolygons","body","eye","center","SwapArrayValues","array","from","to","temp","GetPolygonCenter","p","i","coord","polygon","GetPolygon","result","Coord","VertexIndexCount","GetVertexPosition","GetVertexIndex","CoordAdd","MultiplyScalar","NeedToChangeOrder","s","needToChangeOrderCache","IsLowerOrEqual","minViewDistances","maxViewDistances","PolygonViewOverlap","sPlane","polygonPlanes","pPlane","isSBehindP","sPolygon","CoordPosition","CoordPlanePosition","CoordInFrontOfPlane","isPFrontOfS","pPolygon","CoordAtBackOfPlane","PolygonIsFrontOfPlane","j","polygonCenters","polygonCenterDistances","ordered","count","PolygonCount","push","distance","minDistance","maxDistance","polygonCenter","polygonCenterDistance","polygonNormal","polygonViewVector","polygonDirection","polygonPlane","viewDirection","CoordSub","Normalize","cameraPlane","GetPlaneFromCoordAndDirection","Inf","CoordDistance","IsLower","IsGreater","CalculateBodyPolygonNormal","VectorDot","IsGreaterOrEqual","CalculatePolygonValues","length","IsEqual","OrderPolygonsByMaxViewDistance","ReorderPolygons"],"mappings":"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","file":"../../viewer/painter.js","sourcesContent":["define([\"../core/jsm\"],function(JSM){\n\t/**\n\t* Function: OrderPolygons\n\t* Description: Order body polygons from front to back depending on the eye position.\n\t* Parameters:\n\t*\tbody {Body} the body\n\t*\teye {Coord} the camera eye position\n\t*\tcenter {Coord} the camera center position\n\t* Returns:\n\t*\t{integer[]} the ordered polygon indices\n\t*/\n\tJSM.OrderPolygons = function (body, eye, center)\n\t{\n\t\tfunction SwapArrayValues (array, from, to)\n\t\t{\n\t\t\tvar temp = array[from];\n\t\t\tarray[from] = array[to];\n\t\t\tarray[to] = temp;\n\t\t}\n\n\t\tfunction GetPolygonCenter (p)\n\t\t{\n\t\t\tvar polygon = body.GetPolygon (p);\n\t\t\tvar result = new JSM.Coord (0.0, 0.0, 0.0);\n\n\t\t\tvar i, coord;\n\t\t\tfor (i = 0; i < polygon.VertexIndexCount (); i++) {\n\t\t\t\tcoord = body.GetVertexPosition (polygon.GetVertexIndex (i));\n\t\t\t\tresult = JSM.CoordAdd (result, coord);\n\t\t\t}\n\t\t\t\n\t\t\tresult.MultiplyScalar (1.0 / polygon.VertexIndexCount ());\n\t\t\treturn result;\n\t\t}\n\t\t\n\t\tfunction CalculatePolygonValues ()\n\t\t{\n\t\t\tvar viewDirection = JSM.CoordSub (center, eye).Normalize ();\n\t\t\tvar cameraPlane = JSM.GetPlaneFromCoordAndDirection (eye, viewDirection);\n\t\t\t\n\t\t\tvar i, j, polygon, coord, distance, minDistance, maxDistance;\n\t\t\tvar polygonCenter, polygonCenterDistance;\n\t\t\tvar polygonNormal, polygonViewVector, polygonDirection, polygonPlane;\n\t\t\tfor (i = 0; i < body.PolygonCount (); i++) {\n\t\t\t\tminDistance = JSM.Inf;\n\t\t\t\tmaxDistance = -JSM.Inf;\n\t\t\t\tpolygon = body.GetPolygon (i);\n\t\t\t\tfor (j = 0; j < polygon.VertexIndexCount (); j++) {\n\t\t\t\t\tcoord = body.GetVertexPosition (polygon.GetVertexIndex (j));\n\t\t\t\t\tdistance = cameraPlane.CoordDistance (coord);\n\t\t\t\t\tif (JSM.IsLower (distance, minDistance)) {\n\t\t\t\t\t\tminDistance = distance;\n\t\t\t\t\t}\n\t\t\t\t\tif (JSM.IsGreater (distance, maxDistance)) {\n\t\t\t\t\t\tmaxDistance = distance;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tminViewDistances.push (minDistance);\n\t\t\t\tmaxViewDistances.push (maxDistance);\n\t\t\t\t\n\t\t\t\tpolygonCenter = GetPolygonCenter (i);\n\t\t\t\tpolygonCenterDistance = cameraPlane.CoordDistance (polygonCenter);\n\t\t\t\tpolygonCenters.push (polygonCenter);\n\t\t\t\tpolygonCenterDistances.push (polygonCenterDistance);\n\n\t\t\t\tpolygonNormal = JSM.CalculateBodyPolygonNormal (body, i);\n\t\t\t\tpolygonViewVector = JSM.CoordSub (polygonCenter, eye).Normalize ();\n\t\t\t\tpolygonDirection = JSM.VectorDot (polygonNormal, polygonViewVector);\n\t\t\t\tif (JSM.IsGreaterOrEqual (polygonDirection, 0.0)) {\n\t\t\t\t\tpolygonNormal.MultiplyScalar (-1);\n\t\t\t\t}\n\n\t\t\t\tpolygonPlane = JSM.GetPlaneFromCoordAndDirection (polygonCenter, polygonNormal);\n\t\t\t\tpolygonPlanes.push (polygonPlane);\n\t\t\t}\n\t\t}\n\t\t\n\t\tfunction PolygonViewOverlap (s, p)\n\t\t{\n\t\t\treturn JSM.IsLowerOrEqual (minViewDistances[s], maxViewDistances[p]);\n\t\t}\n\n\t\tfunction PolygonIsFrontOfPlane (s, p)\n\t\t{\n\t\t\tvar sPlane = polygonPlanes[s];\n\t\t\tvar pPlane = polygonPlanes[p];\n\n\t\t\tvar i, coord;\n\n\t\t\tvar isSBehindP = true;\n\t\t\tvar sPolygon = body.GetPolygon (s);\n\t\t\tfor (i = 0; i < sPolygon.VertexIndexCount (); i++) {\n\t\t\t\tcoord = body.GetVertexPosition (sPolygon.GetVertexIndex (i));\n\t\t\t\tif (pPlane.CoordPosition (coord) === JSM.CoordPlanePosition.CoordInFrontOfPlane) {\n\t\t\t\t\tisSBehindP = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (isSBehindP) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tvar isPFrontOfS = true;\n\t\t\tvar pPolygon = body.GetPolygon (p);\n\t\t\tfor (i = 0; i < pPolygon.VertexIndexCount (); i++) {\n\t\t\t\tcoord = body.GetVertexPosition (pPolygon.GetVertexIndex (i));\n\t\t\t\tif (sPlane.CoordPosition (coord) === JSM.CoordPlanePosition.CoordAtBackOfPlane) {\n\t\t\t\t\tisPFrontOfS = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (isPFrontOfS) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\treturn true;\n\t\t}\n\n\t\tfunction HasLowerDistance (s, p)\n\t\t{\n\t\t\tif (JSM.IsLower (maxViewDistances[s], maxViewDistances[p])) {\n\t\t\t\treturn true;\n\t\t\t} else if (JSM.IsEqual (maxViewDistances[s], maxViewDistances[p])) {\n\t\t\t\tif (JSM.IsLower (polygonCenterDistances[s], polygonCenterDistances[p])) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tfunction OrderPolygonsByMaxViewDistance ()\n\t\t{\n\t\t\tvar count = ordered.length;\n\t\t\t\n\t\t\tvar i, j;\n\t\t\tfor (i = 0; i < count - 1; i++) {\n\t\t\t\tfor (j = 0; j < count - i - 1; j++) {\n\t\t\t\t\tif (HasLowerDistance (ordered[j], ordered[j + 1])) {\n\t\t\t\t\t\tSwapArrayValues (ordered, j, j + 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction NeedToChangeOrder (s, p)\n\t\t{\n\t\t\tif (needToChangeOrderCache[s][p] !== null) {\n\t\t\t\treturn needToChangeOrderCache[s][p];\n\t\t\t}\n\n\t\t\tif (PolygonViewOverlap (s, p)) {\n\t\t\t\tif (PolygonIsFrontOfPlane (s, p)) {\n\t\t\t\t\tneedToChangeOrderCache[s][p] = true;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tneedToChangeOrderCache[s][p] = false;\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tfunction ReorderPolygons ()\n\t\t{\n\t\t\tvar count = ordered.length;\n\n\t\t\tvar i, j;\n\t\t\tfor (i = 0; i < count - 1; i++) {\n\t\t\t\tfor (j = 0; j < count - i - 1; j++) {\n\t\t\t\t\tif (NeedToChangeOrder (ordered[j], ordered[j + 1])) {\n\t\t\t\t\t\tSwapArrayValues (ordered, j, j + 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar result = [];\n\t\t\n\t\tvar minViewDistances = [];\n\t\tvar maxViewDistances = [];\n\t\tvar polygonCenters = [];\n\t\tvar polygonCenterDistances = [];\n\t\tvar polygonPlanes = [];\n\t\t\n\t\tvar ordered = [];\n\t\tvar needToChangeOrderCache = [];\n\t\tvar count = body.PolygonCount ();\n\t\t\n\t\tvar i, j;\n\t\tfor (i = 0; i < count; i++) {\n\t\t\tordered.push (i);\n\t\t\tneedToChangeOrderCache.push ([]);\n\t\t\tfor (j = 0; j < count; j++) {\n\t\t\t\tneedToChangeOrderCache[i].push (null);\n\t\t\t}\n\t\t}\n\n\t\tCalculatePolygonValues ();\n\t\tOrderPolygonsByMaxViewDistance ();\n\t\tReorderPolygons ();\n\t\t\n\t\tresult = ordered;\n\t\treturn result;\n\t};\n\n\treturn JSM;\n});\n"]}