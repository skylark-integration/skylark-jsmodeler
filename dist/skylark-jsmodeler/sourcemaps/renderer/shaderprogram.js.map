{"version":3,"sources":["renderer/shaderprogram.js"],"names":["define","JSM","ShaderType","Point","Line","Triangle","TexturedTriangle","ShaderProgram","context","this","globalParams","shaders","currentShader","currentType","cullEnabled","prototype","Init","InitGlobalParams","InitShaders","GetMaxLightCount","maxLightCount","noDirectionalLight","RenderDirectionalLight","Vector","InitShader","shaderType","vertexShaderScript","script","join","GetVertexShaderScript","fragmentShaderScript","GetFragmentShaderScript","shader","WebGLInitShaderProgram","message","Message","useProgram","i","vertexPositionAttribute","getAttribLocation","vertexNormalAttribute","ambientLightColorUniform","getUniformLocation","lightUniforms","push","diffuseColor","specularColor","direction","materialUniforms","ambientColor","shininess","opacity","vMatrixUniform","pMatrixUniform","tMatrixUniform","vertexUVAttribute","samplerUniform","pointSizeUniform","InitShaderParameters","enable","DEPTH_TEST","depthFunc","LEQUAL","BLEND","blendEquation","FUNC_ADD","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","disable","CULL_FACE","CompileMaterial","material","textureLoaded","texture","textureBuffer","createTexture","textureImage","Image","src","onload","resizedImage","ResizeImageToPowerOfTwoSides","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_LINEAR","texImage2D","RGBA","UNSIGNED_BYTE","generateMipmap","undefined","SetBuffers","CompileMesh","mesh","vertexBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","GetVertexArray","STATIC_DRAW","itemSize","numItems","VertexCount","normalBuffer","HasNormalArray","GetNormalArray","NormalCount","uvBuffer","HasUVArray","GetUVArray","UVCount","GetShader","UseShader","SetParameters","ambientLight","directionalLights","viewMatrix","projectionMatrix","GetLight","index","length","light","lightDirection","uniform3f","color","ApplyRotation","diffuse","specular","x","y","z","uniformMatrix4fv","SetCullEnabled","DrawArrays","matrix","singleSided","ambient","uniform1f","enableVertexAttribArray","vertexAttribPointer","FLOAT","activeTexture","TEXTURE0","uniform1i","drawArrays","TRIANGLES","pointSize","POINTS","LINES"],"mappings":";;;;;;;AAAAA,QAAQ,eAAe,SAASC,GAge/B,OA/dAA,EAAIC,YACHC,MAAQ,EACRC,KAAO,EACPC,SAAW,EACXC,iBAAmB,GAGpBL,EAAIM,cAAgB,SAAUC,GAE7BC,KAAKD,QAAUA,EACfC,KAAKC,aAAe,KACpBD,KAAKE,QAAU,KACfF,KAAKG,cAAgB,KACrBH,KAAKI,YAAc,KACnBJ,KAAKK,YAAc,MAGpBb,EAAIM,cAAcQ,UAAUC,KAAO,WAElC,QAAKP,KAAKQ,sBAILR,KAAKS,eAOXjB,EAAIM,cAAcQ,UAAUI,iBAAmB,WAE9C,OAAOV,KAAKC,aAAaU,eAG1BnB,EAAIM,cAAcQ,UAAUE,iBAAmB,WAE9C,IAAII,EAAqB,IAAIpB,EAAIqB,uBAAwB,EAAU,EAAU,IAAIrB,EAAIsB,OAAQ,EAAK,EAAK,IAKvG,OAJAd,KAAKC,cACJW,mBAAqBA,EACrBD,cAAgB,IAEV,GAGRnB,EAAIM,cAAcQ,UAAUG,YAAc,WA0NzC,SAASM,EAAYhB,EAASG,EAASD,EAAce,GAEpD,IAAIC,EAxHL,SAAgCD,GAE/B,IAAIE,EAAS,KAsDb,OArDIF,GAAcxB,EAAIC,WAAWG,UAAYoB,GAAcxB,EAAIC,WAAWI,iBACzEqB,GACC,YAAcF,GAAcxB,EAAIC,WAAWG,SAAW,YAAc,cACpE,0CACA,wCAEA,oCACA,0CACA,8CAEA,gCACA,gCAEA,oBACA,oCACA,4BACA,SAEA,qBACA,gEACA,oEACA,8EACA,oBACA,qBACA,SACA,2DACA,KACCuB,KAAM,MACEH,GAAcxB,EAAIC,WAAWC,OAASsB,GAAcxB,EAAIC,WAAWE,OAC7EuB,GACC,YAAcF,GAAcxB,EAAIC,WAAWC,MAAQ,QAAU,QAC7D,0CAEA,oCACA,0CACA,8CACA,eACA,oCACA,SAEA,gCAEA,qBACA,gEACA,oEACA,eACA,uCACA,4DACA,SACA,2DACA,KACCyB,KAAM,OAEFD,EAgEkBE,CAAuBJ,GAC5CK,EA3NL,SAAkCL,EAAYf,GAE7C,IAAIiB,EAAS,KA6Fb,OA5FIF,GAAcxB,EAAIC,WAAWC,OAASsB,GAAcxB,EAAIC,WAAWE,KACtEuB,GACC,sBAAwBjB,EAAaU,cAErC,eACA,IACA,+BACA,KAEA,kBACA,IACA,+BACA,+BACA,KAEA,2CACA,qCACA,8BAEA,qBACA,iFACA,0DACA,2CACA,4EACA,MACA,oEACA,KACCQ,KAAM,MACEH,GAAcxB,EAAIC,WAAWG,UAAYoB,GAAcxB,EAAIC,WAAWI,mBAChFqB,GACC,YAAcF,GAAcxB,EAAIC,WAAWG,SAAW,YAAc,cACpE,sBAAwBK,EAAaU,cAErC,eACA,IACA,+BACA,gCACA,4BACA,KAEA,kBACA,IACA,+BACA,+BACA,gCACA,6BACA,2BACA,KAEA,2CACA,qCACA,8BAEA,gCACA,gCAEA,oBACA,4BACA,8BACA,SAEA,qBACA,0CACA,2BACA,cACA,MACA,iFACA,0DACA,2DACA,2CAEA,2CACA,0DACA,oDACA,oGACA,kIACA,MAEA,oBACA,+EACA,wDACA,wDACA,0DACA,SAEA,2DACA,2DACA,6DACA,sGACA,KACCQ,KAAM,OAEFD,EA4HoBI,CAAyBN,EAAYf,GAChE,GAA2B,OAAvBgB,GAAwD,OAAzBI,EAClC,OAAO,EAER,IAAIE,EAAS/B,EAAIgC,uBAAwBzB,EAASkB,EAAoBI,EAAsB,SAAUI,GACrGjC,EAAIkC,QAASD,KAEd,OAAe,OAAXF,IAIJxB,EAAQ4B,WAAYJ,GAzErB,SAA+BxB,EAASwB,EAAQtB,EAAce,GAE7D,GAAIA,GAAcxB,EAAIC,WAAWG,UAAYoB,GAAcxB,EAAIC,WAAWI,iBAAkB,CAM3F,IAAI+B,EACJ,IANAL,EAAOM,wBAA0B9B,EAAQ+B,kBAAmBP,EAAQ,mBACpEA,EAAOQ,sBAAwBhC,EAAQ+B,kBAAmBP,EAAQ,iBAElEA,EAAOS,yBAA2BjC,EAAQkC,mBAAoBV,EAAQ,sBACtEA,EAAOW,iBAEFN,EAAI,EAAGA,EAAI3B,EAAaU,cAAeiB,IAC3CL,EAAOW,cAAcC,MACpBC,aAAerC,EAAQkC,mBAAoBV,EAAQ,WAAaK,EAAI,kBACpES,cAAgBtC,EAAQkC,mBAAoBV,EAAQ,WAAaK,EAAI,mBACrEU,UAAYvC,EAAQkC,mBAAoBV,EAAQ,WAAaK,EAAI,iBAInEL,EAAOgB,kBACNC,aAAezC,EAAQkC,mBAAoBV,EAAQ,0BACnDa,aAAerC,EAAQkC,mBAAoBV,EAAQ,0BACnDc,cAAgBtC,EAAQkC,mBAAoBV,EAAQ,2BACpDkB,UAAY1C,EAAQkC,mBAAoBV,EAAQ,uBAChDmB,QAAU3C,EAAQkC,mBAAoBV,EAAQ,sBAG/CA,EAAOoB,eAAiB5C,EAAQkC,mBAAoBV,EAAQ,eAC5DA,EAAOqB,eAAiB7C,EAAQkC,mBAAoBV,EAAQ,qBAC5DA,EAAOsB,eAAiB9C,EAAQkC,mBAAoBV,EAAQ,yBAExDP,GAAcxB,EAAIC,WAAWI,mBAChC0B,EAAOuB,kBAAoB/C,EAAQ+B,kBAAmBP,EAAQ,aAC9DA,EAAOwB,eAAiBhD,EAAQkC,mBAAoBV,EAAQ,kBAEvD,GAAIP,GAAcxB,EAAIC,WAAWC,OAASsB,GAAcxB,EAAIC,WAAWE,KAAM,CAKnF,IAJA4B,EAAOM,wBAA0B9B,EAAQ+B,kBAAmBP,EAAQ,mBAEpEA,EAAOS,yBAA2BjC,EAAQkC,mBAAoBV,EAAQ,sBACtEA,EAAOW,iBACFN,EAAI,EAAGA,EAAI3B,EAAaU,cAAeiB,IAC3CL,EAAOW,cAAcC,MACpBC,aAAerC,EAAQkC,mBAAoBV,EAAQ,WAAaK,EAAI,oBAItEL,EAAOgB,kBACNC,aAAezC,EAAQkC,mBAAoBV,EAAQ,0BACnDa,aAAerC,EAAQkC,mBAAoBV,EAAQ,2BAGpDA,EAAOoB,eAAiB5C,EAAQkC,mBAAoBV,EAAQ,eAC5DA,EAAOqB,eAAiB7C,EAAQkC,mBAAoBV,EAAQ,qBAC5DA,EAAOsB,eAAiB9C,EAAQkC,mBAAoBV,EAAQ,yBAExDP,GAAcxB,EAAIC,WAAWC,QAChC6B,EAAOyB,iBAAmBjD,EAAQkC,mBAAoBV,EAAQ,gBAoBhE0B,CAAsBlD,EAASwB,EAAQtB,EAAce,GACrDd,EAAQc,GAAcO,GACf,GAKR,OAFAvB,KAAKE,aAEAa,EAAYf,KAAKD,QAASC,KAAKE,QAASF,KAAKC,aAAcT,EAAIC,WAAWC,WAI1EqB,EAAYf,KAAKD,QAASC,KAAKE,QAASF,KAAKC,aAAcT,EAAIC,WAAWE,UAI1EoB,EAAYf,KAAKD,QAASC,KAAKE,QAASF,KAAKC,aAAcT,EAAIC,WAAWG,cAI1EmB,EAAYf,KAAKD,QAASC,KAAKE,QAASF,KAAKC,aAAcT,EAAIC,WAAWI,oBAI/EG,KAAKD,QAAQmD,OAAQlD,KAAKD,QAAQoD,YAClCnD,KAAKD,QAAQqD,UAAWpD,KAAKD,QAAQsD,QAErCrD,KAAKD,QAAQmD,OAAQlD,KAAKD,QAAQuD,OAClCtD,KAAKD,QAAQwD,cAAevD,KAAKD,QAAQyD,UACzCxD,KAAKD,QAAQ0D,UAAWzD,KAAKD,QAAQ2D,UAAW1D,KAAKD,QAAQ4D,qBAE7D3D,KAAKD,QAAQ6D,QAAS5D,KAAKD,QAAQ8D,WACnC7D,KAAKK,aAAc,GAEZ,OAGRb,EAAIM,cAAcQ,UAAUwD,gBAAkB,SAAUC,EAAUC,GAEjE,GAAyB,OAArBD,EAASE,QAAkB,CAC9B,IAAIlE,EAAUC,KAAKD,QACfmE,EAAgBnE,EAAQoE,gBACxBC,EAAe,IAAIC,MACvBD,EAAaE,IAAMP,EAASE,QAC5BG,EAAaG,OAAS,WACrB,IAAIC,EAAehF,EAAIiF,6BAA8BL,GACrDrE,EAAQ2E,YAAa3E,EAAQ4E,WAAYT,GACzCnE,EAAQ6E,cAAe7E,EAAQ4E,WAAY5E,EAAQ8E,mBAAoB9E,EAAQ+E,QAC/E/E,EAAQ6E,cAAe7E,EAAQ4E,WAAY5E,EAAQgF,mBAAoBhF,EAAQiF,sBAC/EjF,EAAQkF,WAAYlF,EAAQ4E,WAAY,EAAG5E,EAAQmF,KAAMnF,EAAQmF,KAAMnF,EAAQoF,cAAeX,GAC9FzE,EAAQqF,eAAgBrF,EAAQ4E,YAChC5E,EAAQ2E,YAAa3E,EAAQ4E,WAAY,WACnBU,IAAlBrB,GAAiD,OAAlBA,GAClCA,KAGFD,EAASuB,WAAYpB,EAAeE,KAItC5E,EAAIM,cAAcQ,UAAUiF,YAAc,SAAUC,GAEnD,IAAIzF,EAAUC,KAAKD,QACf0F,EAAe1F,EAAQ2F,eAC3B3F,EAAQ4F,WAAY5F,EAAQ6F,aAAcH,GAC1C1F,EAAQ8F,WAAY9F,EAAQ6F,aAAcJ,EAAKM,iBAAmB/F,EAAQgG,aAC1EN,EAAaO,SAAW,EACxBP,EAAaQ,SAAWT,EAAKU,cAE7B,IAAIC,EAAe,KACfX,EAAKY,mBACRD,EAAepG,EAAQ2F,eACvB3F,EAAQ4F,WAAY5F,EAAQ6F,aAAcO,GAC1CpG,EAAQ8F,WAAY9F,EAAQ6F,aAAcJ,EAAKa,iBAAmBtG,EAAQgG,aAC1EI,EAAaH,SAAW,EACxBG,EAAaF,SAAWT,EAAKc,eAG9B,IAAIC,EAAW,KACXf,EAAKgB,eACRD,EAAWxG,EAAQ2F,eACnB3F,EAAQ4F,WAAY5F,EAAQ6F,aAAcW,GAC1CxG,EAAQ8F,WAAY9F,EAAQ6F,aAAcJ,EAAKiB,aAAe1G,EAAQgG,aACtEQ,EAASP,SAAW,EACpBO,EAASN,SAAWT,EAAKkB,WAG1BlB,EAAKF,WAAYG,EAAcU,EAAcI,IAG9C/G,EAAIM,cAAcQ,UAAUqG,UAAY,SAAU3F,GAEjD,OAAOhB,KAAKE,QAAQc,IAGrBxB,EAAIM,cAAcQ,UAAUsG,UAAY,SAAU5F,GAEjDhB,KAAKG,cAAgBH,KAAK2G,UAAW3F,GACrChB,KAAKI,YAAcY,EACnBhB,KAAKD,QAAQ4B,WAAY3B,KAAKG,gBAG/BX,EAAIM,cAAcQ,UAAUuG,cAAgB,SAAUC,EAAcC,EAAmBC,EAAYC,GAElG,SAASC,EAAUH,EAAmBI,EAAOvG,GAE5C,OAAIuG,EAAQJ,EAAkBK,OACtBL,EAAkBI,GAGnBvG,EAGR,IAGIgB,EAAGyF,EAAOC,EAHVvH,EAAUC,KAAKD,QACfwB,EAASvB,KAAKG,cAGlB,GAAIH,KAAKI,aAAeZ,EAAIC,WAAWG,UAAYI,KAAKI,aAAeZ,EAAIC,WAAWI,iBAAkB,CAEvG,IADAE,EAAQwH,UAAWhG,EAAOS,yBAA0B8E,EAAaU,MAAM,GAAIV,EAAaU,MAAM,GAAIV,EAAaU,MAAM,IAChH5F,EAAI,EAAGA,EAAI5B,KAAKC,aAAaU,cAAeiB,IAChDyF,EAAQH,EAAUH,EAAmBnF,EAAG5B,KAAKC,aAAaW,oBAC1D0G,EAAiB9H,EAAIiI,cAAeT,EAAYK,EAAM/E,WACtDvC,EAAQwH,UAAWhG,EAAOW,cAAcN,GAAGQ,aAAciF,EAAMK,QAAQ,GAAIL,EAAMK,QAAQ,GAAIL,EAAMK,QAAQ,IAC3G3H,EAAQwH,UAAWhG,EAAOW,cAAcN,GAAGS,cAAegF,EAAMM,SAAS,GAAIN,EAAMM,SAAS,GAAIN,EAAMM,SAAS,IAC/G5H,EAAQwH,UAAWhG,EAAOW,cAAcN,GAAGU,UAAWgF,EAAeM,EAAGN,EAAeO,EAAGP,EAAeQ,GAE1G/H,EAAQgI,iBAAkBxG,EAAOqB,gBAAgB,EAAOqE,GACxDlH,EAAQgI,iBAAkBxG,EAAOoB,gBAAgB,EAAOqE,QAClD,GAAIhH,KAAKI,aAAeZ,EAAIC,WAAWC,OAASM,KAAKI,aAAeZ,EAAIC,WAAWE,KAAM,CAE/F,IADAI,EAAQwH,UAAWhG,EAAOS,yBAA0B8E,EAAaU,MAAM,GAAIV,EAAaU,MAAM,GAAIV,EAAaU,MAAM,IAChH5F,EAAI,EAAGA,EAAI5B,KAAKC,aAAaU,cAAeiB,IAChDyF,EAAQH,EAAUH,EAAmBnF,EAAG5B,KAAKC,aAAaW,oBAC1Db,EAAQwH,UAAWhG,EAAOW,cAAcN,GAAGQ,aAAciF,EAAMK,QAAQ,GAAIL,EAAMK,QAAQ,GAAIL,EAAMK,QAAQ,IAE5G3H,EAAQgI,iBAAkBxG,EAAOqB,gBAAgB,EAAOqE,GACxDlH,EAAQgI,iBAAkBxG,EAAOoB,gBAAgB,EAAOqE,KAI1DxH,EAAIM,cAAcQ,UAAU0H,eAAiB,SAAU9E,GAElDA,IAAWlD,KAAKK,aACnBL,KAAKD,QAAQmD,OAAQlD,KAAKD,QAAQ8D,WAClC7D,KAAKK,aAAc,IACR6C,GAAUlD,KAAKK,cAC1BL,KAAKD,QAAQ6D,QAAS5D,KAAKD,QAAQ8D,WACnC7D,KAAKK,aAAc,IAIrBb,EAAIM,cAAcQ,UAAU2H,WAAa,SAAUlE,EAAUmE,EAAQzC,EAAcU,EAAcI,GAEhG,IAAIxG,EAAUC,KAAKD,QACfwB,EAASvB,KAAKG,cAClBH,KAAKgI,eAAgBjE,EAASoE,aAE1BnI,KAAKI,aAAeZ,EAAIC,WAAWG,UAAYI,KAAKI,aAAeZ,EAAIC,WAAWI,kBACrFE,EAAQwH,UAAWhG,EAAOgB,iBAAiBC,aAAcuB,EAASqE,QAAQ,GAAIrE,EAASqE,QAAQ,GAAIrE,EAASqE,QAAQ,IACpHrI,EAAQwH,UAAWhG,EAAOgB,iBAAiBH,aAAc2B,EAAS2D,QAAQ,GAAI3D,EAAS2D,QAAQ,GAAI3D,EAAS2D,QAAQ,IACpH3H,EAAQwH,UAAWhG,EAAOgB,iBAAiBF,cAAe0B,EAAS4D,SAAS,GAAI5D,EAAS4D,SAAS,GAAI5D,EAAS4D,SAAS,IACxH5H,EAAQsI,UAAW9G,EAAOgB,iBAAiBE,UAAWsB,EAAStB,WAC/D1C,EAAQsI,UAAW9G,EAAOgB,iBAAiBG,QAASqB,EAASrB,SAE7D3C,EAAQgI,iBAAkBxG,EAAOsB,gBAAgB,EAAOqF,GAExDnI,EAAQ4F,WAAY5F,EAAQ6F,aAAcH,GAC1C1F,EAAQuI,wBAAyB/G,EAAOM,yBACxC9B,EAAQwI,oBAAqBhH,EAAOM,wBAAyB4D,EAAaO,SAAUjG,EAAQyI,OAAO,EAAO,EAAG,GAE7GzI,EAAQ4F,WAAY5F,EAAQ6F,aAAcO,GAC1CpG,EAAQuI,wBAAyB/G,EAAOQ,uBACxChC,EAAQwI,oBAAqBhH,EAAOQ,sBAAuBoE,EAAaH,SAAUjG,EAAQyI,OAAO,EAAO,EAAG,GAEvGxI,KAAKI,aAAeZ,EAAIC,WAAWI,mBACtCE,EAAQ0I,cAAe1I,EAAQ2I,UAC/B3I,EAAQ2E,YAAa3E,EAAQ4E,WAAYZ,EAASG,eAClDnE,EAAQ4F,WAAY5F,EAAQ6F,aAAcW,GAC1CxG,EAAQuI,wBAAyB/G,EAAOuB,mBACxC/C,EAAQwI,oBAAqBhH,EAAOuB,kBAAmByD,EAASP,SAAUjG,EAAQyI,OAAO,EAAO,EAAG,GACnGzI,EAAQ4I,UAAWpH,EAAOwB,eAAgB,IAG3ChD,EAAQ6I,WAAY7I,EAAQ8I,UAAW,EAAGpD,EAAaQ,WAC7CjG,KAAKI,aAAeZ,EAAIC,WAAWC,OAASM,KAAKI,aAAeZ,EAAIC,WAAWE,OACzFI,EAAQwH,UAAWhG,EAAOgB,iBAAiBC,aAAcuB,EAASqE,QAAQ,GAAIrE,EAASqE,QAAQ,GAAIrE,EAASqE,QAAQ,IACpHrI,EAAQwH,UAAWhG,EAAOgB,iBAAiBH,aAAc2B,EAAS2D,QAAQ,GAAI3D,EAAS2D,QAAQ,GAAI3D,EAAS2D,QAAQ,IAEpH3H,EAAQgI,iBAAkBxG,EAAOsB,gBAAgB,EAAOqF,GAExDnI,EAAQ4F,WAAY5F,EAAQ6F,aAAcH,GAC1C1F,EAAQuI,wBAAyB/G,EAAOM,yBACxC9B,EAAQwI,oBAAqBhH,EAAOM,wBAAyB4D,EAAaO,SAAUjG,EAAQyI,OAAO,EAAO,EAAG,GAEzGxI,KAAKI,aAAeZ,EAAIC,WAAWC,OACtCK,EAAQsI,UAAW9G,EAAOyB,iBAAkBe,EAAS+E,WACrD/I,EAAQ6I,WAAY7I,EAAQgJ,OAAQ,EAAGtD,EAAaQ,WAC1CjG,KAAKI,aAAeZ,EAAIC,WAAWE,MAC7CI,EAAQ6I,WAAY7I,EAAQiJ,MAAO,EAAGvD,EAAaQ,YAK/CzG","file":"../../renderer/shaderprogram.js","sourcesContent":["define([\"../core/jsm\"],function(JSM){\n\tJSM.ShaderType = {\n\t\tPoint : 0,\n\t\tLine : 1,\n\t\tTriangle : 2,\n\t\tTexturedTriangle : 3\n\t};\n\n\tJSM.ShaderProgram = function (context)\n\t{\n\t\tthis.context = context;\n\t\tthis.globalParams = null;\n\t\tthis.shaders = null;\n\t\tthis.currentShader = null;\n\t\tthis.currentType = null;\n\t\tthis.cullEnabled = null;\n\t};\n\n\tJSM.ShaderProgram.prototype.Init = function ()\n\t{\n\t\tif (!this.InitGlobalParams ()) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif (!this.InitShaders ()) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\treturn true;\t\n\t};\n\n\tJSM.ShaderProgram.prototype.GetMaxLightCount = function ()\n\t{\n\t\treturn this.globalParams.maxLightCount;\n\t};\n\n\tJSM.ShaderProgram.prototype.InitGlobalParams = function ()\n\t{\n\t\tvar noDirectionalLight = new JSM.RenderDirectionalLight (0x000000, 0x000000, new JSM.Vector (0.0, 0.0, 0.0));\n\t\tthis.globalParams = {\n\t\t\tnoDirectionalLight : noDirectionalLight,\n\t\t\tmaxLightCount : 4\n\t\t};\n\t\treturn true;\n\t};\n\n\tJSM.ShaderProgram.prototype.InitShaders = function ()\n\t{\n\t\tfunction GetFragmentShaderScript (shaderType, globalParams)\n\t\t{\n\t\t\tvar script = null;\n\t\t\tif (shaderType == JSM.ShaderType.Point || shaderType == JSM.ShaderType.Line) {\n\t\t\t\tscript = [\n\t\t\t\t\t'#define MAX_LIGHTS ' + globalParams.maxLightCount,\n\n\t\t\t\t\t'struct Light',\n\t\t\t\t\t'{',\n\t\t\t\t\t'\tmediump vec3 diffuseColor;',\n\t\t\t\t\t'};',\n\n\t\t\t\t\t'struct Material',\n\t\t\t\t\t'{',\n\t\t\t\t\t'\tmediump vec3 ambientColor;',\n\t\t\t\t\t'\tmediump vec3 diffuseColor;',\n\t\t\t\t\t'};',\n\t\t\t\t\t\n\t\t\t\t\t'uniform mediump vec3 uAmbientLightColor;',\n\t\t\t\t\t'uniform Light uLights[MAX_LIGHTS];',\n\t\t\t\t\t'uniform Material uMaterial;',\n\t\t\t\t\t\n\t\t\t\t\t'void main (void) {',\n\t\t\t\t\t'\tmediump vec3 ambientComponent = uMaterial.ambientColor * uAmbientLightColor;',\n\t\t\t\t\t'\tmediump vec3 diffuseComponent = vec3 (0.0, 0.0, 0.0);',\n\t\t\t\t\t'\tfor (int i = 0; i < MAX_LIGHTS; i++) {',\n\t\t\t\t\t'\t\tdiffuseComponent += uMaterial.diffuseColor * uLights[i].diffuseColor;',\n\t\t\t\t\t'\t}',\n\t\t\t\t\t'\tgl_FragColor = vec4 (ambientComponent + diffuseComponent, 1.0);',\n\t\t\t\t\t'}'\n\t\t\t\t].join ('\\n');\n\t\t\t} else if (shaderType == JSM.ShaderType.Triangle || shaderType == JSM.ShaderType.TexturedTriangle) {\n\t\t\t\tscript = [\n\t\t\t\t\t'#define ' + (shaderType == JSM.ShaderType.Triangle ? 'NOTEXTURE' : 'USETEXTURE'),\n\t\t\t\t\t'#define MAX_LIGHTS ' + globalParams.maxLightCount,\n\t\t\t\t\t\n\t\t\t\t\t'struct Light',\n\t\t\t\t\t'{',\n\t\t\t\t\t'\tmediump vec3 diffuseColor;',\n\t\t\t\t\t'\tmediump vec3 specularColor;',\n\t\t\t\t\t'\tmediump vec3 direction;',\n\t\t\t\t\t'};',\n\n\t\t\t\t\t'struct Material',\n\t\t\t\t\t'{',\n\t\t\t\t\t'\tmediump vec3 ambientColor;',\n\t\t\t\t\t'\tmediump vec3 diffuseColor;',\n\t\t\t\t\t'\tmediump vec3 specularColor;',\n\t\t\t\t\t'\tmediump float shininess;',\n\t\t\t\t\t'\tmediump float opacity;',\n\t\t\t\t\t'};',\n\t\t\t\t\t\n\t\t\t\t\t'uniform mediump vec3 uAmbientLightColor;',\n\t\t\t\t\t'uniform Light uLights[MAX_LIGHTS];',\n\t\t\t\t\t'uniform Material uMaterial;',\n\n\t\t\t\t\t'varying mediump vec3 vVertex;',\n\t\t\t\t\t'varying mediump vec3 vNormal;',\n\t\t\t\t\t\n\t\t\t\t\t'#ifdef USETEXTURE',\n\t\t\t\t\t'varying mediump vec2 vUV;',\n\t\t\t\t\t'uniform sampler2D uSampler;',\n\t\t\t\t\t'#endif',\n\t\t\t\t\t\n\t\t\t\t\t'void main (void) {',\n\t\t\t\t\t'\tmediump vec3 N = normalize (vNormal);',\n\t\t\t\t\t'\tif (!gl_FrontFacing) {',\n\t\t\t\t\t'\t\tN = -N;',\n\t\t\t\t\t'\t}',\n\t\t\t\t\t'\tmediump vec3 ambientComponent = uMaterial.ambientColor * uAmbientLightColor;',\n\t\t\t\t\t'\tmediump vec3 diffuseComponent = vec3 (0.0, 0.0, 0.0);',\n\t\t\t\t\t'\tmediump vec3 specularComponent = vec3 (0.0, 0.0, 0.0);',\n\t\t\t\t\t'\tmediump vec3 E = normalize (-vVertex);',\n\n\t\t\t\t\t'\tfor (int i = 0; i < MAX_LIGHTS; i++) {',\n\t\t\t\t\t'\t\tmediump vec3 L = normalize (-uLights[i].direction);',\n\t\t\t\t\t'\t\tmediump vec3 R = normalize (-reflect (L, N));',\n\t\t\t\t\t'\t\tdiffuseComponent += uMaterial.diffuseColor * uLights[i].diffuseColor * max (dot (N, L), 0.0);',\n\t\t\t\t\t'\t\tspecularComponent += uMaterial.specularColor * uLights[i].specularColor * pow (max (dot (R, E), 0.0), uMaterial.shininess);',\n\t\t\t\t\t'\t}',\n\t\t\t\t\t\n\t\t\t\t\t'#ifdef USETEXTURE',\n\t\t\t\t\t'\tmediump vec3 textureColor = texture2D (uSampler, vec2 (vUV.s, vUV.t)).xyz;',\n\t\t\t\t\t'\tambientComponent = ambientComponent * textureColor;',\n\t\t\t\t\t'\tdiffuseComponent = diffuseComponent * textureColor;',\n\t\t\t\t\t'\tspecularComponent = specularComponent * textureColor;',\n\t\t\t\t\t'#endif',\n\t\t\t\t\t\n\t\t\t\t\t'\tambientComponent = clamp (ambientComponent, 0.0, 1.0);',\n\t\t\t\t\t'\tdiffuseComponent = clamp (diffuseComponent, 0.0, 1.0);',\n\t\t\t\t\t'\tspecularComponent = clamp (specularComponent, 0.0, 1.0);',\n\t\t\t\t\t'\tgl_FragColor = vec4 (ambientComponent + diffuseComponent + specularComponent, uMaterial.opacity);',\n\t\t\t\t\t'}'\n\t\t\t\t].join ('\\n');\n\t\t\t}\n\t\t\treturn script;\n\t\t}\n\t\t\n\t\tfunction GetVertexShaderScript (shaderType)\n\t\t{\n\t\t\tvar script = null;\n\t\t\tif (shaderType == JSM.ShaderType.Triangle || shaderType == JSM.ShaderType.TexturedTriangle) {\n\t\t\t\tscript = [\n\t\t\t\t\t'#define ' + (shaderType == JSM.ShaderType.Triangle ? 'NOTEXTURE' : 'USETEXTURE'),\n\t\t\t\t\t'attribute mediump vec3 aVertexPosition;',\n\t\t\t\t\t'attribute mediump vec3 aVertexNormal;',\n\n\t\t\t\t\t'uniform mediump mat4 uViewMatrix;',\n\t\t\t\t\t'uniform mediump mat4 uProjectionMatrix;',\n\t\t\t\t\t'uniform mediump mat4 uTransformationMatrix;',\n\n\t\t\t\t\t'varying mediump vec3 vVertex;',\n\t\t\t\t\t'varying mediump vec3 vNormal;',\n\n\t\t\t\t\t'#ifdef USETEXTURE',\n\t\t\t\t\t'attribute mediump vec2 aVertexUV;',\n\t\t\t\t\t'varying mediump vec2 vUV;',\n\t\t\t\t\t'#endif',\n\n\t\t\t\t\t'void main (void) {',\n\t\t\t\t\t'\tmat4 modelViewMatrix = uViewMatrix * uTransformationMatrix;',\n\t\t\t\t\t'\tvVertex = vec3 (modelViewMatrix * vec4 (aVertexPosition, 1.0));',\n\t\t\t\t\t'\tvNormal = normalize (vec3 (modelViewMatrix * vec4 (aVertexNormal, 0.0)));',\n\t\t\t\t\t'#ifdef USETEXTURE',\n\t\t\t\t\t'\tvUV = aVertexUV;',\n\t\t\t\t\t'#endif',\n\t\t\t\t\t'\tgl_Position = uProjectionMatrix * vec4 (vVertex, 1.0);',\n\t\t\t\t\t'}'\n\t\t\t\t].join ('\\n');\n\t\t\t} else if (shaderType == JSM.ShaderType.Point || shaderType == JSM.ShaderType.Line) {\n\t\t\t\tscript = [\n\t\t\t\t\t'#define ' + (shaderType == JSM.ShaderType.Point ? 'POINT' : 'LINE'),\n\t\t\t\t\t'attribute mediump vec3 aVertexPosition;',\n\t\t\t\t\t\n\t\t\t\t\t'uniform mediump mat4 uViewMatrix;',\n\t\t\t\t\t'uniform mediump mat4 uProjectionMatrix;',\n\t\t\t\t\t'uniform mediump mat4 uTransformationMatrix;',\n\t\t\t\t\t'#ifdef POINT',\n\t\t\t\t\t'uniform mediump float uPointSize;',\n\t\t\t\t\t'#endif',\n\n\t\t\t\t\t'varying mediump vec3 vVertex;',\n\n\t\t\t\t\t'void main (void) {',\n\t\t\t\t\t'\tmat4 modelViewMatrix = uViewMatrix * uTransformationMatrix;',\n\t\t\t\t\t'\tvVertex = vec3 (modelViewMatrix * vec4 (aVertexPosition, 1.0));',\n\t\t\t\t\t'#ifdef POINT',\n\t\t\t\t\t'\tconst mediump float scale = 200.0;',\n\t\t\t\t\t'\tgl_PointSize = uPointSize * (scale / length (vVertex));',\n\t\t\t\t\t'#endif',\n\t\t\t\t\t'\tgl_Position = uProjectionMatrix * vec4 (vVertex, 1.0);',\n\t\t\t\t\t'}'\n\t\t\t\t].join ('\\n');\n\t\t\t}\n\t\t\treturn script;\n\t\t}\n\n\t\tfunction InitShaderParameters (context, shader, globalParams, shaderType)\n\t\t{\n\t\t\tif (shaderType == JSM.ShaderType.Triangle || shaderType == JSM.ShaderType.TexturedTriangle) {\n\t\t\t\tshader.vertexPositionAttribute = context.getAttribLocation (shader, 'aVertexPosition');\n\t\t\t\tshader.vertexNormalAttribute = context.getAttribLocation (shader, 'aVertexNormal');\n\n\t\t\t\tshader.ambientLightColorUniform = context.getUniformLocation (shader, 'uAmbientLightColor');\n\t\t\t\tshader.lightUniforms = [];\n\t\t\t\tvar i;\n\t\t\t\tfor (i = 0; i < globalParams.maxLightCount; i++) {\n\t\t\t\t\tshader.lightUniforms.push ({\n\t\t\t\t\t\tdiffuseColor : context.getUniformLocation (shader, 'uLights[' + i + '].diffuseColor'),\n\t\t\t\t\t\tspecularColor : context.getUniformLocation (shader, 'uLights[' + i + '].specularColor'),\n\t\t\t\t\t\tdirection : context.getUniformLocation (shader, 'uLights[' + i + '].direction')\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tshader.materialUniforms = {\n\t\t\t\t\tambientColor : context.getUniformLocation (shader, 'uMaterial.ambientColor'),\n\t\t\t\t\tdiffuseColor : context.getUniformLocation (shader, 'uMaterial.diffuseColor'),\n\t\t\t\t\tspecularColor : context.getUniformLocation (shader, 'uMaterial.specularColor'),\n\t\t\t\t\tshininess : context.getUniformLocation (shader, 'uMaterial.shininess'),\n\t\t\t\t\topacity : context.getUniformLocation (shader, 'uMaterial.opacity')\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tshader.vMatrixUniform = context.getUniformLocation (shader, 'uViewMatrix');\n\t\t\t\tshader.pMatrixUniform = context.getUniformLocation (shader, 'uProjectionMatrix');\n\t\t\t\tshader.tMatrixUniform = context.getUniformLocation (shader, 'uTransformationMatrix');\n\n\t\t\t\tif (shaderType == JSM.ShaderType.TexturedTriangle) {\n\t\t\t\t\tshader.vertexUVAttribute = context.getAttribLocation (shader, 'aVertexUV');\n\t\t\t\t\tshader.samplerUniform = context.getUniformLocation (shader, 'uSampler');\n\t\t\t\t}\n\t\t\t} else if (shaderType == JSM.ShaderType.Point || shaderType == JSM.ShaderType.Line) {\n\t\t\t\tshader.vertexPositionAttribute = context.getAttribLocation (shader, 'aVertexPosition');\n\n\t\t\t\tshader.ambientLightColorUniform = context.getUniformLocation (shader, 'uAmbientLightColor');\n\t\t\t\tshader.lightUniforms = [];\n\t\t\t\tfor (i = 0; i < globalParams.maxLightCount; i++) {\n\t\t\t\t\tshader.lightUniforms.push ({\n\t\t\t\t\t\tdiffuseColor : context.getUniformLocation (shader, 'uLights[' + i + '].diffuseColor')\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tshader.materialUniforms = {\n\t\t\t\t\tambientColor : context.getUniformLocation (shader, 'uMaterial.ambientColor'),\n\t\t\t\t\tdiffuseColor : context.getUniformLocation (shader, 'uMaterial.diffuseColor'),\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tshader.vMatrixUniform = context.getUniformLocation (shader, 'uViewMatrix');\n\t\t\t\tshader.pMatrixUniform = context.getUniformLocation (shader, 'uProjectionMatrix');\n\t\t\t\tshader.tMatrixUniform = context.getUniformLocation (shader, 'uTransformationMatrix');\n\n\t\t\t\tif (shaderType == JSM.ShaderType.Point) {\n\t\t\t\t\tshader.pointSizeUniform = context.getUniformLocation (shader, 'uPointSize');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfunction InitShader (context, shaders, globalParams, shaderType)\n\t\t{\n\t\t\tvar vertexShaderScript = GetVertexShaderScript (shaderType);\n\t\t\tvar fragmentShaderScript = GetFragmentShaderScript (shaderType, globalParams);\n\t\t\tif (vertexShaderScript === null || fragmentShaderScript === null) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar shader = JSM.WebGLInitShaderProgram (context, vertexShaderScript, fragmentShaderScript, function (message) {\n\t\t\t\tJSM.Message (message);\n\t\t\t});\n\t\t\tif (shader === null) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tcontext.useProgram (shader);\n\t\t\tInitShaderParameters (context, shader, globalParams, shaderType);\n\t\t\tshaders[shaderType] = shader;\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tthis.shaders = {};\n\t\t\n\t\tif (!InitShader (this.context, this.shaders, this.globalParams, JSM.ShaderType.Point)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!InitShader (this.context, this.shaders, this.globalParams, JSM.ShaderType.Line)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!InitShader (this.context, this.shaders, this.globalParams, JSM.ShaderType.Triangle)) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif (!InitShader (this.context, this.shaders, this.globalParams, JSM.ShaderType.TexturedTriangle)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.context.enable (this.context.DEPTH_TEST);\n\t\tthis.context.depthFunc (this.context.LEQUAL);\n\t\t\n\t\tthis.context.enable (this.context.BLEND);\n\t\tthis.context.blendEquation (this.context.FUNC_ADD);\n\t\tthis.context.blendFunc (this.context.SRC_ALPHA, this.context.ONE_MINUS_SRC_ALPHA);\n\n\t\tthis.context.disable (this.context.CULL_FACE);\n\t\tthis.cullEnabled = false;\n\n\t\treturn true;\n\t};\n\n\tJSM.ShaderProgram.prototype.CompileMaterial = function (material, textureLoaded)\n\t{\n\t\tif (material.texture !== null) {\n\t\t\tvar context = this.context;\n\t\t\tvar textureBuffer = context.createTexture ();\n\t\t\tvar textureImage = new Image ();\n\t\t\ttextureImage.src = material.texture;\n\t\t\ttextureImage.onload = function () {\n\t\t\t\tvar resizedImage = JSM.ResizeImageToPowerOfTwoSides (textureImage);\n\t\t\t\tcontext.bindTexture (context.TEXTURE_2D, textureBuffer);\n\t\t\t\tcontext.texParameteri (context.TEXTURE_2D, context.TEXTURE_MAG_FILTER, context.LINEAR);\n\t\t\t\tcontext.texParameteri (context.TEXTURE_2D, context.TEXTURE_MIN_FILTER, context.LINEAR_MIPMAP_LINEAR);\n\t\t\t\tcontext.texImage2D (context.TEXTURE_2D, 0, context.RGBA, context.RGBA, context.UNSIGNED_BYTE, resizedImage);\n\t\t\t\tcontext.generateMipmap (context.TEXTURE_2D);\n\t\t\t\tcontext.bindTexture (context.TEXTURE_2D, null);\n\t\t\t\tif (textureLoaded !== undefined && textureLoaded !== null) {\n\t\t\t\t\ttextureLoaded ();\n\t\t\t\t}\n\t\t\t};\n\t\t\tmaterial.SetBuffers (textureBuffer, textureImage);\n\t\t}\n\t};\n\n\tJSM.ShaderProgram.prototype.CompileMesh = function (mesh)\n\t{\n\t\tvar context = this.context;\n\t\tvar vertexBuffer = context.createBuffer ();\n\t\tcontext.bindBuffer (context.ARRAY_BUFFER, vertexBuffer);\n\t\tcontext.bufferData (context.ARRAY_BUFFER, mesh.GetVertexArray (), context.STATIC_DRAW);\n\t\tvertexBuffer.itemSize = 3;\n\t\tvertexBuffer.numItems = mesh.VertexCount ();\n\n\t\tvar normalBuffer = null;\n\t\tif (mesh.HasNormalArray ()) {\n\t\t\tnormalBuffer = context.createBuffer ();\n\t\t\tcontext.bindBuffer (context.ARRAY_BUFFER, normalBuffer);\n\t\t\tcontext.bufferData (context.ARRAY_BUFFER, mesh.GetNormalArray (), context.STATIC_DRAW);\n\t\t\tnormalBuffer.itemSize = 3;\n\t\t\tnormalBuffer.numItems = mesh.NormalCount ();\n\t\t}\n\n\t\tvar uvBuffer = null;\n\t\tif (mesh.HasUVArray ()) {\n\t\t\tuvBuffer = context.createBuffer ();\n\t\t\tcontext.bindBuffer (context.ARRAY_BUFFER, uvBuffer);\n\t\t\tcontext.bufferData (context.ARRAY_BUFFER, mesh.GetUVArray (), context.STATIC_DRAW);\n\t\t\tuvBuffer.itemSize = 2;\n\t\t\tuvBuffer.numItems = mesh.UVCount ();\n\t\t}\n\t\t\n\t\tmesh.SetBuffers (vertexBuffer, normalBuffer, uvBuffer);\n\t};\n\n\tJSM.ShaderProgram.prototype.GetShader = function (shaderType)\n\t{\n\t\treturn this.shaders[shaderType];\n\t};\n\n\tJSM.ShaderProgram.prototype.UseShader = function (shaderType)\n\t{\n\t\tthis.currentShader = this.GetShader (shaderType);\n\t\tthis.currentType = shaderType;\n\t\tthis.context.useProgram (this.currentShader);\n\t};\n\n\tJSM.ShaderProgram.prototype.SetParameters = function (ambientLight, directionalLights, viewMatrix, projectionMatrix)\n\t{\n\t\tfunction GetLight (directionalLights, index, noDirectionalLight)\n\t\t{\n\t\t\tif (index < directionalLights.length) {\n\t\t\t\treturn directionalLights[index];\n\t\t\t}\n\n\t\t\treturn noDirectionalLight;\n\t\t}\n\t\t\n\t\tvar context = this.context;\n\t\tvar shader = this.currentShader;\n\t\t\n\t\tvar i, light, lightDirection;\n\t\tif (this.currentType == JSM.ShaderType.Triangle || this.currentType == JSM.ShaderType.TexturedTriangle) {\n\t\t\tcontext.uniform3f (shader.ambientLightColorUniform, ambientLight.color[0], ambientLight.color[1], ambientLight.color[2]);\n\t\t\tfor (i = 0; i < this.globalParams.maxLightCount; i++) {\n\t\t\t\tlight = GetLight (directionalLights, i, this.globalParams.noDirectionalLight);\n\t\t\t\tlightDirection = JSM.ApplyRotation (viewMatrix, light.direction);\n\t\t\t\tcontext.uniform3f (shader.lightUniforms[i].diffuseColor, light.diffuse[0], light.diffuse[1], light.diffuse[2]);\n\t\t\t\tcontext.uniform3f (shader.lightUniforms[i].specularColor, light.specular[0], light.specular[1], light.specular[2]);\n\t\t\t\tcontext.uniform3f (shader.lightUniforms[i].direction, lightDirection.x, lightDirection.y, lightDirection.z);\n\t\t\t}\n\t\t\tcontext.uniformMatrix4fv (shader.pMatrixUniform, false, projectionMatrix);\n\t\t\tcontext.uniformMatrix4fv (shader.vMatrixUniform, false, viewMatrix);\n\t\t} else if (this.currentType == JSM.ShaderType.Point || this.currentType == JSM.ShaderType.Line) {\n\t\t\tcontext.uniform3f (shader.ambientLightColorUniform, ambientLight.color[0], ambientLight.color[1], ambientLight.color[2]);\n\t\t\tfor (i = 0; i < this.globalParams.maxLightCount; i++) {\n\t\t\t\tlight = GetLight (directionalLights, i, this.globalParams.noDirectionalLight);\n\t\t\t\tcontext.uniform3f (shader.lightUniforms[i].diffuseColor, light.diffuse[0], light.diffuse[1], light.diffuse[2]);\n\t\t\t}\n\t\t\tcontext.uniformMatrix4fv (shader.pMatrixUniform, false, projectionMatrix);\n\t\t\tcontext.uniformMatrix4fv (shader.vMatrixUniform, false, viewMatrix);\n\t\t}\n\t};\n\n\tJSM.ShaderProgram.prototype.SetCullEnabled = function (enable)\n\t{\n\t\tif (enable && !this.cullEnabled) {\n\t\t\tthis.context.enable (this.context.CULL_FACE);\n\t\t\tthis.cullEnabled = true;\n\t\t} else if (!enable && this.cullEnabled) {\n\t\t\tthis.context.disable (this.context.CULL_FACE);\n\t\t\tthis.cullEnabled = false;\n\t\t}\n\t};\n\n\tJSM.ShaderProgram.prototype.DrawArrays = function (material, matrix, vertexBuffer, normalBuffer, uvBuffer)\n\t{\n\t\tvar context = this.context;\n\t\tvar shader = this.currentShader;\n\t\tthis.SetCullEnabled (material.singleSided);\n\t\t\n\t\tif (this.currentType == JSM.ShaderType.Triangle || this.currentType == JSM.ShaderType.TexturedTriangle) {\n\t\t\tcontext.uniform3f (shader.materialUniforms.ambientColor, material.ambient[0], material.ambient[1], material.ambient[2]);\n\t\t\tcontext.uniform3f (shader.materialUniforms.diffuseColor, material.diffuse[0], material.diffuse[1], material.diffuse[2]);\n\t\t\tcontext.uniform3f (shader.materialUniforms.specularColor, material.specular[0], material.specular[1], material.specular[2]);\n\t\t\tcontext.uniform1f (shader.materialUniforms.shininess, material.shininess);\n\t\t\tcontext.uniform1f (shader.materialUniforms.opacity, material.opacity);\n\n\t\t\tcontext.uniformMatrix4fv (shader.tMatrixUniform, false, matrix);\n\n\t\t\tcontext.bindBuffer (context.ARRAY_BUFFER, vertexBuffer);\n\t\t\tcontext.enableVertexAttribArray (shader.vertexPositionAttribute);\n\t\t\tcontext.vertexAttribPointer (shader.vertexPositionAttribute, vertexBuffer.itemSize, context.FLOAT, false, 0, 0);\n\t\t\t\n\t\t\tcontext.bindBuffer (context.ARRAY_BUFFER, normalBuffer);\n\t\t\tcontext.enableVertexAttribArray (shader.vertexNormalAttribute);\n\t\t\tcontext.vertexAttribPointer (shader.vertexNormalAttribute, normalBuffer.itemSize, context.FLOAT, false, 0, 0);\n\n\t\t\tif (this.currentType == JSM.ShaderType.TexturedTriangle) {\n\t\t\t\tcontext.activeTexture (context.TEXTURE0);\n\t\t\t\tcontext.bindTexture (context.TEXTURE_2D, material.textureBuffer);\n\t\t\t\tcontext.bindBuffer (context.ARRAY_BUFFER, uvBuffer);\n\t\t\t\tcontext.enableVertexAttribArray (shader.vertexUVAttribute);\n\t\t\t\tcontext.vertexAttribPointer (shader.vertexUVAttribute, uvBuffer.itemSize, context.FLOAT, false, 0, 0);\n\t\t\t\tcontext.uniform1i (shader.samplerUniform, 0);\n\t\t\t}\n\t\t\t\n\t\t\tcontext.drawArrays (context.TRIANGLES, 0, vertexBuffer.numItems);\n\t\t} else if (this.currentType == JSM.ShaderType.Point || this.currentType == JSM.ShaderType.Line) {\n\t\t\tcontext.uniform3f (shader.materialUniforms.ambientColor, material.ambient[0], material.ambient[1], material.ambient[2]);\n\t\t\tcontext.uniform3f (shader.materialUniforms.diffuseColor, material.diffuse[0], material.diffuse[1], material.diffuse[2]);\n\t\t\t\n\t\t\tcontext.uniformMatrix4fv (shader.tMatrixUniform, false, matrix);\n\t\t\t\n\t\t\tcontext.bindBuffer (context.ARRAY_BUFFER, vertexBuffer);\n\t\t\tcontext.enableVertexAttribArray (shader.vertexPositionAttribute);\n\t\t\tcontext.vertexAttribPointer (shader.vertexPositionAttribute, vertexBuffer.itemSize, context.FLOAT, false, 0, 0);\n\t\t\t\n\t\t\tif (this.currentType == JSM.ShaderType.Point) {\n\t\t\t\tcontext.uniform1f (shader.pointSizeUniform, material.pointSize);\n\t\t\t\tcontext.drawArrays (context.POINTS, 0, vertexBuffer.numItems);\n\t\t\t} else if (this.currentType == JSM.ShaderType.Line) {\n\t\t\t\tcontext.drawArrays (context.LINES, 0, vertexBuffer.numItems);\n\t\t\t}\n\t\t}\n\t};\n\n\treturn JSM;\n});\n"]}