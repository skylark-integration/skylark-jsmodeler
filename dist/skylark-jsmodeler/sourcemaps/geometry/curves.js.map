{"version":3,"sources":["geometry/curves.js"],"names":["define","JSM","GenerateCubicBezierCurve","p0","p1","p2","p3","segmentation","GetCubicBezierPoint","t","t2","t3","invT","invT2","invT3","x","y","Coord2D","i","coord","result","s","push","BernsteinPolynomial","k","n","min","Minimum","BinomialCoefficient","Math","pow","GenerateBezierCurve","points","j","point","bernstein","length"],"mappings":";;;;;;;AAAAA,QAAQ,eAAe,SAASC,GA+F/B,OAlFAA,EAAIC,yBAA2B,SAAUC,EAAIC,EAAIC,EAAIC,EAAIC,GAExD,SAASC,EAAqBL,EAAIC,EAAIC,EAAIC,EAAIG,GAE7C,IAAIC,EAAKD,EAAIA,EACTE,EAAKD,EAAKD,EACVG,EAAO,EAAMH,EACbI,EAAQD,EAAOA,EACfE,EAAQD,EAAQD,EAChBG,EAAID,EAAQX,EAAGY,EAAI,EAAMF,EAAQJ,EAAIL,EAAGW,EAAK,EAAMH,EAAOF,EAAKL,EAAGU,EAAIJ,EAAKL,EAAGS,EAC9EC,EAAIF,EAAQX,EAAGa,EAAI,EAAMH,EAAQJ,EAAIL,EAAGY,EAAK,EAAMJ,EAAOF,EAAKL,EAAGW,EAAIL,EAAKL,EAAGU,EAClF,OAAO,IAAIf,EAAIgB,QAASF,EAAGC,GAG5B,IAEIE,EAAGC,EAFHC,KACAC,EAAI,EAAMd,EAEd,IAAKW,EAAI,EAAGA,GAAKX,EAAcW,IAC9BC,EAAQX,EAAqBL,EAAIC,EAAIC,EAAIC,EAAIY,EAAIG,GACjDD,EAAOE,KAAMH,GAEd,OAAOC,GAaRnB,EAAIsB,oBAAsB,SAAUC,EAAGC,EAAGV,GAezC,OAbA,SAA8BU,EAAGD,GAEhC,IAEIN,EAFAE,EAAS,EACTM,EAAMzB,EAAI0B,QAASH,EAAGC,EAAID,GAE9B,IAAKN,EAAI,EAAGA,EAAIQ,EAAKR,IACpBE,GAAmBK,EAAIP,EACvBE,GAAmBF,EAAI,EAExB,OAAOE,EAGUQ,CAAqBH,EAAGD,GACrBK,KAAKC,IAAKf,EAAGS,GAAKK,KAAKC,IAAK,EAAMf,EAAGU,EAAID,IAY/DvB,EAAI8B,oBAAsB,SAAUC,EAAQzB,GAE3C,IAIIW,EAAGe,EAAGxB,EAAGyB,EAAOC,EAAWhB,EAJ3BC,KACAK,EAAIO,EAAOI,OAAS,EACpBf,EAAI,EAAMd,EAGd,IAAKW,EAAI,EAAGA,GAAKX,EAAcW,IAAK,CAGnC,IAFAT,EAAIS,EAAIG,EACRF,EAAQ,IAAIlB,EAAIgB,QAAS,EAAK,GACzBgB,EAAI,EAAGA,GAAKR,EAAGQ,IACnBC,EAAQF,EAAOC,GACfE,EAAYlC,EAAIsB,oBAAqBU,EAAGR,EAAGhB,GAC3CU,EAAMJ,GAAKmB,EAAMnB,EAAIoB,EACrBhB,EAAMH,GAAKkB,EAAMlB,EAAImB,EAEtBf,EAAOE,KAAMH,GAEd,OAAOC,GAGDnB","file":"../../geometry/curves.js","sourcesContent":["define([\"../core/jsm\"],function(JSM){\n\t/**\n\t* Function: GenerateCubicBezierCurve\n\t* Description: Generates a bezier curve from the given points.\n\t* Parameters:\n\t*\tp0 {Coord2D} point 1\n\t*\tp1 {Coord2D} point 2\n\t*\tp2 {Coord2D} point 3\n\t*\tp3 {Coord2D} point 4\n\t*\tsegmentation {integer} the segmentation of the result curve\n\t* Returns:\n\t*\t{Coord2D[]} the result\n\t*/\n\tJSM.GenerateCubicBezierCurve = function (p0, p1, p2, p3, segmentation)\n\t{\n\t\tfunction GetCubicBezierPoint (p0, p1, p2, p3, t)\n\t\t{\n\t\t\tvar t2 = t * t;\n\t\t\tvar t3 = t2 * t;\n\t\t\tvar invT = 1.0 - t;\n\t\t\tvar invT2 = invT * invT;\n\t\t\tvar invT3 = invT2 * invT;\n\t\t\tvar x = invT3 * p0.x + 3.0 * invT2 * t * p1.x  + 3.0 * invT * t2 * p2.x + t3 * p3.x;\n\t\t\tvar y = invT3 * p0.y + 3.0 * invT2 * t * p1.y  + 3.0 * invT * t2 * p2.y + t3 * p3.y;\n\t\t\treturn new JSM.Coord2D (x, y);\n\t\t}\n\t\t\n\t\tvar result = [];\n\t\tvar s = 1.0 / segmentation;\n\t\tvar i, coord;\n\t\tfor (i = 0; i <= segmentation; i++) {\n\t\t\tcoord = GetCubicBezierPoint (p0, p1, p2, p3, i * s);\n\t\t\tresult.push (coord);\n\t\t}\n\t\treturn result;\n\t};\n\n\t/**\n\t* Function: BernsteinPolynomial\n\t* Description: Calculates the value of the Bernstein polynomial.\n\t* Parameters:\n\t*\tk {integer} the start index\n\t*\tn {integer} the end index\n\t*\tx {number} the value\n\t* Returns:\n\t*\t{number} the result\n\t*/\n\tJSM.BernsteinPolynomial = function (k, n, x)\n\t{\n\t\tfunction BinomialCoefficient (n, k)\n\t\t{\n\t\t\tvar result = 1.0;\n\t\t\tvar min = JSM.Minimum (k, n - k);\n\t\t\tvar i;\n\t\t\tfor (i = 0; i < min; i++) {\n\t\t\t\tresult = result * (n - i);\n\t\t\t\tresult = result / (i + 1);\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\n\t\tvar coefficient = BinomialCoefficient (n, k);\n\t\treturn coefficient * Math.pow (x, k) * Math.pow (1.0 - x, n - k);\n\t};\n\n\t/**\n\t* Function: GenerateBezierCurve\n\t* Description: Generates a bezier curve from the given points.\n\t* Parameters:\n\t*\tpoints {Coord2D[]} the points\n\t*\tsegmentation {integer} the segmentation of the result curve\n\t* Returns:\n\t*\t{Coord2D[]} the result\n\t*/\n\tJSM.GenerateBezierCurve = function (points, segmentation)\n\t{\n\t\tvar result = [];\n\t\tvar n = points.length - 1;\n\t\tvar s = 1.0 / segmentation;\n\t\t\n\t\tvar i, j, t, point, bernstein, coord;\n\t\tfor (i = 0; i <= segmentation; i++) {\n\t\t\tt = i * s;\n\t\t\tcoord = new JSM.Coord2D (0.0, 0.0);\n\t\t\tfor (j = 0; j <= n; j++) {\n\t\t\t\tpoint = points[j];\n\t\t\t\tbernstein = JSM.BernsteinPolynomial (j, n, t);\n\t\t\t\tcoord.x += point.x * bernstein;\n\t\t\t\tcoord.y += point.y * bernstein;\n\t\t\t}\n\t\t\tresult.push (coord);\n\t\t}\n\t\treturn result;\n\t};\n\n\treturn JSM;\n});\n"]}