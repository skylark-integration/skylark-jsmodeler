{"version":3,"sources":["geometry/ray.js"],"names":["define","JSM","Ray","origin","direction","length","this","Normalize","prototype","Set","GetOrigin","GetDirection","IsLengthReached","undefined","IsGreater","Clone"],"mappings":";;;;;;;AAAAA,QAAQ,eAAe,SAASC,GAgF/B,OAvEAA,EAAIC,IAAM,SAAUC,EAAQC,EAAWC,GAEtCC,KAAKH,OAASA,EACdG,KAAKF,UAAYA,EAAUG,YAC3BD,KAAKD,OAASA,GAWfJ,EAAIC,IAAIM,UAAUC,IAAM,SAAUN,EAAQC,EAAWC,GAEpDC,KAAKH,OAASA,EACdG,KAAKF,UAAYA,EAAUG,YAC3BD,KAAKD,OAASA,GASfJ,EAAIC,IAAIM,UAAUE,UAAY,WAE7B,OAAOJ,KAAKH,QASbF,EAAIC,IAAIM,UAAUG,aAAe,WAEhC,OAAOL,KAAKF,WAWbH,EAAIC,IAAIM,UAAUI,gBAAkB,SAAUP,GAE7C,YAAoBQ,IAAhBP,KAAKD,QAAwC,OAAhBC,KAAKD,QAG/BJ,EAAIa,UAAWT,EAAQC,KAAKD,SASpCJ,EAAIC,IAAIM,UAAUO,MAAQ,WAEzB,OAAO,IAAId,EAAIC,IAAKI,KAAKH,OAAOY,QAAUT,KAAKF,UAAUW,QAAUT,KAAKD,SAGlEJ","file":"../../geometry/ray.js","sourcesContent":["define([\"../core/jsm\"],function(JSM){\n\t/**\n\t* Class: Ray\n\t* Description: Represents a Ray.\n\t* Parameters:\n\t*\torigin {Coord} the starting point of the ray\n\t*\tdirection {Vector} the direction of the ray\n\t*\tlength {number} the length of the ray, null means infinite ray\n\t*/\n\tJSM.Ray = function (origin, direction, length)\n\t{\n\t\tthis.origin = origin;\n\t\tthis.direction = direction.Normalize ();\n\t\tthis.length = length;\n\t};\n\n\t/**\n\t* Function: Ray.Set\n\t* Description: Sets the ray.\n\t* Parameters:\n\t*\torigin {Coord} the starting point of the ray\n\t*\tdirection {Vector} the direction of the ray\n\t*\tlength {number} the length of the ray, null means infinite ray\n\t*/\n\tJSM.Ray.prototype.Set = function (origin, direction, length)\n\t{\n\t\tthis.origin = origin;\n\t\tthis.direction = direction.Normalize ();\n\t\tthis.length = length;\n\t};\n\n\t/**\n\t* Function: Ray.GetOrigin\n\t* Description: Returns the origin of the ray.\n\t* Returns:\n\t*\t{Coord} the result\n\t*/\n\tJSM.Ray.prototype.GetOrigin = function ()\n\t{\n\t\treturn this.origin;\n\t};\n\n\t/**\n\t* Function: Ray.GetDirection\n\t* Description: Returns the direction of the ray.\n\t* Returns:\n\t*\t{Vector} the result\n\t*/\n\tJSM.Ray.prototype.GetDirection = function ()\n\t{\n\t\treturn this.direction;\n\t};\n\n\t/**\n\t* Function: Ray.IsLengthReached\n\t* Description:\n\t*\tReturns if the given length is greater than the length of the ray.\n\t*\tAlways return false in case of infinite ray.\n\t* Returns:\n\t*\t{boolean} the result\n\t*/\n\tJSM.Ray.prototype.IsLengthReached = function (length)\n\t{\n\t\tif (this.length === undefined || this.length === null) {\n\t\t\treturn false;\n\t\t}\n\t\treturn JSM.IsGreater (length, this.length);\n\t};\n\n\t/**\n\t* Function: Ray.Clone\n\t* Description: Clones the ray.\n\t* Returns:\n\t*\t{Ray} a cloned instance\n\t*/\n\tJSM.Ray.prototype.Clone = function ()\n\t{\n\t\treturn new JSM.Ray (this.origin.Clone (), this.direction.Clone (), this.length);\n\t};\n\n\treturn JSM;\n});\n"]}