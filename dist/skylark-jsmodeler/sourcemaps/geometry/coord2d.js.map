{"version":3,"sources":["geometry/coord2d.js"],"names":["define","JSM","Coord2D","x","y","this","prototype","Set","IsEqual","coord","IsEqualWithEps","eps","DistanceTo","Math","sqrt","AngleTo","aDirection","Clone","Normalize","bDirection","product","VectorDot2D","ArcCos","Length","MultiplyScalar","scalar","length","IsPositive","SetLength","thisLength","Offset","direction","distance","normal","Rotate","angle","origo","co","cos","si","sin","ToString","Vector2D","CoordFromArray2D","array","CoordToArray2D","CoordAdd2D","a","b","CoordSub2D"],"mappings":"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","file":"../../geometry/coord2d.js","sourcesContent":["define([\"../core/jsm\"],function(JSM){\n\t/**\n\t* Class: Coord2D\n\t* Description: Represents a 2D coordinate.\n\t* Parameters:\n\t*\tx {number} the first component\n\t*\ty {number} the second component\n\t*/\n\tJSM.Coord2D = function (x, y)\n\t{\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t};\n\n\t/**\n\t* Function: Coord2D.Set\n\t* Description: Sets the coordinate.\n\t* Parameters:\n\t*\tx {number} the first component\n\t*\ty {number} the second component\n\t*/\n\tJSM.Coord2D.prototype.Set = function (x, y)\n\t{\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t};\n\n\t/**\n\t* Function: Coord2D.IsEqual\n\t* Description: Returns if the coordinate is equal with the given one.\n\t* Parameters:\n\t*\tcoord {Coord2D} the coordinate\n\t* Returns:\n\t*\t{boolean} the result\n\t*/\n\tJSM.Coord2D.prototype.IsEqual = function (coord)\n\t{\n\t\treturn JSM.IsEqual (this.x, coord.x) && JSM.IsEqual (this.y, coord.y);\n\t};\n\n\t/**\n\t* Function: Coord2D.IsEqualWithEps\n\t* Description: Returns if the coordinate is equal with the given one. Uses the given epsilon for comparison.\n\t* Parameters:\n\t*\tcoord {Coord2D} the coordinate\n\t*\teps {number} the epsilon\n\t* Returns:\n\t*\t{boolean} the result\n\t*/\n\tJSM.Coord2D.prototype.IsEqualWithEps = function (coord, eps)\n\t{\n\t\treturn JSM.IsEqualWithEps (this.x, coord.x, eps) && JSM.IsEqualWithEps (this.y, coord.y, eps);\n\t};\n\n\t/**\n\t* Function: Coord2D.DistanceTo\n\t* Description: Calculates the coordinate distance to the given one.\n\t* Parameters:\n\t*\tcoord {Coord2D} the coordinate\n\t* Returns:\n\t*\t{number} the result\n\t*/\n\tJSM.Coord2D.prototype.DistanceTo = function (coord)\n\t{\n\t\treturn Math.sqrt ((coord.x - this.x) * (coord.x - this.x) + (coord.y - this.y) * (coord.y - this.y));\n\t};\n\n\t/**\n\t* Function: Coord2D.AngleTo\n\t* Description: Calculates the coordinate vector angle to the given one.\n\t* Parameters:\n\t*\tcoord {Coord2D} the coordinate\n\t* Returns:\n\t*\t{number} the result\n\t*/\n\tJSM.Coord2D.prototype.AngleTo = function (coord)\n\t{\n\t\tvar aDirection = this.Clone ().Normalize ();\n\t\tvar bDirection = coord.Clone ().Normalize ();\n\t\tif (aDirection.IsEqual (bDirection)) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tvar product = JSM.VectorDot2D (aDirection, bDirection);\n\t\treturn JSM.ArcCos (product);\n\t};\n\n\t/**\n\t* Function: Coord2D.Length\n\t* Description: Calculates the length of the coordinate vector.\n\t* Returns:\n\t*\t{number} the result\n\t*/\n\tJSM.Coord2D.prototype.Length = function ()\n\t{\n\t\treturn Math.sqrt (this.x * this.x + this.y * this.y);\n\t};\n\n\t/**\n\t* Function: Coord2D.MultiplyScalar\n\t* Description: Multiplies the vector with a scalar.\n\t* Parameters:\n\t*\tscalar {number} the scalar\n\t* Returns:\n\t*\t{Coord2D} this pointer\n\t*/\n\tJSM.Coord2D.prototype.MultiplyScalar = function (scalar)\n\t{\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\treturn this;\n\t};\n\n\t/**\n\t* Function: Coord2D.Normalize\n\t* Description: Normalizes the coordinate vector.\n\t* Returns:\n\t*\t{Coord2D} this pointer\n\t*/\n\tJSM.Coord2D.prototype.Normalize = function ()\n\t{\n\t\tvar length = this.Length ();\n\t\tif (JSM.IsPositive (length)) {\n\t\t\tthis.MultiplyScalar (1.0 / length);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t* Function: Coord2D.SetLength\n\t* Description: Sets the length of the coordinate vector.\n\t* Parameters:\n\t*\tlength {number} the length\n\t* Returns:\n\t*\t{Coord2D} this pointer\n\t*/\n\tJSM.Coord2D.prototype.SetLength = function (length)\n\t{\n\t\tvar thisLength = this.Length ();\n\t\tif (JSM.IsPositive (thisLength)) {\n\t\t\tthis.MultiplyScalar (length / thisLength);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t* Function: Coord2D.Offset\n\t* Description: Offsets the coordinate.\n\t* Parameters:\n\t*\tdirection {Vector2D} the direction of the offset\n\t*\tdistance {number} the distance of the offset\n\t* Returns:\n\t*\t{Coord2D} this pointer\n\t*/\n\tJSM.Coord2D.prototype.Offset = function (direction, distance)\n\t{\n\t\tvar normal = direction.Clone ().Normalize ();\n\t\tthis.x += normal.x * distance;\n\t\tthis.y += normal.y * distance;\n\t\treturn this;\n\t};\n\n\t/**\n\t* Function: Coord2D.Rotate\n\t* Description: Rotates the coordinate.\n\t* Parameters:\n\t*\tangle {number} the angle of the rotation\n\t*\torigo {Coord2D} the origo of the rotation\n\t* Returns:\n\t*\t{Coord2D} this pointer\n\t*/\n\tJSM.Coord2D.prototype.Rotate = function (angle, origo)\n\t{\n\t\tvar x = this.x - origo.x;\n\t\tvar y = this.y - origo.y;\n\t\tvar co = Math.cos (angle);\n\t\tvar si = Math.sin (angle);\n\t\tthis.x = x * co - y * si + origo.x;\n\t\tthis.y = x * si + y * co + origo.y;\n\t\treturn this;\n\t};\n\n\t/**\n\t* Function: Coord2D.ToString\n\t* Description: Converts the coordinate values to string.\n\t* Returns:\n\t*\t{string} the string representation of the coordinate\n\t*/\n\tJSM.Coord2D.prototype.ToString = function ()\n\t{\n\t\treturn ('(' + this.x + ', ' + this.y + ')');\n\t};\n\n\t/**\n\t* Function: Coord2D.Clone\n\t* Description: Clones the coordinate.\n\t* Returns:\n\t*\t{Coord2D} a cloned instance\n\t*/\n\tJSM.Coord2D.prototype.Clone = function ()\n\t{\n\t\treturn new JSM.Coord2D (this.x, this.y);\n\t};\n\n\t/**\n\t* Class: Vector2D\n\t* Description: Same as Coord2D.\n\t*/\n\tJSM.Vector2D = JSM.Coord2D;\n\n\t/**\n\t* Function: CoordFromArray2D\n\t* Description: Returns a coordinate from an array of components.\n\t* Parameters:\n\t*\tarray {number[2]} the array of components\n\t* Returns:\n\t*\t{Coord2D} the result\n\t*/\n\tJSM.CoordFromArray2D = function (array)\n\t{\n\t\treturn new JSM.Coord2D (array[0], array[1]);\n\t};\n\n\t/**\n\t* Function: CoordToArray2D\n\t* Description: Returns array of components from a coordinate.\n\t* Parameters:\n\t*\tcoord {Coord2D} the coordinate\n\t* Returns:\n\t*\tarray {number[2]} the result\n\t*/\n\tJSM.CoordToArray2D = function (coord)\n\t{\n\t\treturn [coord.x, coord.y];\n\t};\n\n\t/**\n\t* Function: CoordAdd2D\n\t* Description: Adds two coordinates.\n\t* Parameters:\n\t*\ta {Coord2D} the first coordinate\n\t*\tb {Coord2D} the second coordinate\n\t* Returns:\n\t*\t{Coord2D} the result\n\t*/\n\tJSM.CoordAdd2D = function (a, b)\n\t{\n\t\treturn new JSM.Coord2D (a.x + b.x, a.y + b.y);\n\t};\n\n\t/**\n\t* Function: CoordSub2D\n\t* Description: Subs two coordinates.\n\t* Parameters:\n\t*\ta {Coord2D} the first coordinate\n\t*\tb {Coord2D} the second coordinate\n\t* Returns:\n\t*\t{Coord2D} the result\n\t*/\n\tJSM.CoordSub2D = function (a, b)\n\t{\n\t\treturn new JSM.Coord2D (a.x - b.x, a.y - b.y);\n\t};\n\n\t/**\n\t* Function: VectorDot2D\n\t* Description: Calculates the dot product of two vectors.\n\t* Parameters:\n\t*\ta {Vector2D} the first vector\n\t*\tb {Vector2D} the second vector\n\t* Returns:\n\t*\t{number} the result\n\t*/\n\tJSM.VectorDot2D = function (a, b)\n\t{\n\t\treturn a.x * b.x + a.y * b.y;\n\t};\n\n\treturn JSM;\n});\n"]}