{"version":3,"sources":["geometry/sector.js"],"names":["define","JSM","CoordSectorPosition2D","CoordInsideOfSector","CoordOnSectorEndCoord","CoordOutsideOfSector","SectorSectorPosition2D","SectorsDontIntersect","SectorsIntersectCoincident","SectorsIntersectEndPoint","SectorsIntersectOnePoint","CoordSectorPosition","Sector2D","beg","end","this","prototype","Set","GetLength","DistanceTo","CoordPosition","coord","x","y","x1","y1","x2","y2","length","IsZero","IsEqual","u","IsLower","IsGreater","ux","uy","SectorPosition","sector","intersection","IsOnSegment","IsLowerOrEqual","Math","max","IsGreaterOrEqual","min","calcIntersection","undefined","aBeg","aEnd","bBeg","bEnd","equalBeg","equalEnd","x3","y3","x4","y4","numeratorA","numeratorB","denominator","distA","distB","ProjectCoord","denom","Clone","dir","CoordSub2D","MultiplyScalar","CoordAdd2D","Sector","z","a","b","CoordSub","z1","z2","bu","c","CoordAdd","distance","GetSectorSegmentation2D","segmentation","i","offseted","direction","step","result","Offset","push","GetSectorSegmentation"],"mappings":"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","file":"../../geometry/sector.js","sourcesContent":["define([\"../core/jsm\"],function(JSM){\n\t/**\n\t* Enum: CoordSectorPosition2D\n\t* Description: Position of a coordinate and a sector.\n\t* Values:\n\t*\t{CoordInsideOfSector} coordinate lies inside of sector\n\t*\t{CoordOnSectorEndCoord} coordinate lies at the end of the sector\n\t*\t{CoordOutsideOfSector} coordinate lies outside of the sector\n\t*/\n\tJSM.CoordSectorPosition2D = {\n\t\tCoordInsideOfSector : 0,\n\t\tCoordOnSectorEndCoord : 1,\n\t\tCoordOutsideOfSector : 2\n\t};\n\n\t/**\n\t* Enum: SectorSectorPosition2D\n\t* Description: Position of two sectors.\n\t* Values:\n\t*\t{SectorsDontIntersect} sectors do not intersect\n\t*\t{SectorsIntersectCoincident} sectors intersect coincident\n\t*\t{SectorsIntersectEndPoint} sectors intersect at end point\n\t*\t{SectorsIntersectOnePoint} sectors intersect one point\n\t*/\n\tJSM.SectorSectorPosition2D = {\n\t\tSectorsDontIntersect : 0,\n\t\tSectorsIntersectCoincident : 1,\n\t\tSectorsIntersectEndPoint : 2,\n\t\tSectorsIntersectOnePoint : 3\n\t};\n\n\t/**\n\t* Enum: CoordSectorPosition\n\t* Description: Position of a coordinate and a sector.\n\t* Values:\n\t*\t{CoordInsideOfSector} coordinate lies inside of sector\n\t*\t{CoordOnSectorEndCoord} coordinate lies at the end of the sector\n\t*\t{CoordOutsideOfSector} coordinate lies outside of the sector\n\t*/\n\tJSM.CoordSectorPosition = {\n\t\tCoordInsideOfSector : 0,\n\t\tCoordOnSectorEndCoord : 1,\n\t\tCoordOutsideOfSector : 2\n\t};\n\n\t/**\n\t* Class: Sector2D\n\t* Description: Represents a 2D sector.\n\t* Parameters:\n\t*\tbeg {Coord2D} the beginning coordinate\n\t*\tend {Coord2D} the ending coordinate\n\t*/\n\tJSM.Sector2D = function (beg, end)\n\t{\n\t\tthis.beg = beg;\n\t\tthis.end = end;\n\t};\n\n\t/**\n\t* Function: Sector2D.Set\n\t* Description: Sets the sector.\n\t* Parameters:\n\t*\tbeg {Coord2D} the beginning coordinate\n\t*\tend {Coord2D} the ending coordinate\n\t*/\n\tJSM.Sector2D.prototype.Set = function (beg, end)\n\t{\n\t\tthis.beg = beg;\n\t\tthis.end = end;\n\t};\n\n\t/**\n\t* Function: Sector.GetLength\n\t* Description: Returns the length of the sector.\n\t* Returns:\n\t*\t{number} the result\n\t*/\n\tJSM.Sector2D.prototype.GetLength = function ()\n\t{\n\t\treturn this.beg.DistanceTo (this.end);\n\t};\n\n\t/**\n\t* Function: Sector2D.CoordPosition\n\t* Description: Calculates the position of the sector and the given coordinate.\n\t* Parameters:\n\t*\tcoord {Coord2D} the coordinate\n\t* Returns:\n\t*\t{CoordSectorPosition2D} the result\n\t*/\n\tJSM.Sector2D.prototype.CoordPosition = function (coord)\n\t{\n\t\tvar x = coord.x;\n\t\tvar y = coord.y;\n\t\tvar x1 = this.beg.x;\n\t\tvar y1 = this.beg.y;\n\t\tvar x2 = this.end.x;\n\t\tvar y2 = this.end.y;\n\n\t\tvar length = this.GetLength ();\n\t\tif (JSM.IsZero (length)) {\n\t\t\tif (coord.IsEqual (this.beg)) {\n\t\t\t\treturn JSM.CoordSectorPosition2D.CoordOnSectorEndCoord;\n\t\t\t}\n\n\t\t\treturn JSM.CoordSectorPosition2D.CoordOutsideOfSector;\n\t\t}\n\n\t\tvar u = ((x - x1) * (x2 - x1) + (y - y1) * (y2 - y1)) / (length * length);\n\t\tif (JSM.IsLower (u, 0.0) || JSM.IsGreater (u, 1.0)) {\n\t\t\treturn JSM.CoordSectorPosition2D.CoordOutsideOfSector;\n\t\t}\n\n\t\tvar ux = x1 + u * (x2 - x1);\n\t\tvar uy = y1 + u * (y2 - y1);\n\t\tif (!JSM.IsEqual (ux, x) || !JSM.IsEqual (uy, y)) {\n\t\t\treturn JSM.CoordSectorPosition2D.CoordOutsideOfSector;\n\t\t}\n\n\t\tif (JSM.IsEqual (u, 0.0) || JSM.IsEqual (u, 1.0)) {\n\t\t\treturn JSM.CoordSectorPosition2D.CoordOnSectorEndCoord;\n\t\t}\n\n\t\treturn JSM.CoordSectorPosition2D.CoordInsideOfSector;\n\t};\n\n\t/**\n\t* Function: Sector2D.SectorPosition\n\t* Description: Calculates the position of the sector and the given sector.\n\t* Parameters:\n\t*\tsector {Sector2D} the sector\n\t*\tintersection {Coord2D} (out) the intersection point if it exists\n\t* Returns:\n\t*\t{SectorSectorPosition2D} the result\n\t*/\n\tJSM.Sector2D.prototype.SectorPosition = function (sector, intersection)\n\t{\n\t\tfunction IsOnSegment (beg, end, coord)\n\t\t{\n\t\t\tif (!coord.IsEqual (beg) && !coord.IsEqual (end) &&\n\t\t\t\tJSM.IsLowerOrEqual (coord.x, Math.max (beg.x, end.x)) &&\n\t\t\t\tJSM.IsLowerOrEqual (coord.y, Math.max (beg.y, end.y)) &&\n\t\t\t\tJSM.IsGreaterOrEqual (coord.x, Math.min (beg.x, end.x)) &&\n\t\t\t\tJSM.IsGreaterOrEqual (coord.y, Math.min (beg.y, end.y)))\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tvar calcIntersection = (intersection !== undefined && intersection !== null);\n\t\t\n\t\tvar aBeg = this.beg;\n\t\tvar aEnd = this.end;\n\t\tvar bBeg = sector.beg;\n\t\tvar bEnd = sector.end;\n\t\t\n\t\tvar equalBeg = aBeg.IsEqual (bBeg) || aBeg.IsEqual (bEnd);\n\t\tvar equalEnd = aEnd.IsEqual (bBeg) || aEnd.IsEqual (bEnd);\n\t\tif (equalBeg && equalEnd) {\n\t\t\treturn JSM.SectorSectorPosition2D.SectorsIntersectCoincident;\n\t\t}\n\n\t\tvar x1 = aBeg.x;\n\t\tvar y1 = aBeg.y;\n\t\tvar x2 = aEnd.x;\n\t\tvar y2 = aEnd.y;\n\t\tvar x3 = bBeg.x;\n\t\tvar y3 = bBeg.y;\n\t\tvar x4 = bEnd.x;\n\t\tvar y4 = bEnd.y;\n\n\t\tvar numeratorA = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);\n\t\tvar numeratorB = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);\n\t\tvar denominator = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\n\t\tif (JSM.IsZero (denominator)) {\n\t\t\tif (JSM.IsZero (numeratorA) && JSM.IsZero (numeratorB)) {\n\t\t\t\tif (IsOnSegment (aBeg, aEnd, bBeg) ||\n\t\t\t\t\tIsOnSegment (aBeg, aEnd, bEnd) ||\n\t\t\t\t\tIsOnSegment (bBeg, bEnd, aBeg) ||\n\t\t\t\t\tIsOnSegment (bBeg, bEnd, aEnd))\n\t\t\t\t{\n\t\t\t\t\treturn JSM.SectorSectorPosition2D.SectorsIntersectCoincident;\n\t\t\t\t} else if (equalBeg) {\n\t\t\t\t\tif (calcIntersection) {\n\t\t\t\t\t\tintersection.x = aBeg.x;\n\t\t\t\t\t\tintersection.y = aBeg.y;\n\t\t\t\t\t}\n\t\t\t\t\treturn JSM.SectorSectorPosition2D.SectorsIntersectEndPoint;\n\t\t\t\t} else if (equalEnd) {\n\t\t\t\t\tif (calcIntersection) {\n\t\t\t\t\t\tintersection.x = aEnd.x;\n\t\t\t\t\t\tintersection.y = aEnd.y;\n\t\t\t\t\t}\n\t\t\t\t\treturn JSM.SectorSectorPosition2D.SectorsIntersectEndPoint;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn JSM.SectorSectorPosition2D.SectorsDontIntersect;\n\t\t}\n\t\t\n\t\tvar distA = numeratorA / denominator;\n\t\tvar distB = numeratorB / denominator;\n\t\tif (JSM.IsLower (distA, 0.0) || JSM.IsGreater (distA, 1.0) ||\n\t\t\tJSM.IsLower (distB, 0.0) || JSM.IsGreater (distB, 1.0))\n\t\t{\n\t\t\treturn JSM.SectorSectorPosition2D.SectorsDontIntersect;\n\t\t}\n\n\t\tif (equalBeg) {\n\t\t\tif (calcIntersection) {\n\t\t\t\tintersection.x = aBeg.x;\n\t\t\t\tintersection.y = aBeg.y;\n\t\t\t}\n\t\t\treturn JSM.SectorSectorPosition2D.SectorsIntersectEndPoint;\n\t\t} else if (equalEnd) {\n\t\t\tif (calcIntersection) {\n\t\t\t\tintersection.x = aEnd.x;\n\t\t\t\tintersection.y = aEnd.y;\n\t\t\t}\n\t\t\treturn JSM.SectorSectorPosition2D.SectorsIntersectEndPoint;\n\t\t}\n\t\t\n\t\tif (calcIntersection) {\n\t\t\tintersection.x = x1 + distA * (x2 - x1);\n\t\t\tintersection.y = y1 + distA * (y2 - y1);\n\t\t}\n\t\treturn JSM.SectorSectorPosition2D.SectorsIntersectOnePoint;\n\t};\n\n\t/**\n\t* Function: Sector2D.ProjectCoord\n\t* Description: Calculates the projected coordinate of the given coordinate.\n\t* Parameters:\n\t*\tcoord {Coord2D} the coordinate\n\t* Returns:\n\t*\t{Coord2D} the projected coordinate\n\t*/\n\tJSM.Sector2D.prototype.ProjectCoord = function (coord)\n\t{\n\t\tvar x = coord.x;\n\t\tvar y = coord.y;\n\n\t\tvar beg = this.beg;\n\t\tvar end = this.end;\n\t\tvar x1 = beg.x;\n\t\tvar y1 = beg.y;\n\t\tvar x2 = end.x;\n\t\tvar y2 = end.y;\n\n\t\tvar denom = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);\n\t\tif (JSM.IsZero (denom)) {\n\t\t\treturn beg.Clone ();\n\t\t}\n\n\t\tvar u = ((x2 - x1) * (x - x1) + (y2 - y1) * (y - y1)) / denom;\n\t\tif (JSM.IsLower (u, 0.0)) {\n\t\t\treturn beg.Clone ();\n\t\t} else if (JSM.IsGreater (u, 1.0)) {\n\t\t\treturn end.Clone ();\n\t\t}\n\t\t\n\t\tvar dir = JSM.CoordSub2D (end, beg).MultiplyScalar (u);\n\t\tvar result = JSM.CoordAdd2D (beg, dir);\n\t\treturn result;\n\t};\n\n\t/**\n\t* Function: Sector2D.Clone\n\t* Description: Clones the sector.\n\t* Returns:\n\t*\t{Sector2D} a cloned instance\n\t*/\n\tJSM.Sector2D.prototype.Clone = function ()\n\t{\n\t\treturn new JSM.Sector2D (this.beg.Clone (), this.end.Clone ());\n\t};\n\n\t/**\n\t* Class: Sector\n\t* Description: Represents a 3D sector.\n\t* Parameters:\n\t*\tbeg {Coord} the beginning coordinate\n\t*\tend {Coord} the ending coordinate\n\t*/\n\tJSM.Sector = function (beg, end)\n\t{\n\t\tthis.beg = beg;\n\t\tthis.end = end;\n\t};\n\n\t/**\n\t* Function: Sector.Set\n\t* Description: Sets the sector.\n\t* Parameters:\n\t*\tbeg {Coord} the beginning coordinate\n\t*\tend {Coord} the ending coordinate\n\t*/\n\tJSM.Sector.prototype.Set = function (beg, end)\n\t{\n\t\tthis.beg = beg;\n\t\tthis.end = end;\n\t};\n\n\t/**\n\t* Function: Sector.GetLength\n\t* Description: Returns the length of the sector.\n\t* Returns:\n\t*\t{number} the result\n\t*/\n\tJSM.Sector.prototype.GetLength = function ()\n\t{\n\t\treturn this.beg.DistanceTo (this.end);\n\t};\n\n\t/**\n\t* Function: Sector.CoordPosition\n\t* Description: Calculates the position of the sector and the given coordinate.\n\t* Parameters:\n\t*\tcoord {Coord} the coordinate\n\t* Returns:\n\t*\t{CoordSectorPosition} the result\n\t*/\n\tJSM.Sector.prototype.CoordPosition = function (coord)\n\t{\n\t\tvar x = coord.x;\n\t\tvar y = coord.y;\n\t\tvar z = coord.z;\n\n\t\tvar a = this.beg;\n\t\tvar b = JSM.CoordSub (this.end, this.beg);\n\t\t\n\t\tvar x1 = a.x;\n\t\tvar y1 = a.y;\n\t\tvar z1 = a.z;\n\t\tvar x2 = a.x + b.x;\n\t\tvar y2 = a.y + b.y;\n\t\tvar z2 = a.z + b.z;\n\n\t\tvar denom = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1) + (z2 - z1) * (z2 - z1);\n\t\tif (JSM.IsZero (denom)) {\n\t\t\tif (a.IsEqual (coord)) {\n\t\t\t\treturn JSM.CoordSectorPosition.CoordOnSectorEndCoord;\n\t\t\t}\n\t\t\treturn JSM.CoordSectorPosition.CoordOutsideOfSector;\n\t\t}\n\n\t\tvar u = ((x2 - x1) * (x - x1) + (y2 - y1) * (y - y1) + (z2 - z1) * (z - z1)) / denom;\n\t\tvar bu = b.Clone ().MultiplyScalar (u);\n\t\tvar c = JSM.CoordAdd (a, bu);\n\t\tvar distance = coord.DistanceTo (c);\n\t\tif (JSM.IsZero (distance)) {\n\t\t\tif (JSM.IsLower (u, 0.0) || JSM.IsGreater (u, 1.0)) {\n\t\t\t\treturn JSM.CoordSectorPosition.CoordOutsideOfSector;\n\t\t\t} else if (JSM.IsEqual (u, 0.0) || JSM.IsEqual (u, 1.0)) {\n\t\t\t\treturn JSM.CoordSectorPosition.CoordOnSectorEndCoord;\n\t\t\t}\n\t\t\treturn JSM.CoordSectorPosition.CoordInsideOfSector;\n\t\t}\n\n\t\treturn JSM.CoordSectorPosition.CoordOutsideOfSector;\n\t};\n\n\t/**\n\t* Function: Sector.Clone\n\t* Description: Clones the sector.\n\t* Returns:\n\t*\t{Sector} a cloned instance\n\t*/\n\tJSM.Sector.prototype.Clone = function ()\n\t{\n\t\treturn new JSM.Sector (this.beg.Clone (), this.end.Clone ());\n\t};\n\n\t/**\n\t* Function: GetSectorSegmentation2D\n\t* Description: Returns the segmented coordinates of a sector.\n\t* Parameters:\n\t*\tsector {Sector2D} the sector\n\t*\tsegmentation {integer} the segmentation\n\t* Returns:\n\t*\t{Coord2D[*]} the result coordinates\n\t*/\n\tJSM.GetSectorSegmentation2D = function (sector, segmentation)\n\t{\n\t\tvar direction = JSM.CoordSub2D (sector.end, sector.beg);\n\t\tvar length = sector.beg.DistanceTo (sector.end);\n\t\tvar step = length / segmentation;\n\t\tvar distance = 0.0;\n\n\t\tvar result = [];\n\t\tvar i, offseted;\n\t\tfor (i = 0; i <= segmentation; i++) {\n\t\t\toffseted = sector.beg.Clone ().Offset (direction, distance);\n\t\t\tresult.push (offseted);\n\t\t\tdistance += step;\n\t\t}\n\t\treturn result;\n\t};\n\n\t/**\n\t* Function: GetSectorSegmentation\n\t* Description: Returns the segmented coordinates of a sector.\n\t* Parameters:\n\t*\tsector {Sector} the sector\n\t*\tsegmentation {integer} the segmentation\n\t* Returns:\n\t*\t{Coord[*]} the result coordinates\n\t*/\n\tJSM.GetSectorSegmentation = function (sector, segmentation)\n\t{\n\t\tvar direction = JSM.CoordSub (sector.end, sector.beg);\n\t\tvar length = sector.beg.DistanceTo (sector.end);\n\t\tvar step = length / segmentation;\n\t\tvar distance = 0.0;\n\n\t\tvar result = [];\n\t\tvar i, offseted;\n\t\tfor (i = 0; i <= segmentation; i++) {\n\t\t\toffseted = sector.beg.Clone ().Offset (direction, distance);\n\t\t\tresult.push (offseted);\n\t\t\tdistance += step;\n\t\t}\n\t\treturn result;\n\t};\n\n\treturn JSM;\n});\n"]}