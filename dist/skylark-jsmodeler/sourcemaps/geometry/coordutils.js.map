{"version":3,"sources":["geometry/coordutils.js"],"names":["define","JSM","Orientation","Invalid","CounterClockwise","Clockwise","MidCoord2D","a","b","Coord2D","x","y","CoordOrientation2D","c","m00","m01","m10","m11","m20","m21","determinant","IsPositive","IsNegative","CoordSignedDistance2D","direction","abDirection","CoordSub2D","distance","DistanceTo","angle","AngleTo","PolarToCartesian","radius","theta","result","Math","cos","sin","GetArcLengthFromAngle","GetAngleFromArcLength","arcLength","IsEqual","MidCoord","Coord","z","CoordSignedDistance","CoordSub","GetVectorsFullAngle","normal","origo","CoordOrientation","PI","a2","ToCoord2D","b2","c2","orientation","zNormal","Vector","SphericalToCartesian","phi","CylindricalToCartesian","height","GetArcLength","GetFullArcLength","CalculateCentroid","coords","count","length","centroid","i","CoordAdd","MultiplyScalar","CalculateTriangleNormal","v0","v1","v2","v","w","Normalize","CalculateNormal","nextIndex","current","next","BarycentricInterpolation","vertex0","vertex1","vertex2","value0","value1","value2","position","GetTriangleArea","s","areaSquare","sqrt","edge0","edge1","edge2","distance0","distance1","distance2","area","IsZero","area0","area1","area2","interpolated0","Clone","interpolated1","interpolated2","interpolated"],"mappings":"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","file":"../../geometry/coordutils.js","sourcesContent":["define([\"../core/jsm\"],function(JSM){\n\t/**\n\t* Enum: Orientation\n\t* Description: Orientation of coordinates.\n\t* Values:\n\t*\t{Invalid} invalid orientation or collinear\n\t*\t{CounterClockwise} counter clockwise orientation\n\t*\t{Clockwise} clockwise orientation\n\t*/\n\tJSM.Orientation = {\n\t\tInvalid : 0,\n\t\tCounterClockwise : 1,\n\t\tClockwise : 2\n\t};\n\n\t/**\n\t* Function: MidCoord2D\n\t* Description: Calculates the coordinate in the middle of two coordinates.\n\t* Parameters:\n\t*\ta {Coord2D} first coordinate\n\t*\tb {Coord2D} second coordinate\n\t* Returns:\n\t*\t{Coord2D} the result\n\t*/\n\tJSM.MidCoord2D = function (a, b)\n\t{\n\t\treturn new JSM.Coord2D ((a.x + b.x) / 2.0, (a.y + b.y) / 2.0);\n\t};\n\n\t/**\n\t* Function: CoordOrientation2D\n\t* Description: Calculates the turn type of three coordinates.\n\t* Parameters:\n\t*\ta {Coord2D} the first coordinate\n\t*\tb {Coord2D} the second coordinate\n\t*\tc {Coord2D} the third coordinate\n\t* Returns:\n\t*\t{Orientation} the result\n\t*/\n\tJSM.CoordOrientation2D = function (a, b, c)\n\t{\n\t\tvar m00 = a.x;\n\t\tvar m01 = a.y;\n\t\tvar m10 = b.x;\n\t\tvar m11 = b.y;\n\t\tvar m20 = c.x;\n\t\tvar m21 = c.y;\n\t    \n\t\tvar determinant = m00 * m11 + m01 * m20 + m10 * m21 - m11 * m20 - m01 * m10 - m00 * m21;\n\t\tif (JSM.IsPositive (determinant)) {\n\t\t\treturn JSM.Orientation.CounterClockwise;\n\t\t} else if (JSM.IsNegative (determinant)) {\n\t\t\treturn JSM.Orientation.Clockwise;\n\t\t}\n\t\t\n\t\treturn JSM.Orientation.Invalid;\t\n\t};\n\n\t/**\n\t* Function: CoordSignedDistance2D\n\t* Description: Calculates the distance of two coordinates along a direction vector.\n\t* Parameters:\n\t*\ta {Coord2D} first coordinate\n\t*\tb {Coord2D} second coordinate\n\t*\tdirection {Vector2D} direction vector\n\t* Returns:\n\t*\t{number} the result\n\t*/\n\tJSM.CoordSignedDistance2D = function (a, b, direction)\n\t{\n\t\tvar abDirection = JSM.CoordSub2D (b, a);\n\t\tvar distance = a.DistanceTo (b);\n\t\t\n\t\tvar angle = abDirection.AngleTo (direction);\n\t\tif (JSM.IsPositive (angle)) {\n\t\t\tdistance = -distance;\n\t\t}\n\n\t\treturn distance;\n\t};\n\n\t/**\n\t* Function: PolarToCartesian\n\t* Description: Converts a polar coordinate to a cartesian coordinate.\n\t* Parameters:\n\t*\tradius {number} the radius component\n\t*\ttheta {number} the angle component\n\t* Returns:\n\t*\t{Coord2D} the result\n\t*/\n\tJSM.PolarToCartesian = function (radius, theta)\n\t{\n\t\tvar result = new JSM.Coord2D (0.0, 0.0);\n\t\tresult.x = radius * Math.cos (theta);\n\t\tresult.y = radius * Math.sin (theta);\n\t\treturn result;\n\t};\n\n\t/**\n\t* Function: GetArcLengthFromAngle\n\t* Description: Calculates arc length from radius and angle.\n\t* Parameters:\n\t*\tradius {number} the radius of the circle\n\t*\ttheta {number} the angle of rotation\n\t* Returns:\n\t*\t{number} the result\n\t*/\n\tJSM.GetArcLengthFromAngle = function (radius, theta)\n\t{\n\t\treturn theta * radius;\n\t};\n\n\t/**\n\t* Function: GetAngleFromArcLength\n\t* Description: Calculates angle from arc length.\n\t* Parameters:\n\t*\tradius {number} the radius of the circle\n\t*\tarcLength {number} the arc length\n\t* Returns:\n\t*\t{number} the result\n\t*/\n\tJSM.GetAngleFromArcLength = function (radius, arcLength)\n\t{\n\t\tif (JSM.IsEqual (radius, 0.0)) {\n\t\t\treturn 0.0;\n\t\t}\n\t\t\n\t\treturn arcLength / radius;\n\t};\n\n\t/**\n\t* Function: MidCoord\n\t* Description: Calculates the coordinate in the middle of two coordinates.\n\t* Parameters:\n\t*\ta {Coord} first coordinate\n\t*\tb {Coord} second coordinate\n\t* Returns:\n\t*\t{Coord} the result\n\t*/\n\tJSM.MidCoord = function (a, b)\n\t{\n\t\treturn new JSM.Coord ((a.x + b.x) / 2.0, (a.y + b.y) / 2.0, (a.z + b.z) / 2.0);\n\t};\n\n\t/**\n\t* Function: CoordSignedDistance\n\t* Description: Calculates the distance of two coordinates along a direction vector.\n\t* Parameters:\n\t*\ta {Coord} first coordinate\n\t*\tb {Coord} second coordinate\n\t*\tdirection {Vector} direction vector\n\t* Returns:\n\t*\t{number} the result\n\t*/\n\tJSM.CoordSignedDistance = function (a, b, direction)\n\t{\n\t\tvar abDirection = JSM.CoordSub (b, a);\n\t\tvar distance = a.DistanceTo (b);\n\t\t\n\t\tvar angle = abDirection.AngleTo (direction);\n\t\tif (JSM.IsPositive (angle)) {\n\t\t\tdistance = -distance;\n\t\t}\n\n\t\treturn distance;\n\t};\n\n\t/**\n\t* Function: GetVectorsFullAngle\n\t* Description: Calculates the full angle (0 to pi) of two vectors with the given normal vector.\n\t* Parameters:\n\t*\ta {Vector} the first vector\n\t*\tb {Vector} the second vector\n\t*\tnormal {Vector} the normal vector\n\t* Returns:\n\t*\t{number} the result\n\t*/\n\tJSM.GetVectorsFullAngle = function (a, b, normal)\n\t{\n\t\tvar angle = a.AngleTo (b);\n\t\tvar origo = new JSM.Coord (0.0, 0.0, 0.0);\n\t\t\n\t\tif (JSM.CoordOrientation (a, origo, b, normal) == JSM.Orientation.Clockwise) {\n\t\t\tangle = 2.0 * Math.PI - angle;\n\t\t}\n\t\t\n\t\treturn angle;\n\t};\n\n\t/**\n\t* Function: CoordOrientation\n\t* Description: Calculates the turn type of three coordinates.\n\t* Parameters:\n\t*\ta {Coord} the first coordinate\n\t*\tb {Coord} the second coordinate\n\t*\tc {Coord} the third coordinate\n\t*\tnormal {Vector} normal vector for calculation\n\t* Returns:\n\t*\t{Orientation} the result\n\t*/\n\tJSM.CoordOrientation = function (a, b, c, normal)\n\t{\n\t\tvar a2 = a.ToCoord2D (normal);\n\t\tvar b2 = b.ToCoord2D (normal);\n\t\tvar c2 = c.ToCoord2D (normal);\n\t\tvar orientation = JSM.CoordOrientation2D (a2, b2, c2);\n\n\t\tvar zNormal = new JSM.Vector (0.0, 0.0, 1.0);\n\t\tvar angle = normal.AngleTo (zNormal);\n\t\tif (JSM.IsEqual (angle, Math.PI)) {\n\t\t\tif (orientation == JSM.Orientation.CounterClockwise) {\n\t\t\t\torientation = JSM.Orientation.Clockwise;\n\t\t\t} else if (orientation == JSM.Orientation.Clockwise) {\n\t\t\t\torientation = JSM.Orientation.CounterClockwise;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn orientation;\n\t};\n\n\t/**\n\t* Function: SphericalToCartesian\n\t* Description: Converts a spherical coordinate to a cartesian coordinate.\n\t* Parameters:\n\t*\tradius {number} the radius component\n\t*\ttheta {number} the angle component\n\t*\tphi {number} the phi component\n\t* Returns:\n\t*\t{Coord} the result\n\t*/\n\tJSM.SphericalToCartesian = function (radius, theta, phi)\n\t{\n\t\tvar result = new JSM.Coord (0.0, 0.0, 0.0);\n\t\tresult.x = radius * Math.sin (theta) * Math.cos (phi);\n\t\tresult.y = radius * Math.sin (theta) * Math.sin (phi);\n\t\tresult.z = radius * Math.cos (theta);\n\t\treturn result;\n\t};\n\n\t/**\n\t* Function: CylindricalToCartesian\n\t* Description: Converts a cylindrical coordinate to a cartesian coordinate.\n\t* Parameters:\n\t*\tradius {number} the radius component\n\t*\theight {number} the height component\n\t*\ttheta {number} the theta component\n\t* Returns:\n\t*\t{Coord} the result\n\t*/\n\tJSM.CylindricalToCartesian = function (radius, height, theta)\n\t{\n\t\tvar result = new JSM.Coord (0.0, 0.0, 0.0);\n\t\tresult.x = radius * Math.cos (theta);\n\t\tresult.y = radius * Math.sin (theta);\n\t\tresult.z = height;\n\t\treturn result;\n\t};\n\n\t/**\n\t* Function: GetArcLength\n\t* Description: Calculates arc length between two vectors.\n\t* Parameters:\n\t*\ta {Vector} the first vector\n\t*\tb {Vector} the second vector\n\t*\tradius {number} the radius component\n\t* Returns:\n\t*\t{number} the result\n\t*/\n\tJSM.GetArcLength = function (a, b, radius)\n\t{\n\t\tvar angle = a.AngleTo (b);\n\t\treturn angle * radius;\n\t};\n\n\t/**\n\t* Function: GetFullArcLength\n\t* Description: Calculates arc length between two vectors with the given normal vector.\n\t* Parameters:\n\t*\ta {Vector} the first vector\n\t*\tb {Vector} the second vector\n\t*\tradius {number} the radius component\n\t*\tnormal {Vector} the normal vector\n\t* Returns:\n\t*\t{number} the result\n\t*/\n\tJSM.GetFullArcLength = function (a, b, radius, normal)\n\t{\n\t\tvar angle = JSM.GetVectorsFullAngle (a, b, normal);\n\t\treturn angle * radius;\n\t};\n\n\t/**\n\t* Function: CalculateCentroid\n\t* Description: Calculates center points of the given coordinates.\n\t* Parameters:\n\t*\tcoords {Coord[*]} the array of coordinates\n\t* Returns:\n\t*\t{Coord} the result\n\t*/\n\tJSM.CalculateCentroid = function (coords)\n\t{\n\t\tvar count = coords.length;\n\t\tvar centroid = new JSM.Coord (0.0, 0.0, 0.0);\n\t\tif (count >= 1) {\n\t\t\tvar i;\n\t\t\tfor (i = 0; i < count; i++) {\n\t\t\t\tcentroid = JSM.CoordAdd (centroid, coords[i]);\n\t\t\t}\n\t\t\tcentroid.MultiplyScalar (1.0 / count);\n\t\t}\n\n\t\treturn centroid;\n\t};\n\n\t/**\n\t* Function: CalculateTriangleNormal\n\t* Description: Calculates normal vector for the given triangle vertices.\n\t* Parameters:\n\t*\tv0 {Coord} the first vertex of the triangle\n\t*\tv1 {Coord} the second vertex of the triangle\n\t*\tv2 {Coord} the third vertex of the triangle\n\t* Returns:\n\t*\t{Vector} the result\n\t*/\n\tJSM.CalculateTriangleNormal = function (v0, v1, v2)\n\t{\n\t\tvar v = JSM.CoordSub (v1, v0);\n\t\tvar w = JSM.CoordSub (v2, v0);\n\t\t\n\t\tvar normal = new JSM.Vector (0.0, 0.0, 0.0);\n\t\tnormal.x = (v.y * w.z - v.z * w.y);\n\t\tnormal.y = (v.z * w.x - v.x * w.z);\n\t\tnormal.z = (v.x * w.y - v.y * w.x);\n\n\t\tnormal.Normalize ();\n\t\treturn normal;\n\t};\n\n\t/**\n\t* Function: CalculateNormal\n\t* Description: Calculates normal vector for the given coordinates.\n\t* Parameters:\n\t*\tcoords {Coord[*]} the array of coordinates\n\t* Returns:\n\t*\t{Vector} the result\n\t*/\n\tJSM.CalculateNormal = function (coords)\n\t{\n\t\tvar count = coords.length;\n\t\tvar normal = new JSM.Vector (0.0, 0.0, 0.0);\n\t\tif (count >= 3) {\n\t\t\tvar i, currentIndex, nextIndex;\n\t\t\tvar current, next;\n\t\t\tfor (i = 0; i < count; i++) {\n\t\t\t\tcurrentIndex = i % count;\n\t\t\t\tnextIndex = (i + 1) % count;\n\t\t\n\t\t\t\tcurrent = coords[currentIndex];\n\t\t\t\tnext = coords[nextIndex];\n\t\t\n\t\t\t\tnormal.x += (current.y - next.y) * (current.z + next.z);\n\t\t\t\tnormal.y += (current.z - next.z) * (current.x + next.x);\n\t\t\t\tnormal.z += (current.x - next.x) * (current.y + next.y);\n\t\t\t}\n\t\t}\n\n\t\tnormal.Normalize ();\n\t\treturn normal;\n\t};\n\n\t/**\n\t* Function: BarycentricInterpolation\n\t* Description: Calculates barycentric interpolation for the given values.\n\t* Parameters:\n\t*\tvertex0, vertex1, vertex2 {Coord} the vertices of interpolation\n\t*\tvalue0, value1, value2 {Coord} the values to interpolate\n\t*\tposition {Coord} the position of interpolation\n\t* Returns:\n\t*\t{Coord} the result\n\t*/\n\tJSM.BarycentricInterpolation = function (vertex0, vertex1, vertex2, value0, value1, value2, position)\n\t{\n\t\tfunction GetTriangleArea (a, b, c)\n\t\t{\n\t\t\tvar s = (a + b + c) / 2.0;\n\t\t\tvar areaSquare = s * (s - a) * (s - b) * (s - c);\n\t\t\tif (areaSquare < 0.0) {\n\t\t\t\treturn 0.0;\n\t\t\t}\n\t\t\treturn Math.sqrt (areaSquare);\n\t\t}\n\t\t\n\t\tvar edge0 = vertex0.DistanceTo (vertex1);\n\t\tvar edge1 = vertex1.DistanceTo (vertex2);\n\t\tvar edge2 = vertex2.DistanceTo (vertex0);\n\t\t\n\t\tvar distance0 = vertex0.DistanceTo (position);\n\t\tvar distance1 = vertex1.DistanceTo (position);\n\t\tvar distance2 = vertex2.DistanceTo (position);\n\t\t\n\t\tvar area = GetTriangleArea (edge0, edge1, edge2);\n\t\tif (JSM.IsZero (area)) {\n\t\t\treturn value0;\n\t\t}\n\t\t\n\t\tvar area0 = GetTriangleArea (edge0, distance0, distance1);\n\t\tvar area1 = GetTriangleArea (edge1, distance1, distance2);\n\t\tvar area2 = GetTriangleArea (edge2, distance0, distance2);\n\t\t\n\t\tvar interpolated0 = value0.Clone ().MultiplyScalar (area1);\n\t\tvar interpolated1 = value1.Clone ().MultiplyScalar (area2);\n\t\tvar interpolated2 = value2.Clone ().MultiplyScalar (area0);\n\t\tvar interpolated = JSM.CoordAdd (JSM.CoordAdd (interpolated0, interpolated1), interpolated2);\n\t\tinterpolated.MultiplyScalar (1.0 / area);\n\t\treturn interpolated;\n\t};\n\n\treturn JSM;\n});\n"]}