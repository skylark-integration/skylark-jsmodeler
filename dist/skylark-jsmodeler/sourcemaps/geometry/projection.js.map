{"version":3,"sources":["geometry/projection.js"],"names":["define","JSM","MatrixView","eye","center","up","IsEqual","MatrixIdentity","result","d","CoordSub","Normalize","v","VectorCross","u","x","y","z","VectorDot","MatrixPerspective","fieldOfView","aspectRatio","nearPlane","farPlane","f","Math","tan","nf","Project","coord","viewPort","input","viewMatrix","perspectiveMatrix","projectionMatrix","MatrixMultiply","output","MatrixVectorMultiply","denom","IsZero","Coord","Unproject","inverseMatrix","MatrixInvert"],"mappings":"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","file":"../../geometry/projection.js","sourcesContent":["define([\"../core/jsm\"],function(JSM){\n\t/**\n\t* Function: MatrixView\n\t* Description: Creates a view matrix.\n\t* Parameters:\n\t*\teye {Coord} eye position\n\t*\tcenter {Coord} center position\n\t*\tup {Vector} up vector\n\t* Returns:\n\t*\t{number[16]} the result matrix\n\t*/\n\tJSM.MatrixView = function (eye, center, up)\n\t{\n\t\tif (eye.IsEqual (center)) {\n\t\t\treturn JSM.MatrixIdentity ();\n\t\t}\n\t\t\n\t\tvar result = [];\n\n\t\tvar d = JSM.CoordSub (eye, center).Normalize ();\n\t\tvar v = JSM.VectorCross (up, d).Normalize ();\n\t\tvar u = JSM.VectorCross (d, v).Normalize ();\n\n\t\tresult[0] = v.x;\n\t\tresult[1] = u.x;\n\t\tresult[2] = d.x;\n\t\tresult[3] = 0.0;\n\t\tresult[4] = v.y;\n\t\tresult[5] = u.y;\n\t\tresult[6] = d.y;\n\t\tresult[7] = 0.0;\n\t\tresult[8] = v.z;\n\t\tresult[9] = u.z;\n\t\tresult[10] = d.z;\n\t\tresult[11] = 0.0;\n\t\tresult[12] = -JSM.VectorDot (v, eye);\n\t\tresult[13] = -JSM.VectorDot (u, eye);\n\t\tresult[14] = -JSM.VectorDot (d, eye);\n\t\tresult[15] = 1.0;\n\t\t\n\t\treturn result;\n\t};\n\n\t/**\n\t* Function: MatrixPerspective\n\t* Description: Creates a perspective matrix.\n\t* Parameters:\n\t*\tfieldOfView {number} field of view\n\t*\taspectRatio {number} aspect ratio\n\t*\tnearPlane {number} near clipping plane\n\t*\tfarPlane {number} far clipping plane\n\t* Returns:\n\t*\t{number[16]} the result matrix\n\t*/\n\tJSM.MatrixPerspective = function (fieldOfView, aspectRatio, nearPlane, farPlane)\n\t{\n\t\tvar result = [];\n\t\t\n\t\tvar f = 1.0 / Math.tan (fieldOfView / 2.0);\n\t\tvar nf = 1.0 / (nearPlane - farPlane);\n\t\t\n\t\tresult[0] = f / aspectRatio;\n\t\tresult[1] = 0.0;\n\t\tresult[2] = 0.0;\n\t\tresult[3] = 0.0;\n\t\tresult[4] = 0.0;\n\t\tresult[5] = f;\n\t\tresult[6] = 0.0;\n\t\tresult[7] = 0.0;\n\t\tresult[8] = 0.0;\n\t\tresult[9] = 0.0;\n\t\tresult[10] = (farPlane + nearPlane) * nf;\n\t\tresult[11] = -1.0;\n\t\tresult[12] = 0.0;\n\t\tresult[13] = 0.0;\n\t\tresult[14] = (2.0 * farPlane * nearPlane) * nf;\n\t\tresult[15] = 0.0;\n\t\t\n\t\treturn result;\n\t};\n\n\t/**\n\t* Function: Project\n\t* Description: Projects a 3D coordinate to 2D.\n\t* Parameters:\n\t*\tcoord {Coord} the coordinate\n\t*\teye {Coord} the eye of the camera\n\t*\tcenter {Coord} the center of the camera\n\t*\tup {Vector} the up vector of the camera\n\t*\tfieldOfView {number} camera field of view\n\t*\taspectRatio {number} aspect ratio of the desired image\n\t*\tnearPlane {number} near cutting plane distance\n\t*\tfarPlane {number} far cutting plane distance\n\t*\tviewPort {number[4]} view port coordinates in pixels\n\t* Returns:\n\t*\t{Coord} the result\n\t*/\n\tJSM.Project = function (coord, eye, center, up, fieldOfView, aspectRatio, nearPlane, farPlane, viewPort)\n\t{\n\t\tvar input = [\n\t\t\tcoord.x,\n\t\t\tcoord.y,\n\t\t\tcoord.z,\n\t\t\t1.0\n\t\t];\n\n\t\tvar viewMatrix = JSM.MatrixView (eye, center, up);\n\t\tvar perspectiveMatrix = JSM.MatrixPerspective (fieldOfView, aspectRatio, nearPlane, farPlane);\n\t\tvar projectionMatrix = JSM.MatrixMultiply (viewMatrix, perspectiveMatrix);\n\t\tvar output = JSM.MatrixVectorMultiply (projectionMatrix, input);\n\t\tvar denom = output[3];\n\t\tif (JSM.IsZero (denom)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tvar result = new JSM.Coord (0.0, 0.0, 0.0);\n\t\tresult.x = (output[0] / denom * 0.5 + 0.5) * viewPort[2] + viewPort[0];\n\t\tresult.y = (output[1] / denom * 0.5 + 0.5) * viewPort[3] + viewPort[1];\n\t\tresult.z = (output[2] / denom * 0.5 + 0.5);\n\t\treturn result;\t\n\t};\n\n\t/**\n\t* Function: Unproject\n\t* Description: Projects a 2D coordinate to 3D.\n\t* Parameters:\n\t*\tcoord {Coord} the coordinate (the z component can be zero)\n\t*\teye {Coord} the eye of the camera\n\t*\tcenter {Coord} the center of the camera\n\t*\tup {Vector} the up vector of the camera\n\t*\tfieldOfView {number} camera field of view\n\t*\taspectRatio {number} aspect ratio of the desired image\n\t*\tnearPlane {number} near cutting plane distance\n\t*\tfarPlane {number} far cutting plane distance\n\t*\tviewPort {number[4]} view port coordinates in pixels\n\t* Returns:\n\t*\t{Coord} the result\n\t*/\n\tJSM.Unproject = function (coord, eye, center, up, fieldOfView, aspectRatio, nearPlane, farPlane, viewPort)\n\t{\n\t\tvar input = [\n\t\t\t(coord.x - viewPort[0]) / viewPort[2] * 2.0 - 1.0,\n\t\t\t(coord.y - viewPort[1]) / viewPort[3] * 2.0 - 1.0,\n\t\t\t2.0 * coord.z - 1,\n\t\t\t1.0\n\t\t];\n\t\t\n\t\tvar viewMatrix = JSM.MatrixView (eye, center, up);\n\t\tvar perspectiveMatrix = JSM.MatrixPerspective (fieldOfView, aspectRatio, nearPlane, farPlane);\n\t\tvar projectionMatrix = JSM.MatrixMultiply (viewMatrix, perspectiveMatrix);\n\t\tvar inverseMatrix = JSM.MatrixInvert (projectionMatrix);\n\t\tvar output = JSM.MatrixVectorMultiply (inverseMatrix, input);\n\t\tvar denom = output[3];\n\t\tif (JSM.IsZero (denom)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tvar result = new JSM.Coord (0.0, 0.0, 0.0);\n\t\tresult.x = (output[0] / output[3]);\n\t\tresult.y = (output[1] / output[3]);\n\t\tresult.z = (output[2] / output[3]);\n\t\treturn result;\n\t};\n\n\treturn JSM;\n});\n"]}