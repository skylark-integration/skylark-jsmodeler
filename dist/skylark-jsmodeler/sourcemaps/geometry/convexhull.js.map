{"version":3,"sources":["geometry/convexhull.js"],"names":["define","JSM","ConvexHull2D","coords","FindNextCoord","current","i","count","length","next","CoordOrientation2D","Orientation","Clockwise","result","first","minValue","Inf","minIndex","x","IsLower","FindLeftMostCoord","push","ConvexHull3D","AddVertex","body","coord","vertex","this","position","vertices","AddEdge","triangleIndex","a","b","edgeIndex","edges","vert1","vert2","newEdge","tri1","tri2","edge","AddTriangle","c","triangles","edge1","edge2","edge3","triangle","valid","RemoveTriangleFromEdge","RemoveTriangle","CheckTetrahedronOrientation","d","aCoord","bCoord","cCoord","dCoord","adSub","CoordSub","bdSub","cdSub","VectorDot","VectorCross","GetTetrahedronVolume","AddCoordToHull","index","edge1Vis","edge2Vis","edge3Vis","visibleTriangles","newTriangle","newTriangles","AddInitialTetrahedron"],"mappings":"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","file":"../../geometry/convexhull.js","sourcesContent":["define([\"../core/jsm\"],function(JSM){\n\t/**\n\t* Function: ConvexHull2D\n\t* Description: Calculates the 2D convex hull from the given coordinates.\n\t* Parameters:\n\t*\tcoords {Coord2D[*]} the coordinate array\n\t* Returns:\n\t*\t{Coord2D[*]} coordinate array of the convex hull\n\t*/\n\tJSM.ConvexHull2D = function (coords)\n\t{\n\t\tfunction FindLeftMostCoord (coords)\n\t\t{\n\t\t\tvar count = coords.length;\n\t\t\tvar minValue = JSM.Inf;\n\t\t\tvar minIndex = -1;\n\t\t\n\t\t\tvar i, current;\n\t\t\tfor (i = 0; i < count; i++) {\n\t\t\t\tcurrent = coords[i].x;\n\t\t\t\tif (JSM.IsLower (current, minValue)) {\n\t\t\t\t\tminValue = current;\n\t\t\t\t\tminIndex = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn minIndex;\n\t\t}\n\t\t\n\t\tfunction FindNextCoord (coords, current)\n\t\t{\n\t\t\tvar count = coords.length;\n\t\t\tvar next = 0;\n\t\t\t\n\t\t\tvar i;\n\t\t\tfor (i = 1; i < count; i++) {\n\t\t\t\tif (current == next) {\n\t\t\t\t\tnext = i;\n\t\t\t\t} else {\n\t\t\t\t\tif (JSM.CoordOrientation2D (coords[current], coords[next], coords[i]) == JSM.Orientation.Clockwise) {\n\t\t\t\t\t\tnext = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn next;\n\t\t}\n\n\t\tvar result = [];\n\t\tvar count = coords.length;\n\t\tif (count < 3) {\n\t\t\treturn result;\n\t\t}\n\t\t\n\t\tvar first = FindLeftMostCoord (coords);\n\t\tvar current = first;\n\t\tvar next;\n\t\t\n\t\tdo {\n\t\t\tresult.push (current);\n\t\t\tnext = FindNextCoord (coords, current);\n\t\t\tcurrent = next;\n\t\t} while (next != first);\n\t\t\n\t\treturn result;\n\t};\n\n\t/**\n\t* Function: ConvexHull3D\n\t* Description:\n\t*\tCalculates the 3D convex hull from the given coordinates. The result defines\n\t*\tconvex hull triangles as an array of arrays with three coordinates.\n\t* Parameters:\n\t*\tcoords {Coord[*]} the coordinate array\n\t* Returns:\n\t*\t{Coord[3][*]} the result\n\t*/\n\tJSM.ConvexHull3D = function (coords)\n\t{\n\t\tfunction Vertex ()\n\t\t{\n\t\t\tthis.position = null;\n\t\t}\n\t\t\n\t\tfunction Edge ()\n\t\t{\n\t\t\tthis.vert1 = null;\n\t\t\tthis.vert2 = null;\n\t\t\tthis.tri1 = null;\n\t\t\tthis.tri2 = null;\n\t\t}\n\n\t\tfunction Triangle ()\n\t\t{\n\t\t\tthis.vertices = null;\n\t\t\tthis.edges = null;\n\t\t\tthis.valid = null;\n\t\t}\n\n\t\tfunction Body ()\n\t\t{\n\t\t\tthis.vertices = [];\n\t\t\tthis.edges = [];\n\t\t\tthis.triangles = [];\n\t\t}\n\n\t\tfunction AddVertex (body, coord)\n\t\t{\n\t\t\tvar vertex = new Vertex ();\n\t\t\tvertex.position = coord;\n\t\t\tbody.vertices.push (vertex);\n\t\t\treturn body.vertices.length - 1;\n\t\t}\n\n\t\tfunction AddEdge (body, triangleIndex, a, b)\n\t\t{\n\t\t\tvar edgeIndex = -1;\n\t\t\n\t\t\tvar i, current;\n\t\t\tfor (i = 0; i < body.edges.length; i++) {\n\t\t\t\tcurrent = body.edges[i];\n\t\t\t\tif (current.vert1 == a && current.vert2 == b || current.vert1 == b && current.vert2 == a) {\n\t\t\t\t\tedgeIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (edgeIndex == -1) {\n\t\t\t\tvar newEdge = new Edge ();\n\t\t\t\tnewEdge.vert1 = a;\n\t\t\t\tnewEdge.vert2 = b;\n\t\t\t\tnewEdge.tri1 = -1;\n\t\t\t\tnewEdge.tri2 = -1;\n\t\t\t\tbody.edges.push (newEdge);\n\t\t\t\tedgeIndex = body.edges.length - 1;\n\t\t\t}\n\t\t\t\n\t\t\tvar edge = body.edges[edgeIndex];\n\t\t\tif (edge.tri1 != triangleIndex && edge.tri2 != triangleIndex) {\n\t\t\t\tif (edge.tri1 == -1) {\n\t\t\t\t\tedge.tri1 = triangleIndex;\n\t\t\t\t} else if (edge.tri2 == -1) {\n\t\t\t\t\tedge.tri2 = triangleIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn edgeIndex;\n\t\t}\n\n\t\tfunction AddTriangle (body, a, b, c)\n\t\t{\n\t\t\tvar triangleIndex = body.triangles.length;\n\t\t\tvar edge1 = AddEdge (body, triangleIndex, a, b);\n\t\t\tvar edge2 = AddEdge (body, triangleIndex, b, c);\n\t\t\tvar edge3 = AddEdge (body, triangleIndex, c, a);\n\t\t\t\n\t\t\tvar triangle = new Triangle ();\n\t\t\ttriangle.vertices = [a, b, c];\n\t\t\ttriangle.edges = [edge1, edge2, edge3];\n\t\t\ttriangle.valid = true;\n\t\t\tbody.triangles.push (triangle);\n\t\t\treturn body.triangles.length - 1;\n\t\t}\n\n\t\tfunction RemoveTriangleFromEdge (body, triangleIndex, edgeIndex)\n\t\t{\n\t\t\tvar edge = body.edges[edgeIndex];\n\t\t\tif (edge.tri1 == triangleIndex) {\n\t\t\t\tedge.tri1 = -1;\n\t\t\t} else if (edge.tri2 == triangleIndex) {\n\t\t\t\tedge.tri2 = -1;\n\t\t\t}\n\t\t}\n\n\t\tfunction RemoveTriangle (body, triangleIndex)\n\t\t{\n\t\t\tvar triangle = body.triangles[triangleIndex];\n\t\t\tif (!triangle.valid) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tRemoveTriangleFromEdge (body, triangleIndex, triangle.edges[0]);\n\t\t\tRemoveTriangleFromEdge (body, triangleIndex, triangle.edges[1]);\n\t\t\tRemoveTriangleFromEdge (body, triangleIndex, triangle.edges[2]);\n\t\t\ttriangle.valid = false;\n\t\t}\n\n\t\tfunction GetTetrahedronVolume (body, a, b, c, d)\n\t\t{\n\t\t\tvar aCoord = body.vertices[a].position;\n\t\t\tvar bCoord = body.vertices[b].position;\n\t\t\tvar cCoord = body.vertices[c].position;\n\t\t\tvar dCoord = body.vertices[d].position;\n\t\t\t\n\t\t\tvar adSub = JSM.CoordSub (aCoord, dCoord);\n\t\t\tvar bdSub = JSM.CoordSub (bCoord, dCoord);\n\t\t\tvar cdSub = JSM.CoordSub (cCoord, dCoord);\n\t\t\t\n\t\t\treturn (JSM.VectorDot (adSub, JSM.VectorCross (bdSub, cdSub))) / 6.0;\n\t\t}\n\t\t\n\t\tfunction CheckTetrahedronOrientation (body, a, b, c, d)\n\t\t{\n\t\t\tif (JSM.IsLower (GetTetrahedronVolume (body, a, b, c, d), 0.0)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tfunction AddInitialTetrahedron (body)\n\t\t{\n\t\t\tvar triangleIndex = -1;\n\t\t\tif (CheckTetrahedronOrientation (body, 0, 1, 2, 3)) {\n\t\t\t\ttriangleIndex = AddTriangle (body, 0, 1, 2);\n\t\t\t} else {\n\t\t\t\ttriangleIndex = AddTriangle (body, 0, 2, 1);\n\t\t\t}\n\n\t\t\tvar triangle = body.triangles[triangleIndex];\n\t\t\tAddTriangle (body, triangle.vertices[0], triangle.vertices[2], 3);\n\t\t\tAddTriangle (body, triangle.vertices[2], triangle.vertices[1], 3);\n\t\t\tAddTriangle (body, triangle.vertices[1], triangle.vertices[0], 3);\n\t\t}\n\n\t\tfunction AddCoordToHull (body, index)\n\t\t{\n\t\t\tvar visibleTriangles = [];\n\t\t\t\n\t\t\tvar i, triangle;\n\t\t\tfor (i = 0; i < body.triangles.length; i++) {\n\t\t\t\ttriangle = body.triangles[i];\n\t\t\t\tif (!triangle.valid) {\n\t\t\t\t\tvisibleTriangles.push (false);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (CheckTetrahedronOrientation (body, triangle.vertices[0], triangle.vertices[2], triangle.vertices[1], index)) {\n\t\t\t\t\tvisibleTriangles.push (true);\n\t\t\t\t} else {\n\t\t\t\t\tvisibleTriangles.push (false);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar edge1, edge2, edge3, edge1Vis, edge2Vis, edge3Vis;\n\t\t\tvar newTriangles = [];\n\t\t\tfor (i = 0; i < visibleTriangles.length; i++) {\n\t\t\t\tif (!visibleTriangles[i]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\ttriangle = body.triangles[i];\n\t\t\t\tif (!triangle.valid) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tedge1 = body.edges[triangle.edges[0]];\n\t\t\t\tedge2 = body.edges[triangle.edges[1]];\n\t\t\t\tedge3 = body.edges[triangle.edges[2]];\n\n\t\t\t\tedge1Vis = (edge1.tri1 == -1 || edge1.tri2 == -1 || visibleTriangles[edge1.tri1] != visibleTriangles[edge1.tri2]);\n\t\t\t\tedge2Vis = (edge2.tri1 == -1 || edge2.tri2 == -1 || visibleTriangles[edge2.tri1] != visibleTriangles[edge2.tri2]);\n\t\t\t\tedge3Vis = (edge3.tri1 == -1 || edge3.tri2 == -1 || visibleTriangles[edge3.tri1] != visibleTriangles[edge3.tri2]);\n\t\t\t\t\n\t\t\t\tif (edge1Vis) {\n\t\t\t\t\tnewTriangles.push ([triangle.vertices[0], triangle.vertices[1], index]);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (edge2Vis) {\n\t\t\t\t\tnewTriangles.push ([triangle.vertices[1], triangle.vertices[2], index]);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (edge3Vis) {\n\t\t\t\t\tnewTriangles.push ([triangle.vertices[2], triangle.vertices[0], index]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (i = 0; i < visibleTriangles.length; i++) {\n\t\t\t\tif (!visibleTriangles[i]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ttriangle = body.triangles[i];\n\t\t\t\tif (!triangle.valid) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tRemoveTriangle (body, i);\n\t\t\t}\n\t\t\t\n\t\t\tvar newTriangle;\n\t\t\tfor (i = 0; i < newTriangles.length; i++) {\n\t\t\t\tnewTriangle = newTriangles[i];\n\t\t\t\tAddTriangle (body, newTriangle[0], newTriangle[1], newTriangle[2]);\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar result = [];\n\t\tvar count = coords.length;\n\t\tif (count < 4) {\n\t\t\treturn result;\n\t\t}\n\n\t\tvar body = new Body ();\n\t\t\n\t\tvar i;\n\t\tfor (i = 0; i < count; i++) {\n\t\t\tAddVertex (body, coords[i]);\n\t\t}\n\t\t\n\t\tAddInitialTetrahedron (body);\n\t\tfor (i = 4; i < count; i++) {\n\t\t\tAddCoordToHull (body, i);\n\t\t}\n\t\t\n\t\tvar triangle;\n\t\tfor (i = 0; i < body.triangles.length; i++) {\n\t\t\ttriangle = body.triangles[i];\n\t\t\tif (triangle.valid) {\n\t\t\t\tresult.push (triangle.vertices);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t};\n\n\treturn JSM;\n});\n"]}