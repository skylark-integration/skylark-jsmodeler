{"version":3,"sources":["geometry/plane.js"],"names":["define","JSM","CoordPlanePosition","CoordOnPlane","CoordInFrontOfPlane","CoordAtBackOfPlane","LinePlanePosition","LineParallelToPlane","LineIntersectsPlane","Plane","a","b","c","d","this","prototype","Set","GetNormal","Vector","CoordSignedDistance","coord","x","y","z","Math","sqrt","CoordDistance","signed","abs","ProjectCoord","distance","side","IsGreater","normal","Normalize","Clone","Offset","CoordPosition","s","IsPositive","IsNegative","LinePosition","line","intersection","direction","x1","start","y1","z1","x2","y2","z2","denom","IsZero","u","undefined","MultiplyScalar","i","CoordAdd","LineIntersection","GetPlaneFromCoordAndDirection","plane","pa","pb","pc","pd","GetPlaneFromThreeCoords","CoordPlaneSignedDirectionalDistance","DistanceTo","CoordPlaneDirectionalDistance"],"mappings":"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","file":"../../geometry/plane.js","sourcesContent":["define([\"../core/jsm\"],function(JSM){\n\t/**\n\t* Enum: CoordPlanePosition\n\t* Description: Position of a coordinate and a plane.\n\t* Values:\n\t*\t{CoordOnPlane} coordinate lies on the plane\n\t*\t{CoordInFrontOfPlane} coordinate lies in front of of the plane\n\t*\t{CoordAtBackOfPlane} coordinate lies at the back of the plane\n\t*/\n\tJSM.CoordPlanePosition = {\n\t\tCoordOnPlane : 0,\n\t\tCoordInFrontOfPlane : 1,\n\t\tCoordAtBackOfPlane : 2\n\t};\n\n\t/**\n\t* Enum: LinePlanePosition\n\t* Description: Position of a line and a plane.\n\t* Values:\n\t*\t{LineParallelToPlane} line is parallel to the plane\n\t*\t{LineIntersectsPlane} line intersects the plane\n\t*/\n\tJSM.LinePlanePosition = {\n\t\tLineParallelToPlane : 0,\n\t\tLineIntersectsPlane : 1\n\t};\n\n\t/**\n\t* Class: Plane\n\t* Description: Represents a plane.\n\t* Parameters:\n\t*\ta {number} the a component of plane equation\n\t*\tb {number} the b component of plane equation\n\t*\tc {number} the c component of plane equation\n\t*\td {number} the d component of plane equation\n\t*/\n\tJSM.Plane = function (a, b, c, d)\n\t{\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\t\tthis.d = d;\n\t};\n\n\t/**\n\t* Function: Plane.Set\n\t* Description: Sets the plane.\n\t* Parameters:\n\t*\ta {number} the a component of plane equation\n\t*\tb {number} the b component of plane equation\n\t*\tc {number} the c component of plane equation\n\t*\td {number} the d component of plane equation\n\t*/\n\tJSM.Plane.prototype.Set = function (a, b, c, d)\n\t{\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\t\tthis.d = d;\n\t};\n\n\t/**\n\t* Function: Plane.GetNormal\n\t* Description: Calculates the normal vector of the plane.\n\t* Returns:\n\t*\t{Vector} the result\n\t*/\n\tJSM.Plane.prototype.GetNormal = function ()\n\t{\n\t\treturn new JSM.Vector (this.a, this.b, this.c);\n\t};\n\n\t/**\n\t* Function: Plane.CoordSignedDistance\n\t* Description: Calculates the signed distance of a coordinate and the plane.\n\t* Parameters:\n\t*\tcoord {Coord} the coordinate\n\t* Returns:\n\t*\t{number} the result\n\t*/\n\tJSM.Plane.prototype.CoordSignedDistance = function (coord)\n\t{\n\t\tvar x = coord.x;\n\t\tvar y = coord.y;\n\t\tvar z = coord.z;\n\n\t\tvar a = this.a;\n\t\tvar b = this.b;\n\t\tvar c = this.c;\n\t\tvar d = this.d;\n\n\t\tvar distance = (a * x + b * y + c * z + d) / Math.sqrt (a * a + b * b + c * c);\n\t\treturn distance;\n\t};\n\n\t/**\n\t* Function: Plane.CoordDistance\n\t* Description: Calculates the distance of a coordinate and the plane.\n\t* Parameters:\n\t*\tcoord {Coord} the coordinate\n\t* Returns:\n\t*\t{number} the result\n\t*/\n\tJSM.Plane.prototype.CoordDistance = function (coord)\n\t{\n\t\tvar signed = this.CoordSignedDistance (coord);\n\t\treturn Math.abs (signed);\n\t};\n\n\t/**\n\t* Function: Plane.ProjectCoord\n\t* Description: Projects a coordinate to the plane.\n\t* Parameters:\n\t*\tcoord {Coord} the coordinate\n\t* Returns:\n\t*\t{Coord} the projected coordinate\n\t*/\n\tJSM.Plane.prototype.ProjectCoord = function (coord)\n\t{\n\t\tvar x = coord.x;\n\t\tvar y = coord.y;\n\t\tvar z = coord.z;\n\n\t\tvar a = this.a;\n\t\tvar b = this.b;\n\t\tvar c = this.c;\n\t\tvar d = this.d;\n\n\t\tvar distance = this.CoordDistance (coord);\n\t\tvar side = a * x + b * y + c * z + d;\n\t\tif (JSM.IsGreater (side, 0.0)) {\n\t\t\tdistance = -distance;\n\t\t}\n\n\t\tvar normal = this.GetNormal ().Normalize ();\n\t\tvar result = coord.Clone ().Offset (normal, distance);\n\t\treturn result;\n\t};\n\n\n\t/**\n\t* Function: Plane.CoordPosition\n\t* Description: Calculates the position of the plane and the given coordinate.\n\t* Parameters:\n\t*\tcoord {Coord} the coordinate\n\t* Returns:\n\t*\t{CoordPlanePosition} thre result\n\t*/\n\tJSM.Plane.prototype.CoordPosition = function (coord)\n\t{\n\t\tvar a = this.a;\n\t\tvar b = this.b;\n\t\tvar c = this.c;\n\t\tvar d = this.d;\n\n\t\tvar x = coord.x;\n\t\tvar y = coord.y;\n\t\tvar z = coord.z;\n\n\t\tvar s = a * x + b * y + c * z + d;\n\t\tif (JSM.IsPositive (s)) {\n\t\t\treturn JSM.CoordPlanePosition.CoordInFrontOfPlane;\n\t\t} else if (JSM.IsNegative (s)) {\n\t\t\treturn JSM.CoordPlanePosition.CoordAtBackOfPlane;\n\t\t}\n\t\t\n\t\treturn JSM.CoordPlanePosition.CoordOnPlane;\n\t};\n\n\t/**\n\t* Function: Plane.LinePosition\n\t* Description: Calculates the position of the plane and the given line.\n\t* Parameters:\n\t*\tline {Line} the line\n\t*\tintersection {Coord} (out) the intersection point if it exists\n\t* Returns:\n\t*\t{CoordLinePosition} the result\n\t*/\n\tJSM.Plane.prototype.LinePosition = function (line, intersection)\n\t{\n\t\tvar\tdirection = line.direction.Clone ().Normalize ();\n\n\t\tvar x1 = line.start.x;\n\t\tvar y1 = line.start.y;\n\t\tvar z1 = line.start.z;\n\n\t\tvar x2 = line.start.x + direction.x;\n\t\tvar y2 = line.start.y + direction.y;\n\t\tvar z2 = line.start.z + direction.z;\n\n\t\tvar a = this.a;\n\t\tvar b = this.b;\n\t\tvar c = this.c;\n\t\tvar d = this.d;\n\n\t\tvar denom = (a * (x1 - x2) + b * (y1 - y2) + c * (z1 - z2));\n\t\tif (JSM.IsZero (denom)) {\n\t\t\treturn JSM.LinePlanePosition.LineParallelToPlane;\n\t\t}\n\n\t\tvar u = (a * x1 + b * y1 + c * z1 + d) / denom;\n\t\tif (intersection !== undefined) {\n\t\t\tdirection.MultiplyScalar (u);\n\t\t\tvar i = JSM.CoordAdd (line.start, direction);\n\t\t\tintersection.Set (i.x, i.y, i.z);\n\t\t}\n\n\t\treturn JSM.LinePlanePosition.LineIntersectsPlane;\n\t};\n\n\t/**\n\t* Function: Plane.LineIntersection\n\t* Description:\n\t*\tCalculates the intersection point of a line and a plane.\n\t*\tThe line should not be parallel to the plane.\n\t* Parameters:\n\t*\tline {Line} the line\n\t* Returns:\n\t*\t{Coord} the result\n\t*/\n\tJSM.Plane.prototype.LineIntersection = function (line)\n\t{\n\t\tvar\tdirection = line.direction.Clone ().Normalize ();\n\n\t\tvar x1 = line.start.x;\n\t\tvar y1 = line.start.y;\n\t\tvar z1 = line.start.z;\n\n\t\tvar x2 = line.start.x + direction.x;\n\t\tvar y2 = line.start.y + direction.y;\n\t\tvar z2 = line.start.z + direction.z;\n\n\t\tvar a = this.a;\n\t\tvar b = this.b;\n\t\tvar c = this.c;\n\t\tvar d = this.d;\n\n\t\tvar denom = (a * (x1 - x2) + b * (y1 - y2) + c * (z1 - z2));\n\t\tif (JSM.IsZero (denom)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tvar u = (a * x1 + b * y1 + c * z1 + d) / denom;\n\t\tdirection.MultiplyScalar (u);\n\t\treturn JSM.CoordAdd (line.start, direction);\n\t};\n\n\t/**\n\t* Function: Plane.Clone\n\t* Description: Clones the plane.\n\t* Returns:\n\t*\t{Plane} a cloned instance\n\t*/\n\tJSM.Plane.prototype.Clone = function ()\n\t{\n\t\treturn new JSM.Plane (this.a, this.b, this.c, this.d);\n\t};\n\n\t/**\n\t* Function: GetPlaneFromCoordAndDirection\n\t* Description: Generates a plane from a coordinate and a direction.\n\t* Parameters:\n\t*\tcoord {Coord} the coordinate\n\t*\tdirection {Vector} the direction\n\t* Returns:\n\t*\t{Plane} the result\n\t*/\n\tJSM.GetPlaneFromCoordAndDirection = function (coord, direction)\n\t{\n\t\tvar plane = new JSM.Plane ();\n\t\tvar normal = direction.Clone ().Normalize ();\n\t\tvar pa = normal.x;\n\t\tvar pb = normal.y;\n\t\tvar pc = normal.z;\n\t\tvar pd = -(pa * coord.x + pb * coord.y + pc * coord.z);\n\t\tplane.Set (pa, pb, pc, pd);\n\t\treturn plane;\n\t};\n\n\t/**\n\t* Function: GetPlaneFromThreeCoords\n\t* Description: Generates a plane from three coordinates.\n\t* Parameters:\n\t*\ta {Coord} the first coordinate\n\t*\tb {Coord} the second coordinate\n\t*\tc {Coord} the third coordinate\n\t* Returns:\n\t*\t{Plane} the result\n\t*/\n\tJSM.GetPlaneFromThreeCoords = function (a, b, c)\n\t{\n\t\tvar plane = new JSM.Plane ();\n\t\tvar pa = (b.y - a.y) * (c.z - a.z) - (c.y - a.y) * (b.z - a.z);\n\t\tvar pb = (b.z - a.z) * (c.x - a.x) - (c.z - a.z) * (b.x - a.x);\n\t\tvar pc = (b.x - a.x) * (c.y - a.y) - (c.x - a.x) * (b.y - a.y);\n\t\tvar pd = -(pa * a.x + pb * a.y + pc * a.z);\n\t\tplane.Set (pa, pb, pc, pd);\n\t\treturn plane;\n\t};\n\n\t/**\n\t* Function: CoordPlaneSignedDirectionalDistance\n\t* Description: Calculates the signed distance of a coordinate and a plane along a direction vector.\n\t* Parameters:\n\t*\tcoord {Coord} the coordinate\n\t*\tdirection {Vector} the direction\n\t*\tplane {Plane} the plane\n\t* Returns:\n\t*\t{number} the result\n\t*/\n\tJSM.CoordPlaneSignedDirectionalDistance = function (coord, direction, plane)\n\t{\n\t\tvar\tnormal = direction.Clone ().Normalize ();\n\n\t\tvar x1 = coord.x;\n\t\tvar y1 = coord.y;\n\t\tvar z1 = coord.z;\n\n\t\tvar x2 = coord.x + normal.x;\n\t\tvar y2 = coord.y + normal.y;\n\t\tvar z2 = coord.z + normal.z;\n\n\t\tvar a = plane.a;\n\t\tvar b = plane.b;\n\t\tvar c = plane.c;\n\t\tvar d = plane.d;\n\n\t\tvar denom = (a * (x1 - x2) + b * (y1 - y2) + c * (z1 - z2));\n\t\tif (JSM.IsZero (denom)) {\n\t\t\treturn 0.0;\n\t\t}\n\n\t\tvar u = (a * x1 + b * y1 + c * z1 + d) / denom;\n\t\tnormal.MultiplyScalar (u);\n\t\tvar intersection = JSM.CoordAdd (coord, normal);\n\t\tvar distance = coord.DistanceTo (intersection);\n\t\tvar s = a * x1 + b * y1 + c * z1 + d;\n\t\tif (JSM.IsNegative (s)) {\n\t\t\tdistance = -distance;\n\t\t}\n\n\t\treturn distance;\n\t};\n\n\t/**\n\t* Function: CoordPlaneDirectionalDistance\n\t* Description: Calculates the distance of a coordinate and a plane along a direction vector.\n\t* Parameters:\n\t*\tcoord {Coord} the coordinate\n\t*\tdirection {Vector} the direction\n\t*\tplane {Plane} the plane\n\t* Returns:\n\t*\t{number} the result\n\t*/\n\tJSM.CoordPlaneDirectionalDistance = function (coord, direction, plane)\n\t{\n\t\treturn Math.abs (JSM.CoordPlaneSignedDirectionalDistance (coord, direction, plane));\n\t};\n\n\treturn JSM;\n});\n"]}