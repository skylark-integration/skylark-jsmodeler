{"version":3,"sources":["geometry/line.js"],"names":["define","JSM","CoordLinePosition2D","CoordOnLine","CoordAtLineLeft","CoordAtLineRight","LineLinePosition2D","LinesDontIntersect","LinesIntersectsOnePoint","LinesIntersectsCoincident","CoordLinePosition","CoordOutsideOfLine","LineLinePosition","Line2D","start","direction","this","prototype","Set","CoordPosition","coord","position","CoordSignedDistance","IsPositive","IsNegative","x","y","a","b","LinePosition","line","intersection","x1","y1","x2","y2","x3","y3","x4","y4","numeratorA","numeratorB","denominator","IsZero","distance","Clone","Line","projected","z","z1","z2","denom","undefined","IsEqual","u","bu","MultiplyScalar","c","CoordAdd","DistanceTo","ProjectCoord","ClosestPoint","thisClosestPoint","lineClosestPoint","Dmnop","v","m","n","o","p","aDir","Normalize","aStart","aEnd","bDir","bStart","d1010","d0210","d0232","d3210","d3232","mua","mub","aClosest","bClosest","Coord"],"mappings":"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","file":"../../geometry/line.js","sourcesContent":["define([\"../core/jsm\"],function(JSM){\n\t/**\n\t* Enum: CoordLinePosition2D\n\t* Description: Position of a coordinate and a line.\n\t* Values:\n\t*\t{CoordOnLine} coordinate lies on the line\n\t*\t{CoordAtLineLeft} coordinate lies on the left side of the line\n\t*\t{CoordAtLineRight} coordinate lies on the left side right the line\n\t*/\n\tJSM.CoordLinePosition2D = {\n\t\tCoordOnLine : 0,\n\t\tCoordAtLineLeft : 1,\n\t\tCoordAtLineRight : 2\n\t};\n\n\t/**\n\t* Enum: LineLinePosition2D\n\t* Description: Position of two lines.\n\t* Values:\n\t*\t{LinesDontIntersect} lines do not intersect\n\t*\t{LinesIntersectsCoincident} lines intersect coincident\n\t*\t{LinesIntersectsOnePoint} lines intersect one point\n\t*/\n\tJSM.LineLinePosition2D = {\n\t\tLinesDontIntersect : 0,\n\t\tLinesIntersectsOnePoint : 1,\n\t\tLinesIntersectsCoincident : 2\n\t};\n\n\t/**\n\t* Enum: CoordLinePosition\n\t* Description: Position of a coordinate and a line.\n\t* Values:\n\t*\t{CoordOnLine} coordinate lies on the line\n\t*\t{CoordOutsideOfLine} coordinate lies outside of the line\n\t*/\n\tJSM.CoordLinePosition = {\n\t\tCoordOnLine : 0,\n\t\tCoordOutsideOfLine : 1\n\t};\n\n\t/**\n\t* Enum: LineLinePosition\n\t* Description: Position of two lines.\n\t* Values:\n\t*\t{LinesDontIntersect} lines do not intersect\n\t*\t{LinesIntersectsCoincident} lines intersect coincident\n\t*\t{LinesIntersectsOnePoint} lines intersect one point\n\t*/\n\tJSM.LineLinePosition = {\n\t\tLinesDontIntersect : 0,\n\t\tLinesIntersectsOnePoint : 1,\n\t\tLinesIntersectsCoincident : 2\n\t};\n\n\t/**\n\t* Class: Line2D\n\t* Description: Represents a 2D infinite line.\n\t* Parameters:\n\t*\tstart {Coord2D} the start point of the line\n\t*\tdirection {Vector2D} the direction of the line\n\t*/\n\tJSM.Line2D = function (start, direction)\n\t{\n\t\tthis.start = start;\n\t\tthis.direction = direction;\n\t};\n\n\t/**\n\t* Function: Line2D.Set\n\t* Description: Sets the line.\n\t* Parameters:\n\t*\tstart {Coord2D} the start point of the line\n\t*\tdirection {Vector2D} the direction of the line\n\t*/\n\tJSM.Line2D.prototype.Set = function (start, direction)\n\t{\n\t\tthis.start = start;\n\t\tthis.direction = direction;\n\t};\n\n\t/**\n\t* Function: Line2D.CoordPosition\n\t* Description: Calculates the position of the line and the given coordinate.\n\t* Parameters:\n\t*\tcoord {Coord2D} the coordinate\n\t* Returns:\n\t*\t{CoordLinePosition2D} the result\n\t*/\n\tJSM.Line2D.prototype.CoordPosition = function (coord)\n\t{\n\t\tvar position = this.CoordSignedDistance (coord);\n\t\tif (JSM.IsPositive (position)) {\n\t\t\treturn JSM.CoordLinePosition2D.CoordAtLineLeft;\n\t\t} else if (JSM.IsNegative (position)) {\n\t\t\treturn JSM.CoordLinePosition2D.CoordAtLineRight;\n\t\t}\n\n\t\treturn JSM.CoordLinePosition2D.CoordOnLine;\n\t};\n\n\t/**\n\t* Function: Line2D.CoordSignedDistance\n\t* Description: Calculates the signed distance of the line and the given coordinate.\n\t* Parameters:\n\t*\tcoord {Coord2D} the coordinate\n\t* Returns:\n\t*\t{number} the result\n\t*/\n\tJSM.Line2D.prototype.CoordSignedDistance = function (coord)\n\t{\n\t\tvar x = coord.x;\n\t\tvar y = coord.y;\n\t\tvar a = this.start;\n\t\tvar b = this.direction;\n\t\treturn b.x * (y - a.y) - b.y * (x - a.x);\n\t};\n\n\t/**\n\t* Function: Line2D.LinePosition\n\t* Description: Calculates the position of the line and the given line.\n\t* Parameters:\n\t*\tline {Line2D} the line\n\t*\tintersection {Coord2D} (out) the intersection point if it exists\n\t* Returns:\n\t*\t{LineLinePosition2D} the result\n\t*/\n\tJSM.Line2D.prototype.LinePosition = function (line, intersection)\n\t{\n\t\tvar x1 = this.start.x;\n\t\tvar y1 = this.start.y;\n\t\tvar x2 = this.start.x + this.direction.x;\n\t\tvar y2 = this.start.y + this.direction.y;\n\t\tvar x3 = line.start.x;\n\t\tvar y3 = line.start.y;\n\t\tvar x4 = line.start.x + line.direction.x;\n\t\tvar y4 = line.start.y + line.direction.y;\n\t\t\n\t\tvar numeratorA = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);\n\t\tvar numeratorB = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);\n\t\tvar denominator = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\n\t\tif (JSM.IsZero (denominator)) {\n\t\t\tif (JSM.IsZero (numeratorA) && JSM.IsZero (numeratorB)) {\n\t\t\t\treturn JSM.LineLinePosition2D.LinesIntersectsCoincident;\n\t\t\t}\n\t\t\treturn JSM.LineLinePosition2D.LinesDontIntersect;\n\t\t}\n\n\t\tvar distance = numeratorA / denominator;\n\t\tif (intersection !== null) {\n\t\t\tintersection.x = x1 + distance * (x2 - x1);\n\t\t\tintersection.y = y1 + distance * (y2 - y1);\n\t\t}\n\t\treturn JSM.LineLinePosition2D.LinesIntersectsOnePoint;\n\t};\n\n\t/**\n\t* Function: Line2D.Clone\n\t* Description: Clones the line.\n\t* Returns:\n\t*\t{Line2D} a cloned instance\n\t*/\n\tJSM.Line2D.prototype.Clone = function ()\n\t{\n\t\treturn new JSM.Line2D (this.start.Clone (), this.direction.Clone ());\n\t};\n\n\t/**\n\t* Class: Line\n\t* Description: Represents a 3D infinite line.\n\t* Parameters:\n\t*\tstart {Coord} the start point of the line\n\t*\tdirection {Vector} the direction of the line\n\t*/\n\tJSM.Line = function (start, direction)\n\t{\n\t\tthis.start = start;\n\t\tthis.direction = direction;\n\t};\n\n\t/**\n\t* Function: Line.Set\n\t* Description: Sets the line.\n\t* Parameters:\n\t*\tstart {Coord} the start point of the line\n\t*\tdirection {Vector} the direction of the line\n\t*/\n\tJSM.Line.prototype.Set = function (start, direction)\n\t{\n\t\tthis.start = start;\n\t\tthis.direction = direction;\n\t};\n\n\t/**\n\t* Function: Line.CoordPosition\n\t* Description: Calculates the position of the line and the given coordinate.\n\t* Parameters:\n\t*\tcoord {Coord} the coordinate\n\t*\tprojected {Coord} (out) the projected coordinate\n\t* Returns:\n\t*\t{CoordLinePosition} the result\n\t*/\n\tJSM.Line.prototype.CoordPosition = function (coord, projected)\n\t{\n\t\tvar x = coord.x;\n\t\tvar y = coord.y;\n\t\tvar z = coord.z;\n\n\t\tvar a = this.start;\n\t\tvar b = this.direction;\n\n\t\tvar x1 = a.x;\n\t\tvar y1 = a.y;\n\t\tvar z1 = a.z;\n\t\tvar x2 = a.x + b.x;\n\t\tvar y2 = a.y + b.y;\n\t\tvar z2 = a.z + b.z;\n\n\t\tvar denom = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1) + (z2 - z1) * (z2 - z1);\n\t\tif (JSM.IsZero (denom)) {\n\t\t\tif (projected !== undefined) {\n\t\t\t\tprojected.Set (a.x, a.y, a.z);\n\t\t\t}\n\n\t\t\tif (a.IsEqual (coord)) {\n\t\t\t\treturn JSM.CoordLinePosition.CoordOnLine;\n\t\t\t}\n\n\t\t\treturn JSM.CoordLinePosition.CoordOutsideOfLine;\n\t\t}\n\n\t\tvar u = ((x2 - x1) * (x - x1) + (y2 - y1) * (y - y1) + (z2 - z1) * (z - z1)) / denom;\n\t\tvar bu = b.Clone ().MultiplyScalar (u);\n\t\tvar c = JSM.CoordAdd (a, bu);\n\t\tif (projected !== undefined) {\n\t\t\tprojected.Set (c.x, c.y, c.z);\n\t\t}\n\n\t\tvar distance = coord.DistanceTo (c);\n\t\tif (JSM.IsZero (distance)) {\n\t\t\treturn JSM.CoordLinePosition.CoordOnLine;\n\t\t}\n\n\t\treturn JSM.CoordLinePosition.CoordOutsideOfLine;\n\t};\n\n\t/**\n\t* Function: Line.ProjectCoord\n\t* Description: Calculates the projected coordinate of the given coordinate.\n\t* Parameters:\n\t*\tcoord {Coord} the coordinate\n\t* Returns:\n\t*\t{Coord} the result\n\t*/\n\tJSM.Line.prototype.ProjectCoord = function (coord)\n\t{\n\t\tvar x = coord.x;\n\t\tvar y = coord.y;\n\t\tvar z = coord.z;\n\n\t\tvar a = this.start;\n\t\tvar b = this.direction;\n\n\t\tvar x1 = a.x;\n\t\tvar y1 = a.y;\n\t\tvar z1 = a.z;\n\t\tvar x2 = a.x + b.x;\n\t\tvar y2 = a.y + b.y;\n\t\tvar z2 = a.z + b.z;\n\n\t\tvar denom = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1) + (z2 - z1) * (z2 - z1);\n\t\tif (JSM.IsZero (denom)) {\n\t\t\treturn a.Clone ();\n\t\t}\n\n\t\tvar u = ((x2 - x1) * (x - x1) + (y2 - y1) * (y - y1) + (z2 - z1) * (z - z1)) / denom;\n\t\tvar bu = b.Clone ().MultiplyScalar (u);\n\t\treturn JSM.CoordAdd (a, bu);\n\t};\n\n\t/**\n\t* Function: Line.ClosestPoint\n\t* Description: Calculates the closest points between the line and a given line.\n\t* Parameters:\n\t*\tline {Line} the line\n\t*\tthisClosestPoint {Coord} (out) the closest point on the current line\n\t*\tlineClosestPoint {Coord} (out) the closest point on the given line\n\t* Returns:\n\t*\t{boolean} success\n\t*/\n\tJSM.Line.prototype.ClosestPoint = function (line, thisClosestPoint, lineClosestPoint)\n\t{\n\t\tfunction Dmnop (v, m, n, o, p)\n\t\t{\n\t\t\tvar result = (v[m].x - v[n].x) * (v[o].x - v[p].x) + (v[m].y - v[n].y) * (v[o].y - v[p].y) + (v[m].z - v[n].z) * (v[o].z - v[p].z);\n\t\t\treturn result;\n\t\t}\n\n\t\tvar aDir = this.direction.Clone ().Normalize ();\n\t\tvar aStart = this.start;\n\t\tvar aEnd = JSM.CoordAdd (aStart, aDir);\n\n\t\tvar bDir = line.direction.Clone ().Normalize ();\n\t\tvar bStart = line.start;\n\t\tvar bEnd = JSM.CoordAdd (bStart, bDir);\n\t\t\n\t\tvar v = [aStart, aEnd, bStart, bEnd];\n\t\tvar d1010 = Dmnop (v, 1, 0, 1, 0);\n\t\tvar d0210 = Dmnop (v, 0, 2, 1, 0);\n\t\tvar d0232 = Dmnop (v, 0, 2, 3, 2);\n\t\tvar d3210 = Dmnop (v, 3, 2, 1, 0);\n\t\tvar d3232 = Dmnop (v, 3, 2, 3, 2);\n\t\tvar denom = (d1010 * d3232 - d3210 * d3210);\n\t\tif (JSM.IsEqual (denom, 0.0)) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tvar nom = (d0232 * d3210 - d0210 * d3232);\n\t\tvar mua = nom / denom;\n\t\tvar mub = (d0232 + mua * d3210) / d3232;\n\n\t\tif (thisClosestPoint !== undefined) {\n\t\t\taDir.MultiplyScalar (mua);\n\t\t\tvar aClosest = JSM.CoordAdd (aStart, aDir);\n\t\t\tthisClosestPoint.Set (aClosest.x, aClosest.y, aClosest.z);\n\t\t}\n\t\t\n\t\tif (lineClosestPoint !== undefined) {\n\t\t\tbDir.MultiplyScalar (mub);\n\t\t\tvar bClosest = JSM.CoordAdd (bStart, bDir);\n\t\t\tlineClosestPoint.Set (bClosest.x, bClosest.y, bClosest.z);\n\t\t}\n\t\t\n\t\treturn true;\n\t};\n\n\t/**\n\t* Function: Line.LinePosition\n\t* Description: Calculates the position of the line and the given line.\n\t* Parameters:\n\t*\tline {Line} the line\n\t*\tintersection {Coord} (out) the intersection point if it exists\n\t* Returns:\n\t*\t{LineLinePosition} the result\n\t*/\n\tJSM.Line.prototype.LinePosition = function (line, intersection)\n\t{\n\t\tvar thisClosestPoint = new JSM.Coord (0.0, 0.0, 0.0);\n\t\tvar lineClosestPoint = new JSM.Coord (0.0, 0.0, 0.0);\n\t\tif (!this.ClosestPoint (line, thisClosestPoint, lineClosestPoint)) {\n\t\t\treturn JSM.LineLinePosition.LinesIntersectsCoincident;\n\t\t}\n\t\t\n\t\tif (thisClosestPoint.IsEqual (lineClosestPoint)) {\n\t\t\tif (intersection !== undefined) {\n\t\t\t\tintersection.Set (thisClosestPoint.x, thisClosestPoint.y, thisClosestPoint.z);\n\t\t\t}\n\t\t\treturn JSM.LineLinePosition.LinesIntersectsOnePoint;\n\t\t}\n\t\t\n\t\treturn JSM.LineLinePosition.LinesDontIntersect;\n\t};\n\n\t/**\n\t* Function: Line.Clone\n\t* Description: Clones the line.\n\t* Returns:\n\t*\t{Line} a cloned instance\n\t*/\n\tJSM.Line.prototype.Clone = function ()\n\t{\n\t\treturn new JSM.Line (this.start.Clone (), this.direction.Clone ());\n\t};\n\n\treturn JSM;\n});\n"]}