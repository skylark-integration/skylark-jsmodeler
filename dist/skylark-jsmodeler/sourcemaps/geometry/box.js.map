{"version":3,"sources":["geometry/box.js"],"names":["define","JSM","Box2D","min","max","this","prototype","Set","GetCenter","MidCoord2D","Clone","Box","MidCoord","GetSize","CoordSub","IsCoordInside","coord","IsLower","x","y","z","IsGreater","BoxUnion","aBox","bBox","Coord","Minimum","Maximum"],"mappings":";;;;;;;AAAAA,QAAQ,eAAe,SAASC,GA+I/B,OAvIAA,EAAIC,MAAQ,SAAUC,EAAKC,GAE1BC,KAAKF,IAAMA,EACXE,KAAKD,IAAMA,GAUZH,EAAIC,MAAMI,UAAUC,IAAM,SAAUJ,EAAKC,GAExCC,KAAKF,IAAMA,EACXE,KAAKD,IAAMA,GASZH,EAAIC,MAAMI,UAAUE,UAAY,WAE/B,OAAOP,EAAIQ,WAAYJ,KAAKF,IAAKE,KAAKD,MASvCH,EAAIC,MAAMI,UAAUI,MAAQ,WAE3B,OAAO,IAAIT,EAAIC,MAAOG,KAAKF,IAAIO,QAAUL,KAAKD,IAAIM,UAUnDT,EAAIU,IAAM,SAAUR,EAAKC,GAExBC,KAAKF,IAAMA,EACXE,KAAKD,IAAMA,GAUZH,EAAIU,IAAIL,UAAUC,IAAM,SAAUJ,EAAKC,GAEtCC,KAAKF,IAAMA,EACXE,KAAKD,IAAMA,GASZH,EAAIU,IAAIL,UAAUE,UAAY,WAE7B,OAAOP,EAAIW,SAAUP,KAAKF,IAAKE,KAAKD,MASrCH,EAAIU,IAAIL,UAAUO,QAAU,WAE3B,OAAOZ,EAAIa,SAAUT,KAAKD,IAAKC,KAAKF,MAWrCF,EAAIU,IAAIL,UAAUS,cAAgB,SAAUC,GAE3C,QAAIf,EAAIgB,QAASD,EAAME,EAAGb,KAAKF,IAAIe,IAAMjB,EAAIgB,QAASD,EAAMG,EAAGd,KAAKF,IAAIgB,IAAMlB,EAAIgB,QAASD,EAAMI,EAAGf,KAAKF,IAAIiB,OAGzGnB,EAAIoB,UAAWL,EAAME,EAAGb,KAAKD,IAAIc,IAAMjB,EAAIoB,UAAWL,EAAMG,EAAGd,KAAKD,IAAIe,IAAMlB,EAAIoB,UAAWL,EAAMI,EAAGf,KAAKD,IAAIgB,KAYpHnB,EAAIU,IAAIL,UAAUI,MAAQ,WAEzB,OAAO,IAAIT,EAAIU,IAAKN,KAAKF,IAAIO,QAAUL,KAAKD,IAAIM,UAYjDT,EAAIqB,SAAW,SAAUC,EAAMC,GAE9B,IAAIrB,EAAM,IAAIF,EAAIwB,MAAOxB,EAAIyB,QAASH,EAAKpB,IAAIe,EAAGM,EAAKrB,IAAIe,GAAIjB,EAAIyB,QAASH,EAAKpB,IAAIgB,EAAGK,EAAKrB,IAAIgB,GAAIlB,EAAIyB,QAASH,EAAKpB,IAAIiB,EAAGI,EAAKrB,IAAIiB,IACnIhB,EAAM,IAAIH,EAAIwB,MAAOxB,EAAI0B,QAASJ,EAAKnB,IAAIc,EAAGM,EAAKpB,IAAIc,GAAIjB,EAAI0B,QAASJ,EAAKnB,IAAIe,EAAGK,EAAKpB,IAAIe,GAAIlB,EAAI0B,QAASJ,EAAKnB,IAAIgB,EAAGI,EAAKpB,IAAIgB,IACvI,OAAO,IAAInB,EAAIU,IAAKR,EAAKC,IAGnBH","file":"../../geometry/box.js","sourcesContent":["define([\"../core/jsm\"],function(JSM){\n\t/**\n\t* Class: Box2D\n\t* Description: Represents a 2D box.\n\t* Parameters:\n\t*\tmin {Coord2D} the minimum position of the box\n\t*\tmin {Coord2D} the maximum position of the box\n\t*/\n\tJSM.Box2D = function (min, max)\n\t{\n\t\tthis.min = min;\n\t\tthis.max = max;\n\t};\n\n\t/**\n\t* Function: Box2D.Set\n\t* Description: Sets the box.\n\t* Parameters:\n\t*\tmin {Coord2D} the minimum position of the box\n\t*\tmin {Coord2D} the maximum position of the box\n\t*/\n\tJSM.Box2D.prototype.Set = function (min, max)\n\t{\n\t\tthis.min = min;\n\t\tthis.max = max;\n\t};\n\n\t/**\n\t* Function: Box2D.GetCenter\n\t* Description: Returns the center point of the box.\n\t* Returns:\n\t*\t{Coord2D} the result\n\t*/\n\tJSM.Box2D.prototype.GetCenter = function ()\n\t{\n\t\treturn JSM.MidCoord2D (this.min, this.max);\n\t};\n\n\t/**\n\t* Function: Box2D.Clone\n\t* Description: Clones the box.\n\t* Returns:\n\t*\t{Box2D} a cloned instance\n\t*/\n\tJSM.Box2D.prototype.Clone = function ()\n\t{\n\t\treturn new JSM.Box2D (this.min.Clone (), this.max.Clone ());\n\t};\n\n\t/**\n\t* Class: Box\n\t* Description: Represents a 3D box.\n\t* Parameters:\n\t*\tmin {Coord} the minimum position of the box\n\t*\tmin {Coord} the maximum position of the box\n\t*/\n\tJSM.Box = function (min, max)\n\t{\n\t\tthis.min = min;\n\t\tthis.max = max;\n\t};\n\n\t/**\n\t* Function: Box.Set\n\t* Description: Sets the box.\n\t* Parameters:\n\t*\tmin {Coord} the minimum position of the box\n\t*\tmin {Coord} the maximum position of the box\n\t*/\n\tJSM.Box.prototype.Set = function (min, max)\n\t{\n\t\tthis.min = min;\n\t\tthis.max = max;\n\t};\n\n\t/**\n\t* Function: Box.GetCenter\n\t* Description: Returns the center point of the box.\n\t* Returns:\n\t*\t{Coord} the result\n\t*/\n\tJSM.Box.prototype.GetCenter = function ()\n\t{\n\t\treturn JSM.MidCoord (this.min, this.max);\n\t};\n\n\t/**\n\t* Function: Box.GetSize\n\t* Description: Returns the size of the box.\n\t* Returns:\n\t*\t{Coord} the result\n\t*/\n\tJSM.Box.prototype.GetSize = function ()\n\t{\n\t\treturn JSM.CoordSub (this.max, this.min);\n\t};\n\n\t/**\n\t* Function: Box.IsCoordInside\n\t* Description: Determines if the given coordinate is inside the box.\n\t* Parameters:\n\t*\tcoord {Coord} the coordinate\n\t* Returns:\n\t*\t{boolean} the result\n\t*/\n\tJSM.Box.prototype.IsCoordInside = function (coord)\n\t{\n\t\tif (JSM.IsLower (coord.x, this.min.x) || JSM.IsLower (coord.y, this.min.y) || JSM.IsLower (coord.z, this.min.z)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (JSM.IsGreater (coord.x, this.max.x) || JSM.IsGreater (coord.y, this.max.y) || JSM.IsGreater (coord.z, this.max.z)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t};\n\n\t/**\n\t* Function: Box.Clone\n\t* Description: Clones the box.\n\t* Returns:\n\t*\t{Box} a cloned instance\n\t*/\n\tJSM.Box.prototype.Clone = function ()\n\t{\n\t\treturn new JSM.Box (this.min.Clone (), this.max.Clone ());\n\t};\n\n\t/**\n\t* Function: BoxUnion\n\t* Description: Calculates the union of two 3D boxes.\n\t* Parameters:\n\t*\taBox {Box} the first box\n\t*\tbBox {Box} the second box\n\t* Returns:\n\t*\t{Box} the result\n\t*/\n\tJSM.BoxUnion = function (aBox, bBox)\n\t{\n\t\tvar min = new JSM.Coord (JSM.Minimum (aBox.min.x, bBox.min.x), JSM.Minimum (aBox.min.y, bBox.min.y), JSM.Minimum (aBox.min.z, bBox.min.z));\n\t\tvar max = new JSM.Coord (JSM.Maximum (aBox.max.x, bBox.max.x), JSM.Maximum (aBox.max.y, bBox.max.y), JSM.Maximum (aBox.max.z, bBox.max.z));\n\t\treturn new JSM.Box (min, max);\n\t};\n\n\treturn JSM;\n});\n"]}