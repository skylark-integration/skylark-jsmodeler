{"version":3,"sources":["geometry/octree.js"],"names":["define","JSM","TraverseOctreeNodes","octree","nodeFound","TraverseNode","node","i","children","length","root","CreateOctreeChildNodes","originalBox","createNodeCallback","CreateNode","dirX","dirY","dirZ","size","GetSize","Clone","MultiplyScalar","min","Coord","x","y","z","max","CoordAdd","Box","IsZero","Octree","box","maxCoordNumInNodes","this","coords","CreateNewNode","undefined","prototype","AddCoord","coord","AddCoordToNode","FindCoord","FindNodeForCoord","FindCoordInNode","current","IsEqual","found","SplitNode","index","push","center","GetCenter","xGreater","yGreater","zGreater","myThis","nodeBox","nodeCoords","parent","TriangleOctree","AddTriangle","v0","v1","v2","userData","AddTriangleToNode","IsCoordInside","IsTriangleInNode","triangles"],"mappings":"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","file":"../../geometry/octree.js","sourcesContent":["define([\"../core/jsm\"],function(JSM){\n\t/**\n\t* Function: TraverseOctreeNodes\n\t* Description:\n\t*\tTraverses the nodes of the tree, and calls the given callback when a node found. The return value\n\t*\tof the callback determines if we need to continue traverse along that given node.\n\t* Parameters:\n\t*\toctree {Octree} the octree\n\t*\tnodeFound {function} the callback\n\t*/\n\tJSM.TraverseOctreeNodes = function (octree, nodeFound)\n\t{\n\t\tfunction TraverseNode (node, nodeFound)\n\t\t{\n\t\t\tif (!nodeFound (node)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tif (node.children === null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tvar i, child;\n\t\t\tfor (i = 0; i < node.children.length; i++) {\n\t\t\t\tchild = node.children[i];\n\t\t\t\tTraverseNode (child, nodeFound);\n\t\t\t}\n\t\t}\n\n\t\tTraverseNode (octree.root, nodeFound);\n\t};\n\n\t/**\n\t* Function: CreateOctreeChildNodes\n\t* Description:\n\t*\tCreate child nodes for an octree node. It calls a callback function\n\t*\twhich should create a new node element for the octree.\n\t* Parameters:\n\t*\toriginalBox {Box} the box of the original node\n\t*\tcreateNodeCallback {function} the callback function\n\t* Returns:\n\t*\t{object[*]} the result\n\t*/\n\tJSM.CreateOctreeChildNodes = function (originalBox, createNodeCallback)\n\t{\n\t\tfunction CreateNode (originalBox, createNodeCallback, dirX, dirY, dirZ)\n\t\t{\n\t\t\tvar size = originalBox.GetSize ().Clone ();\n\t\t\tsize.MultiplyScalar (0.5);\n\t\t\tvar min = new JSM.Coord (\n\t\t\t\toriginalBox.min.x + dirX * size.x,\n\t\t\t\toriginalBox.min.y + dirY * size.y,\n\t\t\t\toriginalBox.min.z + dirZ * size.z\n\t\t\t);\n\t\t\tvar max = JSM.CoordAdd (min, size);\n\t\t\tvar box = new JSM.Box (min, max);\n\t\t\treturn createNodeCallback (box);\n\t\t}\n\n\t\tvar size = originalBox.GetSize ();\n\t\tif (JSM.IsZero (size.x) && JSM.IsZero (size.y) && JSM.IsZero (size.z)) {\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\tvar result = [\n\t\t\tCreateNode (originalBox, createNodeCallback, 0.0, 0.0, 0.0),\n\t\t\tCreateNode (originalBox, createNodeCallback, 1.0, 0.0, 0.0),\n\t\t\tCreateNode (originalBox, createNodeCallback, 1.0, 1.0, 0.0),\n\t\t\tCreateNode (originalBox, createNodeCallback, 0.0, 1.0, 0.0),\n\t\t\tCreateNode (originalBox, createNodeCallback, 0.0, 0.0, 1.0),\n\t\t\tCreateNode (originalBox, createNodeCallback, 1.0, 0.0, 1.0),\n\t\t\tCreateNode (originalBox, createNodeCallback, 1.0, 1.0, 1.0),\n\t\t\tCreateNode (originalBox, createNodeCallback, 0.0, 1.0, 1.0),\n\t\t];\n\t\treturn result;\n\t};\n\n\t/**\n\t* Class: Octree\n\t* Description: Defines an octree. The octree contains each coordinate only once.\n\t* Parameters:\n\t*\tbox {Box} bounding box\n\t*\tmaxCoordNumInNodes {integer} maximum number of coordinates in a node\n\t*/\n\tJSM.Octree = function (box, maxCoordNumInNodes)\n\t{\n\t\tthis.coords = [];\n\t\tthis.root = this.CreateNewNode (null, box);\n\t\tthis.maxCoordNumInNodes = maxCoordNumInNodes;\n\t\tif (this.maxCoordNumInNodes === undefined || this.maxCoordNumInNodes === null || this.maxCoordNumInNodes === 0) {\n\t\t\tthis.maxCoordNumInNodes = 50;\n\t\t}\n\t};\n\n\t/**\n\t* Function: Octree.AddCoord\n\t* Description:\n\t*\tAdds a coordinate to the octree. The return value is the stored index of the coordinate.\n\t*\tIf the coordinate was already in the octree, it returns the existing index.\n\t* Parameters:\n\t*\tcoord {Coord} the coordinate\n\t* Returns:\n\t*\t{integer} the stored index of the coordinate\n\t*/\n\tJSM.Octree.prototype.AddCoord = function (coord)\n\t{\n\t\treturn this.AddCoordToNode (coord, this.root);\n\t};\n\n\t/**\n\t* Function: Octree.FindCoord\n\t* Description:\n\t*\tFinds a coordinate in the octree, and returns the stored index of it.\n\t*\tThe return value is -1 if the coordinate does not exist.\n\t* Parameters:\n\t*\tcoord {Coord} the coordinate\n\t* Returns:\n\t*\t{integer} the stored index of the coordinate\n\t*/\n\tJSM.Octree.prototype.FindCoord = function (coord)\n\t{\n\t\tvar node = this.FindNodeForCoord (coord, this.root);\n\t\tif (node === null) {\n\t\t\treturn -1;\n\t\t}\n\t\treturn this.FindCoordInNode (coord, node);\n\t};\n\n\t/**\n\t* Function: Octree.FindCoordInNode\n\t* Description: Finds a coordinate in a node.\n\t* Parameters:\n\t*\tcoord {Coord} the coordinate\n\t*\tnode {object} the node\n\t* Returns:\n\t*\t{integer} the stored index of the coordinate\n\t*/\n\tJSM.Octree.prototype.FindCoordInNode = function (coord, node)\n\t{\n\t\tvar i, current;\n\t\tfor (i = 0; i < node.coords.length; i++) {\n\t\t\tcurrent = node.coords[i];\n\t\t\tif (coord.IsEqual (this.coords[current])) {\n\t\t\t\treturn current;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t};\n\n\t/**\n\t* Function: Octree.AddCoordToNode\n\t* Description: Adds a coordinate to a node.\n\t* Parameters:\n\t*\tcoord {Coord} the coordinate\n\t*\troot {object} the root node\n\t* Returns:\n\t*\t{integer} the stored index of the coordinate\n\t*/\n\tJSM.Octree.prototype.AddCoordToNode = function (coord, root)\n\t{\n\t\tvar node = this.FindNodeForCoord (coord, root);\n\t\tif (node === null) {\n\t\t\treturn -1;\n\t\t}\n\t\t\n\t\tvar found = this.FindCoordInNode (coord, node);\n\t\tif (found != -1) {\t\n\t\t\treturn found;\n\t\t}\n\t\t\n\t\tif (node.coords.length >= this.maxCoordNumInNodes) {\n\t\t\tif (this.SplitNode (node)) {\n\t\t\t\treturn this.AddCoordToNode (coord, node);\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar index = this.coords.length;\n\t\tthis.coords.push (coord);\n\t\tnode.coords.push (index);\n\t\treturn index;\n\t};\n\n\t/**\n\t* Function: Octree.FindNodeForCoord\n\t* Description: Finds a node for a coordinate.\n\t* Parameters:\n\t*\tcoord {Coord} the coordinate\n\t*\tnode {object} the starting node\n\t* Returns:\n\t*\t{object} the found node\n\t*/\n\tJSM.Octree.prototype.FindNodeForCoord = function (coord, node)\n\t{\n\t\tif (node.children === null) {\n\t\t\treturn node;\n\t\t}\n\t\t\n\t\tvar center = node.box.GetCenter ();\n\t\tvar xGreater = coord.x > center.x;\n\t\tvar yGreater = coord.y > center.y;\n\t\tvar zGreater = coord.z > center.z;\n\t\t\n\t\tif (!xGreater && !yGreater && !zGreater) {\n\t\t\treturn this.FindNodeForCoord (coord, node.children[0]);\n\t\t} else if (xGreater && !yGreater && !zGreater) {\n\t\t\treturn this.FindNodeForCoord (coord, node.children[1]);\n\t\t} else if (xGreater && yGreater && !zGreater) {\n\t\t\treturn this.FindNodeForCoord (coord, node.children[2]);\n\t\t} else if (!xGreater && yGreater && !zGreater) {\n\t\t\treturn this.FindNodeForCoord (coord, node.children[3]);\n\t\t} else if (!xGreater && !yGreater && zGreater) {\n\t\t\treturn this.FindNodeForCoord (coord, node.children[4]);\n\t\t} else if (xGreater && !yGreater && zGreater) {\n\t\t\treturn this.FindNodeForCoord (coord, node.children[5]);\n\t\t} else if (xGreater && yGreater && zGreater) {\n\t\t\treturn this.FindNodeForCoord (coord, node.children[6]);\n\t\t} else if (!xGreater && yGreater && zGreater) {\n\t\t\treturn this.FindNodeForCoord (coord, node.children[7]);\n\t\t}\n\t\t\n\t\treturn null;\n\t};\n\n\t/**\n\t* Function: Octree.SplitNode\n\t* Description: Splits a node to subnodes.\n\t* Parameters:\n\t*\tnode {object} the node\n\t* Returns:\n\t*\t{boolean} success\n\t*/\n\tJSM.Octree.prototype.SplitNode = function (node)\n\t{\n\t\tvar myThis = this;\n\t\tvar children = JSM.CreateOctreeChildNodes (node.box, function (nodeBox) {\n\t\t\treturn myThis.CreateNewNode (node, nodeBox);\n\t\t});\n\t\t\n\t\tif (children === null) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tnode.children = children;\n\t\tvar nodeCoords = node.coords;\n\t\tnode.coords = [];\n\t\t\n\t\tvar i, newNode;\n\t\tfor (i = 0; i < nodeCoords.length; i++) {\n\t\t\tnewNode = this.FindNodeForCoord (this.coords[nodeCoords[i]], node);\n\t\t\tnewNode.coords.push (nodeCoords[i]);\n\t\t}\n\t\t\n\t\treturn true;\n\t};\n\n\t/**\n\t* Function: Octree.CreateNewNode\n\t* Description: Creates a new node.\n\t* Parameters:\n\t*\tparent {object} the parent node\n\t*\tbox {Box} the box of the node\n\t* Returns:\n\t*\t{object} the result\n\t*/\n\tJSM.Octree.prototype.CreateNewNode = function (parent, box)\n\t{\n\t\tvar newNode = {\n\t\t\tparent : parent,\n\t\t\tbox : box,\n\t\t\tcoords : [],\n\t\t\tchildren : null\n\t\t};\n\t\treturn newNode;\t\n\t};\n\n\t/**\n\t* Class: TriangleOctree\n\t* Description:\n\t*\tDefines an octree which stores triangles. Every triangle is placed in\n\t*\tthe smallest possible node which contains all of its vertices.\n\t* Parameters:\n\t*\tbox {Box} bounding box\n\t*/\n\tJSM.TriangleOctree = function (box)\n\t{\n\t\tthis.root = this.CreateNewNode (null, box);\n\t};\n\n\t/**\n\t* Function: TriangleOctree.AddTriangle\n\t* Description: Adds a triangle to the octree.\n\t* Parameters:\n\t*\tv0, v1, v2 {Coord} the vertices of the triangle\n\t*\tuserData {anything} user data for the triangle\n\t*/\n\tJSM.TriangleOctree.prototype.AddTriangle = function (v0, v1, v2, userData)\n\t{\n\t\treturn this.AddTriangleToNode (v0, v1, v2, this.root, userData);\n\t};\n\n\t/**\n\t* Function: TriangleOctree.AddTriangleToNode\n\t* Description: Adds a coordinate to a node.\n\t* Parameters:\n\t*\tv0, v1, v2 {Coord} the vertices of the triangle\n\t*\troot {object} the root node\n\t* Returns:\n\t*\t{boolean} success\n\t*/\n\tJSM.TriangleOctree.prototype.AddTriangleToNode = function (v0, v1, v2, root, userData)\n\t{\n\t\tfunction IsTriangleInNode (v0, v1, v2, node)\n\t\t{\n\t\t\treturn node.box.IsCoordInside (v0) && node.box.IsCoordInside (v1) && node.box.IsCoordInside (v2);\n\t\t}\n\t\t\n\t\tif (!IsTriangleInNode (v0, v1, v2, root)) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif (root.children === null) {\n\t\t\tvar myThis = this;\n\t\t\troot.children = JSM.CreateOctreeChildNodes (root.box, function (nodeBox) {\n\t\t\t\treturn myThis.CreateNewNode (root, nodeBox);\n\t\t\t});\n\t\t}\n\t\t\n\t\tif (root.children !== null) {\n\t\t\tvar i, node;\n\t\t\tfor (i = 0; i < root.children.length; i++) {\n\t\t\t\tnode = root.children[i];\n\t\t\t\tif (this.AddTriangleToNode (v0, v1, v2, node, userData)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\troot.triangles.push ({\n\t\t\tv0 : v0,\n\t\t\tv1 : v1,\n\t\t\tv2 : v2,\n\t\t\tuserData : userData\n\t\t});\n\t\treturn true;\n\t};\n\n\t/**\n\t* Function: TriangleOctree.CreateNewNode\n\t* Description: Creates a new node.\n\t* Parameters:\n\t*\tparent {object} the parent node\n\t*\tbox {Box} the box of the node\n\t* Returns:\n\t*\t{object} the result\n\t*/\n\tJSM.TriangleOctree.prototype.CreateNewNode = function (parent, box)\n\t{\n\t\tvar newNode = {\n\t\t\tparent : parent,\n\t\t\tbox : box,\n\t\t\ttriangles : [],\n\t\t\tchildren : null\n\t\t};\n\t\treturn newNode;\t\n\t};\n\n\treturn JSM;\n});\n"]}