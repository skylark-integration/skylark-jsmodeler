{"version":3,"sources":["geometry/polygon.js"],"names":["define","JSM","Polygon","this","vertices","cache","Clear","prototype","AddVertex","x","y","z","AddVertexCoord","Coord","coord","push","ClearCache","GetVertex","index","VertexCount","length","GetNextVertex","NextIndex","ReverseVertices","reverse","GetPrevVertex","PrevIndex","GetVertexAngle","prev","curr","next","prevDir","CoordSub","nextDir","AngleTo","GetNormal","normal","result","CalculateNormal","ToPolygon2D","i","vertex","Polygon2D","ToCoord2D","ToArray","Clone","FromArray","ContourPolygon","contours","lastContour","AddContourVertex","contourIndex","AddContourVertexCoord","vertexCount","ContourVertexCount","AddContour","contour","undefined","GetLastContour","GetContourVertex","vertexIndex","GetContour","ContourCount","ToContourPolygon2D","j","ContourPolygon2D","OffsetPolygonContour","polygon","width","prevVertex","currVertex","nextVertex","distance","offsetedCoord","angle","count","CoordOrientation","Orientation","Clockwise","Math","PI","sin","Offset","Rotate"],"mappings":"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","file":"../../geometry/polygon.js","sourcesContent":["define([\"../core/jsm\"],function(JSM){\n\t/**\n\t* Class: Polygon\n\t* Description: Represents a 3D polygon.\n\t*/\n\tJSM.Polygon = function ()\n\t{\n\t\tthis.vertices = null;\n\t\tthis.cache = null;\n\t\tthis.Clear ();\n\t};\n\n\t/**\n\t* Function: Polygon.AddVertex\n\t* Description: Adds a vertex to the polygon.\n\t* Parameters:\n\t*\tx {number} the x coordinate of the vertex\n\t*\ty {number} the y coordinate of the vertex\n\t*\tz {number} the z coordinate of the vertex\n\t*/\n\tJSM.Polygon.prototype.AddVertex = function (x, y, z)\n\t{\n\t\tthis.AddVertexCoord (new JSM.Coord (x, y, z));\n\t};\n\n\t/**\n\t* Function: Polygon.AddVertexCoord\n\t* Description: Adds a vertex coordinate to the polygon.\n\t* Parameters:\n\t*\tcoord {Coord} the coordinate\n\t*/\n\tJSM.Polygon.prototype.AddVertexCoord = function (coord)\n\t{\n\t\tthis.vertices.push (coord);\n\t\tthis.ClearCache ();\n\t};\n\n\t/**\n\t* Function: Polygon.GetVertex\n\t* Description: Returns the vertex with the given index.\n\t* Parameters:\n\t*\tindex {integer} the index of the vertex\n\t* Returns:\n\t*\t{Coord} the vertex\n\t*/\n\tJSM.Polygon.prototype.GetVertex = function (index)\n\t{\n\t\treturn this.vertices[index];\n\t};\n\n\t/**\n\t* Function: Polygon.VertexCount\n\t* Description: Returns the vertex count of the polygon.\n\t* Returns:\n\t*\t{integer} vertex count\n\t*/\n\tJSM.Polygon.prototype.VertexCount = function ()\n\t{\n\t\treturn this.vertices.length;\n\t};\n\n\t/**\n\t* Function: Polygon.GetNextVertex\n\t* Description: Returns the vertex index after the given one.\n\t* Parameters:\n\t*\tindex {integer} the vertex index\n\t* Returns:\n\t*\t{integer} the result\n\t*/\n\tJSM.Polygon.prototype.GetNextVertex = function (index)\n\t{\n\t\treturn JSM.NextIndex (index, this.vertices.length);\n\t};\n\n\t/**\n\t* Function: Polygon.ReverseVertices\n\t* Description: Reverses the orientation of the vertices.\n\t*/\n\tJSM.Polygon.prototype.ReverseVertices = function ()\n\t{\n\t\tthis.vertices.reverse ();\n\t\tthis.ClearCache ();\n\t};\n\n\t/**\n\t* Function: Polygon.GetPrevVertex\n\t* Description: Returns the vertex index before the given one.\n\t* Parameters:\n\t*\tindex {integer} the vertex index\n\t* Returns:\n\t*\t{integer} the result\n\t*/\n\tJSM.Polygon.prototype.GetPrevVertex = function (index)\n\t{\n\t\treturn JSM.PrevIndex (index, this.vertices.length);\n\t};\n\n\t/**\n\t* Function: Polygon.GetVertexAngle\n\t* Description: Returns the angle of the given vertex.\n\t* Parameters:\n\t*\tindex {integer} the vertex index\n\t* Returns:\n\t*\t{number} the result\n\t*/\n\tJSM.Polygon.prototype.GetVertexAngle = function (index)\n\t{\n\t\tvar prev = this.vertices[this.GetPrevVertex (index)];\n\t\tvar curr = this.vertices[index];\n\t\tvar next = this.vertices[this.GetNextVertex (index)];\n\t\tvar prevDir = JSM.CoordSub (prev, curr);\n\t\tvar nextDir = JSM.CoordSub (next, curr);\n\t\treturn prevDir.AngleTo (nextDir);\n\t};\n\n\t/**\n\t* Function: Polygon.GetNormal\n\t* Description: Calculates the normal vector of the polygon.\n\t* Returns:\n\t*\t{Vector} the result\n\t*/\n\tJSM.Polygon.prototype.GetNormal = function ()\n\t{\n\t\tif (this.cache.normal !== null) {\n\t\t\treturn this.cache.normal;\n\t\t}\n\t\tvar result = JSM.CalculateNormal (this.vertices);\n\t\tthis.cache.normal = result;\n\t\treturn result;\n\t};\n\n\t/**\n\t* Function: Polygon.ToPolygon2D\n\t* Description: Converts the polygon to a 2D polygon.\n\t* Returns:\n\t*\t{Polygon2D} the result\n\t*/\n\tJSM.Polygon.prototype.ToPolygon2D = function ()\n\t{\n\t\tvar normal = this.GetNormal ();\n\t\tvar result = new JSM.Polygon2D ();\n\t\tvar i, vertex;\n\t\tfor (i = 0; i < this.vertices.length; i++) {\n\t\t\tvertex = this.vertices[i].ToCoord2D (normal);\n\t\t\tresult.AddVertex (vertex.x, vertex.y);\n\t\t}\n\t\treturn result;\n\t};\n\n\t/**\n\t* Function: Polygon.ToArray\n\t* Description: Creates an array of vertices from polygon.\n\t* Returns:\n\t*\t{Coord[*]} the result\n\t*/\n\tJSM.Polygon.prototype.ToArray = function ()\n\t{\n\t\tvar vertices = [];\n\t\tvar i, vertex;\n\t\tfor (i = 0; i < this.vertices.length; i++) {\n\t\t\tvertex = this.vertices[i];\n\t\t\tvertices.push (vertex.Clone ());\n\t\t}\n\t\treturn vertices;\n\t};\n\n\t/**\n\t* Function: Polygon.FromArray\n\t* Description: Creates the polygon from an array of vertices.\n\t* Parameters:\n\t*\tvertices {Coord[*]} the array of vertices\n\t*/\n\tJSM.Polygon.prototype.FromArray = function (vertices)\n\t{\n\t\tthis.Clear ();\n\t\tvar i, vertex;\n\t\tfor (i = 0; i < vertices.length; i++) {\n\t\t\tvertex = vertices[i];\n\t\t\tthis.AddVertex (vertex.x, vertex.y, vertex.z);\n\t\t}\n\t};\n\n\t/**\n\t* Function: Polygon.Clear\n\t* Description: Makes the polygon empty.\n\t*/\n\tJSM.Polygon.prototype.Clear = function ()\n\t{\n\t\tthis.vertices = [];\n\t\tthis.ClearCache ();\n\t};\n\n\t/**\n\t* Function: Polygon.ClearCache\n\t* Description: Clears stored values from the polygon.\n\t*/\n\tJSM.Polygon.prototype.ClearCache = function ()\n\t{\n\t\tthis.cache = {\n\t\t\tnormal : null\n\t\t};\n\t};\n\n\t/**\n\t* Function: Polygon.Clone\n\t* Description: Clones the polygon.\n\t* Returns:\n\t*\t{Polygon} a cloned instance\n\t*/\n\tJSM.Polygon.prototype.Clone = function ()\n\t{\n\t\tvar result = new JSM.Polygon ();\n\t\tvar i, vertex;\n\t\tfor (i = 0; i < this.vertices.length; i++) {\n\t\t\tvertex = this.vertices[i];\n\t\t\tresult.AddVertexCoord (vertex.Clone ());\n\t\t}\n\t\treturn result;\n\t};\n\n\t/**\n\t* Class: ContourPolygon\n\t* Description: Represents a 3D polygon with more contours.\n\t*/\n\tJSM.ContourPolygon = function ()\n\t{\n\t\tthis.contours = null;\n\t\tthis.Clear ();\n\t};\n\n\t/**\n\t* Function: ContourPolygon.AddVertex\n\t* Description: Adds a vertex to the last contour of the polygon.\n\t* Parameters:\n\t*\tx {number} the x coordinate of the vertex\n\t*\ty {number} the y coordinate of the vertex\n\t*\tz {number} the z coordinate of the vertex\n\t*/\n\tJSM.ContourPolygon.prototype.AddVertex = function (x, y, z)\n\t{\n\t\tthis.lastContour.AddVertex (x, y, z);\n\t};\n\n\t/**\n\t* Function: ContourPolygon.AddVertexCoord\n\t* Description: Adds a vertex coordinate to the last contour of the polygon.\n\t* Parameters:\n\t*\tcoord {Coord} the coordinate\n\t*/\n\tJSM.ContourPolygon.prototype.AddVertexCoord = function (coord)\n\t{\n\t\tthis.lastContour.AddVertexCoord (coord);\n\t};\n\n\t/**\n\t* Function: ContourPolygon.AddContourVertex\n\t* Description: Adds a vertex to the given contour of the polygon.\n\t* Parameters:\n\t*\tcontourIndex {integer} the index of the contour\n\t*\tx {number} the x coordinate of the vertex\n\t*\ty {number} the y coordinate of the vertex\n\t*\tz {number} the z coordinate of the vertex\n\t*/\n\tJSM.ContourPolygon.prototype.AddContourVertex = function (contourIndex, x, y, z)\n\t{\n\t\treturn this.contours[contourIndex].AddVertex (x, y, z);\n\t};\n\n\t/**\n\t* Function: ContourPolygon.AddContourVertexCoord\n\t* Description: Adds a vertex coordinate to the given contour of the polygon.\n\t* Parameters:\n\t*\tcontourIndex {integer} the index of the contour\n\t*\tcoord {Coord} the coordinate\n\t*/\n\tJSM.ContourPolygon.prototype.AddContourVertexCoord = function (contourIndex, coord)\n\t{\n\t\treturn this.contours[contourIndex].AddVertexCoord (coord);\n\t};\n\n\t/**\n\t* Function: ContourPolygon.VertexCount\n\t* Description: Returns the vertex count of the polygon.\n\t* Returns:\n\t*\t{integer} vertex count\n\t*/\n\tJSM.ContourPolygon.prototype.VertexCount = function ()\n\t{\n\t\tvar vertexCount = 0;\n\t\tvar i;\n\t\tfor (i = 0; i < this.contours.length; i++) {\n\t\t\tvertexCount += this.contours[i].VertexCount ();\n\t\t}\n\t\treturn vertexCount;\n\t};\n\n\t/**\n\t* Function: ContourPolygon.ContourVertexCount\n\t* Description: Returns the vertex count of the given contour of the polygon.\n\t* Parameters:\n\t*\tcontourIndex {integer} the index of the contour\n\t* Returns:\n\t*\t{integer} vertex count\n\t*/\n\tJSM.ContourPolygon.prototype.ContourVertexCount = function (contourIndex)\n\t{\n\t\treturn this.contours[contourIndex].VertexCount ();\n\t};\n\n\t/**\n\t* Function: ContourPolygon.AddContour\n\t* Description:\n\t*\tAdds a contour to the polygon. If the given contour is null,\n\t*\tan empty contour is added to the polygon.\n\t* Parameters:\n\t*\tcontour {Polygon} the new contour\n\t*/\n\tJSM.ContourPolygon.prototype.AddContour = function (contour)\n\t{\n\t\tif (contour === undefined || contour === null) {\n\t\t\tthis.lastContour = new JSM.Polygon ();\n\t\t} else {\n\t\t\tthis.lastContour = contour;\n\t\t}\n\t\tthis.contours.push (this.lastContour);\n\t};\n\n\t/**\n\t* Function: ContourPolygon.GetLastContour\n\t* Description: Returns the last contour of the polygon.\n\t* Returns:\n\t*\t{Polygon} the result\n\t*/\n\tJSM.ContourPolygon.prototype.GetLastContour = function ()\n\t{\n\t\treturn this.lastContour;\n\t};\n\n\t/**\n\t* Function: ContourPolygon.GetContourVertex\n\t* Description: Returns the vertex of the given contour with the given index.\n\t* Parameters:\n\t*\tcontourIndex {integer} the index of the contour\n\t*\tvertexIndex {integer} the index of the vertex\n\t* Returns:\n\t*\t{Coord} the vertex\n\t*/\n\tJSM.ContourPolygon.prototype.GetContourVertex = function (contourIndex, vertexIndex)\n\t{\n\t\treturn this.contours[contourIndex].GetVertex (vertexIndex);\n\t};\n\n\t/**\n\t* Function: ContourPolygon.GetContour\n\t* Description: Returns the contour with the given index.\n\t* Parameters:\n\t*\tcontourIndex {integer} the index of the contour\n\t* Returns:\n\t*\t{Polygon} the contour\n\t*/\n\tJSM.ContourPolygon.prototype.GetContour = function (contourIndex)\n\t{\n\t\treturn this.contours[contourIndex];\n\t};\n\n\t/**\n\t* Function: ContourPolygon.ContourCount\n\t* Description: Returns the contour count of the polygon.\n\t* Returns:\n\t*\t{integer} contour count\n\t*/\n\tJSM.ContourPolygon.prototype.ContourCount = function ()\n\t{\n\t\treturn this.contours.length;\n\t};\n\n\t/**\n\t* Function: ContourPolygon.ToContourPolygon2D\n\t* Description: Converts the polygon to a 2D polygon.\n\t* Returns:\n\t*\t{ContourPolygon2D} the result\n\t*/\n\tJSM.ContourPolygon.prototype.ToContourPolygon2D = function ()\n\t{\n\t\tvar normal = this.contours[0].GetNormal ();\n\t\tvar result = new JSM.ContourPolygon2D ();\n\t\tvar i, j, contour, vertex;\n\t\tfor (i = 0; i < this.contours.length; i++) {\n\t\t\tresult.AddContour ();\n\t\t\tcontour = this.contours[i];\n\t\t\tfor (j = 0; j < contour.VertexCount (); j++) {\n\t\t\t\tvertex = contour.GetVertex (j);\n\t\t\t\tresult.AddVertexCoord (vertex.ToCoord2D (normal));\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t};\n\n\t/**\n\t* Function: ContourPolygon.ToArray\n\t* Description:\n\t*\tCreates an array of vertices from polygon. The result contains\n\t*\tnull values between contours.\n\t* Returns:\n\t*\t{Coord[*]} the result\n\t*/\n\tJSM.ContourPolygon.prototype.ToArray = function ()\n\t{\n\t\tvar vertices = [];\n\t\tvar i, j, contour, vertex;\n\t\tfor (i = 0; i < this.contours.length; i++) {\n\t\t\tcontour = this.contours[i];\n\t\t\tfor (j = 0; j < contour.VertexCount (); j++) {\n\t\t\t\tvertex = contour.GetVertex (j);\n\t\t\t\tvertices.push (vertex.Clone ());\n\t\t\t}\n\t\t\tif (i < this.contours.length - 1) {\n\t\t\t\tvertices.push (null);\n\t\t\t}\n\t\t}\n\t\treturn vertices;\n\t};\n\n\t/**\n\t* Function: ContourPolygon.FromArray\n\t* Description:\n\t*\tCreates the polygon from an array of vertices. The input should contain\n\t*\tnull values between contours.\n\t* Parameters:\n\t*\tvertices {Coord[*]} the array of vertices\n\t*/\n\tJSM.ContourPolygon.prototype.FromArray = function (vertices)\n\t{\n\t\tthis.Clear ();\n\t\tthis.AddContour ();\n\t\tvar i, vertex;\n\t\tfor (i = 0; i < vertices.length; i++) {\n\t\t\tvertex = vertices[i];\n\t\t\tif (vertex === null) {\n\t\t\t\tthis.AddContour ();\n\t\t\t} else {\n\t\t\t\tthis.AddVertex (vertex.x, vertex.y, vertex.z);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t* Function: ContourPolygon.Clear\n\t* Description: Makes the polygon empty.\n\t*/\n\tJSM.ContourPolygon.prototype.Clear = function ()\n\t{\n\t\tthis.contours = [];\n\t\tthis.lastContour = null;\n\t};\n\n\t/**\n\t* Function: ContourPolygon.Clone\n\t* Description: Clones the polygon.\n\t* Returns:\n\t*\t{ContourPolygon} a cloned instance\n\t*/\n\tJSM.ContourPolygon.prototype.Clone = function ()\n\t{\n\t\tvar result = new JSM.ContourPolygon ();\n\t\tvar i, contour;\n\t\tfor (i = 0; i < this.contours.length; i++) {\n\t\t\tcontour = this.contours[i];\n\t\t\tresult.AddContour (contour.Clone ());\n\t\t}\n\t\treturn result;\n\n\t};\n\n\t/**\n\t* Function: OffsetPolygonContour\n\t* Description: Offsets all vertices of a polygon.\n\t* Parameters:\n\t*\tpolygon {Polygon} the polygon\n\t*\twidth {number} the width of the offset\n\t* Returns:\n\t*\t{Polygon} the result\n\t*/\n\tJSM.OffsetPolygonContour = function (polygon, width)\n\t{\n\t\tvar count = polygon.VertexCount ();\n\t\tvar normal = polygon.GetNormal ();\n\n\t\tvar prev, curr, next;\n\t\tvar prevVertex, currVertex, nextVertex;\n\t\tvar prevDir, nextDir;\n\t\tvar distance, offsetedCoord;\n\t\t\n\t\tvar result = new JSM.Polygon ();\n\t\t\n\t\tvar i, angle;\n\t\tfor (i = 0; i < count; i++) {\n\t\t\tprev = polygon.GetPrevVertex (i);\n\t\t\tcurr = i;\n\t\t\tnext = polygon.GetNextVertex (i);\n\t\t\t\n\t\t\tprevVertex = polygon.GetVertex (prev);\n\t\t\tcurrVertex = polygon.GetVertex (curr);\n\t\t\tnextVertex = polygon.GetVertex (next);\n\n\t\t\tprevDir = JSM.CoordSub (prevVertex, currVertex);\n\t\t\tnextDir = JSM.CoordSub (nextVertex, currVertex);\n\t\t\tangle = prevDir.AngleTo (nextDir) / 2.0;\n\t\t\tif (JSM.CoordOrientation (prevVertex, currVertex, nextVertex, normal) == JSM.Orientation.Clockwise) {\n\t\t\t\tangle = Math.PI - angle;\n\t\t\t}\n\n\t\t\tdistance = width / Math.sin (angle);\n\t\t\toffsetedCoord = currVertex.Clone ();\n\t\t\toffsetedCoord.Offset (nextDir, distance);\n\t\t\toffsetedCoord.Rotate (normal, angle, currVertex);\n\t\t\tresult.AddVertex (offsetedCoord.x, offsetedCoord.y, offsetedCoord.z);\n\t\t}\n\t\t\n\t\treturn result;\n\t};\n\n\treturn JSM;\n});\n"]}