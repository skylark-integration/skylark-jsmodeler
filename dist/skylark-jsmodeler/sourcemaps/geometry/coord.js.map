{"version":3,"sources":["geometry/coord.js"],"names":["define","JSM","Coord","x","y","z","this","prototype","Set","IsEqual","coord","IsEqualWithEps","eps","DistanceTo","Math","sqrt","AngleTo","aDirection","Clone","Normalize","bDirection","product","VectorDot","ArcCos","IsCollinearWith","angle","PI","IsPerpendicularWith","Length","Add","Sub","MultiplyScalar","scalar","length","IsPositive","SetLength","thisLength","Offset","direction","distance","normal","Rotate","axis","origo","u","v","w","si","sin","co","cos","ToCoord2D","zNormal","Vector","VectorCross","rotated","Coord2D","ToString","CoordFromArray","array","CoordToArray","CoordAdd","a","b","CoordSub","result"],"mappings":"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","file":"../../geometry/coord.js","sourcesContent":["define([\"../core/jsm\"],function(JSM){\n\t/**\n\t* Class: Coord\n\t* Description: Represents a 3D coordinate.\n\t* Parameters:\n\t*\tx {number} the first component\n\t*\ty {number} the second component\n\t*\tz {number} the third component\n\t*/\n\tJSM.Coord = function (x, y, z)\n\t{\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t};\n\n\t/**\n\t* Function: Coord.Set\n\t* Description: Sets the coordinate.\n\t* Parameters:\n\t*\tx {number} the first component\n\t*\ty {number} the second component\n\t*\tz {number} the third component\n\t*/\n\tJSM.Coord.prototype.Set = function (x, y, z)\n\t{\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t};\n\n\t/**\n\t* Function: Coord.IsEqual\n\t* Description: Returns if the coordinate is equal with the given one.\n\t* Parameters:\n\t*\tcoord {Coord} the coordinate\n\t* Returns:\n\t*\t{boolean} the result\n\t*/\n\tJSM.Coord.prototype.IsEqual = function (coord)\n\t{\n\t\treturn JSM.IsEqual (this.x, coord.x) && JSM.IsEqual (this.y, coord.y) && JSM.IsEqual (this.z, coord.z);\n\t};\n\n\t/**\n\t* Function: Coord.IsEqualWithEps\n\t* Description: Returns if the coordinate is equal with the given one. Uses the given epsilon for comparison.\n\t* Parameters:\n\t*\tcoord {Coord} the coordinate\n\t*\teps {number} the epsilon\n\t* Returns:\n\t*\t{boolean} the result\n\t*/\n\tJSM.Coord.prototype.IsEqualWithEps = function (coord, eps)\n\t{\n\t\treturn JSM.IsEqualWithEps (this.x, coord.x, eps) && JSM.IsEqualWithEps (this.y, coord.y, eps) && JSM.IsEqualWithEps (this.z, coord.z, eps);\n\t};\n\n\t/**\n\t* Function: Coord.DistanceTo\n\t* Description: Calculates the coordinate distance to the given one.\n\t* Parameters:\n\t*\tcoord {Coord} the coordinate\n\t* Returns:\n\t*\t{number} the result\n\t*/\n\tJSM.Coord.prototype.DistanceTo = function (coord)\n\t{\n\t\treturn Math.sqrt ((coord.x - this.x) * (coord.x - this.x) + (coord.y - this.y) * (coord.y - this.y) + (coord.z - this.z) * (coord.z - this.z));\n\t};\n\n\t/**\n\t* Function: Coord.AngleTo\n\t* Description: Calculates the coordinate vector angle to the given one.\n\t* Parameters:\n\t*\tcoord {Coord} the coordinate\n\t* Returns:\n\t*\t{number} the result\n\t*/\n\tJSM.Coord.prototype.AngleTo = function (coord)\n\t{\n\t\tvar aDirection = this.Clone ().Normalize ();\n\t\tvar bDirection = coord.Clone ().Normalize ();\n\t\tif (aDirection.IsEqual (bDirection)) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tvar product = JSM.VectorDot (aDirection, bDirection);\n\t\treturn JSM.ArcCos (product);\n\t};\n\n\t/**\n\t* Function: Coord.IsCollinearWith\n\t* Description: Returns if the coordinate vector is collinear with the given one.\n\t* Parameters:\n\t*\tcoord {Coord} the coordinate\n\t* Returns:\n\t*\t{boolean} the result\n\t*/\n\tJSM.Coord.prototype.IsCollinearWith = function (coord)\n\t{\n\t\tvar angle = this.AngleTo (coord);\n\t\treturn JSM.IsEqual (angle, 0.0) || JSM.IsEqual (angle, Math.PI);\n\t};\n\n\t/**\n\t* Function: Coord.IsPerpendicularWith\n\t* Description: Returns if the coordinate vector is perpendicular with the given one.\n\t* Parameters:\n\t*\tcoord {Coord} the coordinate\n\t* Returns:\n\t*\t{boolean} the result\n\t*/\n\tJSM.Coord.prototype.IsPerpendicularWith = function (coord)\n\t{\n\t\tvar angle = this.AngleTo (coord);\n\t\treturn JSM.IsEqual (angle, Math.PI / 2.0);\n\t};\n\n\t/**\n\t* Function: Coord.Length\n\t* Description: Calculates the length of the coordinate vector.\n\t* Returns:\n\t*\t{number} the result\n\t*/\n\tJSM.Coord.prototype.Length = function ()\n\t{\n\t\treturn Math.sqrt (this.x * this.x + this.y * this.y + this.z * this.z);\n\t};\n\n\t/**\n\t* Function: Coord.Add\n\t* Description: Adds the given coordinate to coordinate.\n\t* Parameters:\n\t*\tcoord {Coord} the coordinate\n\t*/\n\tJSM.Coord.prototype.Add = function (coord)\n\t{\n\t\tthis.x += coord.x;\n\t\tthis.y += coord.y;\n\t\tthis.z += coord.z;\n\t};\n\n\t/**\n\t* Function: Coord.Sub\n\t* Description: Subs the given coordinate from coordinate.\n\t* Parameters:\n\t*\tcoord {Coord} the coordinate\n\t*/\n\tJSM.Coord.prototype.Sub = function (coord)\n\t{\n\t\tthis.x -= coord.x;\n\t\tthis.y -= coord.y;\n\t\tthis.z -= coord.z;\n\t};\n\n\t/**\n\t* Function: Coord.MultiplyScalar\n\t* Description: Multiplies the vector with a scalar.\n\t* Parameters:\n\t*\tscalar {number} the scalar\n\t* Returns:\n\t*\t{Coord} this pointer\n\t*/\n\tJSM.Coord.prototype.MultiplyScalar = function (scalar)\n\t{\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\t\treturn this;\n\t};\n\n\t/**\n\t* Function: Coord.Normalize\n\t* Description: Normalizes the coordinate vector.\n\t* Returns:\n\t*\t{Coord} this pointer\n\t*/\n\tJSM.Coord.prototype.Normalize = function ()\n\t{\n\t\tvar length = this.Length ();\n\t\tif (JSM.IsPositive (length)) {\n\t\t\tthis.MultiplyScalar (1.0 / length);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t* Function: Coord.SetLength\n\t* Description: Sets the length of the coordinate vector.\n\t* Parameters:\n\t*\tlength {number} the length\n\t* Returns:\n\t*\t{Coord} this pointer\n\t*/\n\tJSM.Coord.prototype.SetLength = function (length)\n\t{\n\t\tvar thisLength = this.Length ();\n\t\tif (JSM.IsPositive (thisLength)) {\n\t\t\tthis.MultiplyScalar (length / thisLength);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t* Function: Coord.Offset\n\t* Description: Offsets the coordinate.\n\t* Parameters:\n\t*\tdirection {Vector} the direction of the offset\n\t*\tdistance {number} the distance of the offset\n\t* Returns:\n\t*\t{Coord} this pointer\n\t*/\n\tJSM.Coord.prototype.Offset = function (direction, distance)\n\t{\n\t\tvar normal = direction.Clone ().Normalize ();\n\t\tthis.x += normal.x * distance;\n\t\tthis.y += normal.y * distance;\n\t\tthis.z += normal.z * distance;\n\t\treturn this;\n\t};\n\n\t/**\n\t* Function: Coord.Rotate\n\t* Description: Rotates the coordinate.\n\t* Parameters:\n\t*\taxis {Vector} the axis of the rotation\n\t*\tangle {number} the angle of the rotation\n\t*\torigo {Coord} the origo of the rotation\n\t* Returns:\n\t*\t{Coord} this pointer\n\t*/\n\n\tJSM.Coord.prototype.Rotate = function (axis, angle, origo)\n\t{\n\t\tvar normal = axis.Clone ().Normalize ();\n\n\t\tvar u = normal.x;\n\t\tvar v = normal.y;\n\t\tvar w = normal.z;\n\n\t\tvar x = this.x - origo.x;\n\t\tvar y = this.y - origo.y;\n\t\tvar z = this.z - origo.z;\n\n\t\tvar si = Math.sin (angle);\n\t\tvar co = Math.cos (angle);\n\t\tthis.x = - u * (- u * x - v * y - w * z) * (1.0 - co) + x * co + (- w * y + v * z) * si;\n\t\tthis.y = - v * (- u * x - v * y - w * z) * (1.0 - co) + y * co + (w * x - u * z) * si;\n\t\tthis.z = - w * (- u * x - v * y - w * z) * (1.0 - co) + z * co + (- v * x + u * y) * si;\n\t\t\n\t\tthis.x += origo.x;\n\t\tthis.y += origo.y;\n\t\tthis.z += origo.z;\n\t\treturn this;\n\t};\n\n\t/**\n\t* Function: Coord.ToCoord2D\n\t* Description: Converts the coordinate to a 2D coordinate.\n\t* Parameters:\n\t*\tnormal {Vector} the normal vector for conversion\n\t* Returns:\n\t*\t{Coord2D} the result\n\t*/\n\tJSM.Coord.prototype.ToCoord2D = function (normal)\n\t{\n\t\tvar origo = new JSM.Coord (0.0, 0.0, 0.0);\n\t\tvar zNormal = new JSM.Vector (0.0, 0.0, 1.0);\n\t\tvar axis = JSM.VectorCross (normal, zNormal);\n\t\tvar angle = normal.AngleTo (zNormal);\n\t\tvar rotated = this.Clone ().Rotate (axis, angle, origo);\n\t\treturn new JSM.Coord2D (rotated.x, rotated.y);\n\t};\n\n\t/**\n\t* Function: Coord.ToString\n\t* Description: Converts the coordinate values to string.\n\t* Returns:\n\t*\t{string} the string representation of the coordinate\n\t*/\n\tJSM.Coord.prototype.ToString = function ()\n\t{\n\t\treturn ('(' + this.x + ', ' + this.y + ', ' + this.z + ')');\n\t};\n\n\t/**\n\t* Function: Coord.Clone\n\t* Description: Clones the coordinate.\n\t* Returns:\n\t*\t{Coord} a cloned instance\n\t*/\n\tJSM.Coord.prototype.Clone = function ()\n\t{\n\t\treturn new JSM.Coord (this.x, this.y, this.z);\n\t};\n\n\t/**\n\t* Class: Vector\n\t* Description: Same as Coord.\n\t*/\n\tJSM.Vector = JSM.Coord;\n\n\t/**\n\t* Function: CoordFromArray\n\t* Description: Returns a coordinate from an array of components.\n\t* Parameters:\n\t*\tarray {number[3]} the array of components\n\t* Returns:\n\t*\t{Coord} the result\n\t*/\n\tJSM.CoordFromArray = function (array)\n\t{\n\t\treturn new JSM.Coord (array[0], array[1], array[2]);\n\t};\n\n\t/**\n\t* Function: CoordToArray\n\t* Description: Returns array of components from a coordinate.\n\t* Parameters:\n\t*\tcoord {Coord} the coordinate\n\t* Returns:\n\t*\tarray {number[3]} the result\n\t*/\n\tJSM.CoordToArray = function (coord)\n\t{\n\t\treturn [coord.x, coord.y, coord.z];\n\t};\n\n\t/**\n\t* Function: CoordAdd\n\t* Description: Adds two coordinates.\n\t* Parameters:\n\t*\ta {Coord} the first coordinate\n\t*\tb {Coord} the second coordinate\n\t* Returns:\n\t*\t{Coord} the result\n\t*/\n\tJSM.CoordAdd = function (a, b)\n\t{\n\t\treturn new JSM.Coord (a.x + b.x, a.y + b.y, a.z + b.z);\n\t};\n\n\t/**\n\t* Function: CoordSub\n\t* Description: Subs two coordinates.\n\t* Parameters:\n\t*\ta {Coord} the first coordinate\n\t*\tb {Coord} the second coordinate\n\t* Returns:\n\t*\t{Coord} the result\n\t*/\n\tJSM.CoordSub = function (a, b)\n\t{\n\t\treturn new JSM.Coord (a.x - b.x, a.y - b.y, a.z - b.z);\n\t};\n\n\t/**\n\t* Function: VectorDot\n\t* Description: Calculates the dot product of two vectors.\n\t* Parameters:\n\t*\ta {Vector} the first vector\n\t*\tb {Vector} the second vector\n\t* Returns:\n\t*\t{number} the result\n\t*/\n\tJSM.VectorDot = function (a, b)\n\t{\n\t\treturn a.x * b.x + a.y * b.y + a.z * b.z;\n\t};\n\n\t/**\n\t* Function: VectorCross\n\t* Description: Calculates the cross product of two vectors.\n\t* Parameters:\n\t*\ta {Vector} the first vector\n\t*\tb {Vector} the second vector\n\t* Returns:\n\t*\t{Vector} the result\n\t*/\n\tJSM.VectorCross = function (a, b)\n\t{\n\t\tvar result = new JSM.Vector (0.0, 0.0, 0.0);\n\t\tresult.x = a.y * b.z - a.z * b.y;\n\t\tresult.y = a.z * b.x - a.x * b.z;\n\t\tresult.z = a.x * b.y - a.y * b.x;\n\t\treturn result;\n\t};\n\n\treturn JSM;\n});\n"]}