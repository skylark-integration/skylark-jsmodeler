{"version":3,"sources":["import/binaryreader.js"],"names":["define","JSM","BinaryReader","arrayBuffer","isLittleEndian","this","dataView","DataView","position","prototype","GetPosition","GetByteLength","byteLength","Skip","bytes","End","ReadBoolean","result","getInt8","ReadCharacter","ReadUnsignedCharacter","getUint8","ReadInteger16","getInt16","ReadUnsignedInteger16","getUint16","ReadInteger32","getInt32","ReadUnsignedInteger32","getUint32","ReadFloat32","getFloat32","ReadDouble64","getFloat64"],"mappings":";;;;;;;AAAAA,QAAQ,eAAe,SAASC,GA4F/B,OA3FAA,EAAIC,aAAe,SAAUC,EAAaC,GAEzCC,KAAKF,YAAcA,EACnBE,KAAKC,SAAW,IAAIC,SAAUJ,GAC9BE,KAAKD,eAAiBA,EACtBC,KAAKG,SAAW,GAGjBP,EAAIC,aAAaO,UAAUC,YAAc,WAExC,OAAOL,KAAKG,UAGbP,EAAIC,aAAaO,UAAUE,cAAgB,WAE1C,OAAON,KAAKF,YAAYS,YAGzBX,EAAIC,aAAaO,UAAUI,KAAO,SAAUC,GAE3CT,KAAKG,SAAWH,KAAKG,SAAWM,GAGjCb,EAAIC,aAAaO,UAAUM,IAAM,WAEhC,OAAOV,KAAKG,UAAYH,KAAKF,YAAYS,YAG1CX,EAAIC,aAAaO,UAAUO,YAAc,WAExC,IAAIC,EAASZ,KAAKC,SAASY,QAASb,KAAKG,UAEzC,OADAH,KAAKG,SAAWH,KAAKG,SAAW,IACzBS,GAGRhB,EAAIC,aAAaO,UAAUU,cAAgB,WAE1C,IAAIF,EAASZ,KAAKC,SAASY,QAASb,KAAKG,UAEzC,OADAH,KAAKG,SAAWH,KAAKG,SAAW,EACzBS,GAGRhB,EAAIC,aAAaO,UAAUW,sBAAwB,WAElD,IAAIH,EAASZ,KAAKC,SAASe,SAAUhB,KAAKG,UAE1C,OADAH,KAAKG,SAAWH,KAAKG,SAAW,EACzBS,GAGRhB,EAAIC,aAAaO,UAAUa,cAAgB,WAE1C,IAAIL,EAASZ,KAAKC,SAASiB,SAAUlB,KAAKG,SAAUH,KAAKD,gBAEzD,OADAC,KAAKG,SAAWH,KAAKG,SAAW,EACzBS,GAGRhB,EAAIC,aAAaO,UAAUe,sBAAwB,WAElD,IAAIP,EAASZ,KAAKC,SAASmB,UAAWpB,KAAKG,SAAUH,KAAKD,gBAE1D,OADAC,KAAKG,SAAWH,KAAKG,SAAW,EACzBS,GAGRhB,EAAIC,aAAaO,UAAUiB,cAAgB,WAE1C,IAAIT,EAASZ,KAAKC,SAASqB,SAAUtB,KAAKG,SAAUH,KAAKD,gBAEzD,OADAC,KAAKG,SAAWH,KAAKG,SAAW,EACzBS,GAGRhB,EAAIC,aAAaO,UAAUmB,sBAAwB,WAElD,IAAIX,EAASZ,KAAKC,SAASuB,UAAWxB,KAAKG,SAAUH,KAAKD,gBAE1D,OADAC,KAAKG,SAAWH,KAAKG,SAAW,EACzBS,GAGRhB,EAAIC,aAAaO,UAAUqB,YAAc,WAExC,IAAIb,EAASZ,KAAKC,SAASyB,WAAY1B,KAAKG,SAAUH,KAAKD,gBAE3D,OADAC,KAAKG,SAAWH,KAAKG,SAAW,EACzBS,GAGRhB,EAAIC,aAAaO,UAAUuB,aAAe,WAEzC,IAAIf,EAASZ,KAAKC,SAAS2B,WAAY5B,KAAKG,SAAUH,KAAKD,gBAE3D,OADAC,KAAKG,SAAWH,KAAKG,SAAW,EACzBS,GAGDhB","file":"../../import/binaryreader.js","sourcesContent":["define([\"../core/jsm\"],function(JSM){\n\tJSM.BinaryReader = function (arrayBuffer, isLittleEndian)\n\t{\n\t\tthis.arrayBuffer = arrayBuffer;\n\t\tthis.dataView = new DataView (arrayBuffer);\n\t\tthis.isLittleEndian = isLittleEndian;\n\t\tthis.position = 0;\n\t};\n\n\tJSM.BinaryReader.prototype.GetPosition = function ()\n\t{\n\t\treturn this.position;\n\t};\n\n\tJSM.BinaryReader.prototype.GetByteLength = function ()\n\t{\n\t\treturn this.arrayBuffer.byteLength;\n\t};\n\n\tJSM.BinaryReader.prototype.Skip = function (bytes)\n\t{\n\t\tthis.position = this.position + bytes;\n\t};\n\n\tJSM.BinaryReader.prototype.End = function ()\n\t{\n\t\treturn this.position >= this.arrayBuffer.byteLength;\n\t};\n\n\tJSM.BinaryReader.prototype.ReadBoolean = function ()\n\t{\n\t\tvar result = this.dataView.getInt8 (this.position);\n\t\tthis.position = this.position + 1;\n\t\treturn result ? true : false;\n\t};\n\n\tJSM.BinaryReader.prototype.ReadCharacter = function ()\n\t{\n\t\tvar result = this.dataView.getInt8 (this.position);\n\t\tthis.position = this.position + 1;\n\t\treturn result;\n\t};\n\n\tJSM.BinaryReader.prototype.ReadUnsignedCharacter = function ()\n\t{\n\t\tvar result = this.dataView.getUint8 (this.position);\n\t\tthis.position = this.position + 1;\n\t\treturn result;\n\t};\n\n\tJSM.BinaryReader.prototype.ReadInteger16 = function ()\n\t{\n\t\tvar result = this.dataView.getInt16 (this.position, this.isLittleEndian);\n\t\tthis.position = this.position + 2;\n\t\treturn result;\n\t};\n\n\tJSM.BinaryReader.prototype.ReadUnsignedInteger16 = function ()\n\t{\n\t\tvar result = this.dataView.getUint16 (this.position, this.isLittleEndian);\n\t\tthis.position = this.position + 2;\n\t\treturn result;\n\t};\n\n\tJSM.BinaryReader.prototype.ReadInteger32 = function ()\n\t{\n\t\tvar result = this.dataView.getInt32 (this.position, this.isLittleEndian);\n\t\tthis.position = this.position + 4;\n\t\treturn result;\n\t};\n\n\tJSM.BinaryReader.prototype.ReadUnsignedInteger32 = function ()\n\t{\n\t\tvar result = this.dataView.getUint32 (this.position, this.isLittleEndian);\n\t\tthis.position = this.position + 4;\n\t\treturn result;\n\t};\n\n\tJSM.BinaryReader.prototype.ReadFloat32 = function ()\n\t{\n\t\tvar result = this.dataView.getFloat32 (this.position, this.isLittleEndian);\n\t\tthis.position = this.position + 4;\n\t\treturn result;\n\t};\n\n\tJSM.BinaryReader.prototype.ReadDouble64 = function ()\n\t{\n\t\tvar result = this.dataView.getFloat64 (this.position, this.isLittleEndian);\n\t\tthis.position = this.position + 8;\n\t\treturn result;\n\t};\n\n\treturn JSM;\n});\n"]}