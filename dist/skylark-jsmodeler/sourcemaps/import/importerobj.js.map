{"version":3,"sources":["import/importerobj.js"],"names":["define","JSM","ReadObjFile","stringBuffer","callbacks","ProcessLine","line","objectCounter","GetIndex","index","count","GetFileName","keyword","fileNameIndex","indexOf","length","substr","trim","i","fileName","textureName","name","x","y","z","lineParts","split","meshName","undefined","onMesh","OnMesh","vertexCount","parseFloat","onVertex","normalCount","onNormal","OnNormal","uvCount","onTexCoord","OnTexCoord","partSplitted","vertices","normals","uvs","push","parseInt","onFace","OnFace","onUseMaterial","onNewMaterial","OnNewMaterial","red","green","blue","onMaterialComponent","OnMaterialComponent","value","onMaterialParameter","OnMaterialParameter","onMaterialTexture","fileStringBuffer","onFileRequested","OnFileRequested","ProcessFile","lines","ConvertObjToJsonData","triangleModel","TriangleModel","AddBody","TriangleBody","currentBody","GetBody","materialNameToIndex","currentMaterial","currentMaterialIndex","globalVertices","globalNormals","globalUVs","globalToLocalVertices","globalToLocalNormals","globalToLocalUVs","AddMaterial","GetMaterial","ambient","diffuse","specular","shininess","IsPositive","Math","log2","opacity","textureBuffer","blob","window","Blob","blobURL","URL","createObjectURL","texture","materialIndex","Coord","Coord2D","GetLocalIndex","globalValueArray","globalToLocalIndices","globalIndex","valueAdderFunc","result","GetLocalVertexIndex","triangleBody","val","AddVertex","GetLocalNormalIndex","AddNormal","GetLocalUVIndex","AddUV","v0","v1","v2","triangle","triangleIndex","hasNormals","hasUVs","AddTriangle","GetTriangle","n0","n1","n2","u0","u1","u2","mat","Finalize","ConvertTriangleModelToJsonData"],"mappings":";;;;;;;AAAAA,QAAQ,eAAe,SAASC,GAmZ/B,OAlZAA,EAAIC,YAAc,SAAUC,EAAcC,GAgFzC,SAASC,EAAaC,EAAMC,GAE3B,SAASC,EAAUC,EAAOC,GAEzB,OAAID,EAAQ,EACJA,EAAQ,EAERC,EAAQD,EAIjB,SAASE,EAAaL,EAAMM,GAE3B,IAAIC,EAAgBP,EAAKQ,QAASF,GAAWA,EAAQG,OAErD,OADeT,EAAKU,OAAQH,EAAeP,EAAKS,OAASF,GACzCI,OAGjB,GAAoB,IAAhBX,EAAKS,QAIM,KAAXT,EAAK,GAAT,CAIA,IAKIY,EAAGC,EAxFoBC,EAOJC,EAcLC,EAAGC,EAAGC,EA8DpBC,EAAYnB,EAAKoB,MAAO,OAC5B,GAAyB,IAArBD,EAAUV,QAAmC,KAAnBU,EAAU,GAAG,GAK3C,GAAoB,KAAhBA,EAAU,GAAW,CACxB,GAAIA,EAAUV,OAAS,EACtB,OAED,IAAIY,EAAW,GACf,IAAKT,EAAI,EAAGA,EAAIO,EAAUV,OAAQG,IACjCS,GAAYF,EAAUP,GAClBA,EAAIO,EAAUV,OAAS,IAC1BY,GAAY,MAnFhB,SAAiBA,QAESC,IAArBxB,EAAUyB,QAA6C,OAArBzB,EAAUyB,QAC/CzB,EAAUyB,OAAQF,GAmFlBG,CAAQH,QACF,GAAoB,KAAhBF,EAAU,GAAW,CAC/B,GAAIA,EAAUV,OAAS,EACtB,OAEDR,EAAcwB,aAAe,EApFZT,EAqFPU,WAAYP,EAAU,IArFZF,EAqFiBS,WAAYP,EAAU,IArFpCD,EAqFyCQ,WAAYP,EAAU,SAnF5DG,IAAvBxB,EAAU6B,UAAiD,OAAvB7B,EAAU6B,UACjD7B,EAAU6B,SAAUX,EAAGC,EAAGC,QAmFpB,GAAoB,MAAhBC,EAAU,GAAY,CAChC,GAAIA,EAAUV,OAAS,EACtB,OAEDR,EAAc2B,aAAe,EAnF/B,SAAmBZ,EAAGC,EAAGC,QAEGI,IAAvBxB,EAAU+B,UAAiD,OAAvB/B,EAAU+B,UACjD/B,EAAU+B,SAAUb,EAAGC,EAAGC,GAiF1BY,CAAUJ,WAAYP,EAAU,IAAKO,WAAYP,EAAU,IAAKO,WAAYP,EAAU,UAChF,GAAoB,MAAhBA,EAAU,GAAY,CAChC,GAAIA,EAAUV,OAAS,EACtB,OAEDR,EAAc8B,SAAW,EAlF3B,SAAqBf,EAAGC,QAEMK,IAAzBxB,EAAUkC,YAAqD,OAAzBlC,EAAUkC,YACnDlC,EAAUkC,WAAYhB,EAAGC,GAgFzBgB,CAAYP,WAAYP,EAAU,IAAKO,WAAYP,EAAU,UACvD,GAAoB,KAAhBA,EAAU,GAAW,CAC/B,GAAIA,EAAUV,OAAS,EACtB,OAGD,IAIIyB,EAJAC,KACAC,KACAC,KAGJ,IAAKzB,EAAI,EAAGA,EAAIO,EAAUV,OAAQG,IACjCsB,EAAef,EAAUP,GAAGQ,MAAO,KACnCe,EAASG,KAAMpC,EAAUqC,SAAUL,EAAa,GAAI,IAAKjC,EAAcwB,cACnES,EAAazB,OAAS,GAAKyB,EAAa,GAAGzB,OAAS,GACvD4B,EAAIC,KAAMpC,EAAUqC,SAAUL,EAAa,GAAI,IAAKjC,EAAc8B,UAE/DG,EAAazB,OAAS,GAAKyB,EAAa,GAAGzB,OAAS,GACvD2B,EAAQE,KAAMpC,EAAUqC,SAAUL,EAAa,GAAI,IAAKjC,EAAc2B,eA9F1E,SAAiBO,EAAUC,EAASC,QAEVf,IAArBxB,EAAU0C,QAA6C,OAArB1C,EAAU0C,QAC/C1C,EAAU0C,OAAQL,EAAUC,EAASC,GA8FrCI,CAAQN,EAAUC,EAASC,QACrB,GAAoB,UAAhBlB,EAAU,GAAgB,CACpC,GAAIA,EAAUV,OAAS,EACtB,OAvIqBM,EA0IPI,EAAU,QAxIMG,IAA5BxB,EAAU4C,eAA2D,OAA5B5C,EAAU4C,eACtD5C,EAAU4C,cAAe3B,QAwInB,GAAoB,UAAhBI,EAAU,GAAgB,CACpC,GAAIA,EAAUV,OAAS,EACtB,QAzKH,SAAwBM,QAESO,IAA5BxB,EAAU6C,eAA2D,OAA5B7C,EAAU6C,eACtD7C,EAAU6C,cAAe5B,GAyKzB6B,CAAezB,EAAU,SACnB,GAAoB,MAAhBA,EAAU,IAA8B,MAAhBA,EAAU,IAA8B,MAAhBA,EAAU,GAAY,CAChF,GAAIA,EAAUV,OAAS,EACtB,QAxKH,SAA8BM,EAAM8B,EAAKC,EAAOC,QAETzB,IAAlCxB,EAAUkD,qBAAuE,OAAlClD,EAAUkD,qBAC5DlD,EAAUkD,oBAAqBjC,EAAM8B,EAAKC,EAAOC,GAwKjDE,CAAqB9B,EAAU,GAAIO,WAAYP,EAAU,IAAKO,WAAYP,EAAU,IAAKO,WAAYP,EAAU,UACzG,GAAoB,MAAhBA,EAAU,IAA8B,MAAhBA,EAAU,IAA8B,KAAhBA,EAAU,GAAW,CAC/E,GAAIA,EAAUV,OAAS,EACtB,QAvKH,SAA8BM,EAAMmC,QAEG5B,IAAlCxB,EAAUqD,qBAAuE,OAAlCrD,EAAUqD,qBAC5DrD,EAAUqD,oBAAqBpC,EAAMmC,GAuKrCE,CAAqBjC,EAAU,GAAIA,EAAU,SACvC,GAAoB,UAAhBA,EAAU,GAAgB,CACpC,GAAIA,EAAUV,OAAS,EACtB,OAGDI,EAAWR,EAAaL,EAAM,UAzKJc,EA0KPD,OAxKgBS,IAAhCxB,EAAUuD,mBAAmE,OAAhCvD,EAAUuD,mBAC1DvD,EAAUuD,kBAAmBvC,QAwKvB,GAAoB,UAAhBK,EAAU,GAAgB,CACpC,GAAIA,EAAUV,OAAS,EACtB,OAID,IAAI6C,EAhIN,SAA0BzC,GAEzB,YAAkCS,IAA9BxB,EAAUyD,iBAA+D,OAA9BzD,EAAUyD,gBACjDzD,EAAUyD,gBAAiB1C,GAE5B,KA2HiB2C,EADvB3C,EAAWR,EAAaL,EAAM,WACmBW,QACjD,GAAyB,OAArB2C,EACH,OAEDG,EAAaH,KAIf,SAASG,EAAa5D,EAAcI,GAEnC,IACIW,EADA8C,EAAQ7D,EAAauB,MAAO,MAEhC,IAAKR,EAAI,EAAGA,EAAI8C,EAAMjD,OAAQG,IAE7Bb,EADO2D,EAAM9C,GAAGD,OACGV,QAIHqB,IAAdxB,GAAyC,OAAdA,IAC9BA,MASD2D,EAAa5D,GALZ4B,YAAc,EACdG,YAAc,EACdG,QAAU,KAMZpC,EAAIgE,qBAAuB,SAAU9D,EAAcC,GAElD,SAAS0D,EAAiB3C,GAEzB,YAAkCS,IAA9BxB,EAAUyD,iBAA+D,OAA9BzD,EAAUyD,gBACjDzD,EAAUyD,gBAAiB1C,GAE5B,UAGUS,IAAdxB,GAAyC,OAAdA,IAC9BA,MAGD,IAAI8D,EAAgB,IAAIjE,EAAIkE,cACxB1D,EAAQyD,EAAcE,QAAS,IAAInE,EAAIoE,aAAc,YACrDC,EAAcJ,EAAcK,QAAS9D,GAErC+D,KACAC,EAAkB,KAClBC,EAAuB,KAEvBC,KACAC,KACAC,KAEAC,KACAC,KACAC,KA4IJ,OA1IA/E,EAAIC,YAAaC,GAChB8C,cAAgB,SAAU5B,GACzB,IAAIZ,EAAQyD,EAAce,aACzB5D,KAAOA,IAERoD,EAAkBP,EAAcgB,YAAazE,GAC7C+D,EAAoBnD,GAAQZ,GAE7B6C,oBAAsB,SAAUjC,EAAM8B,EAAKC,EAAOC,GACzB,OAApBoB,IAGQ,MAARpD,EACHoD,EAAgBU,SAAWhC,EAAKC,EAAOC,GACrB,MAARhC,EACVoD,EAAgBW,SAAWjC,EAAKC,EAAOC,GACrB,MAARhC,IACVoD,EAAgBY,UAAYlC,EAAKC,EAAOC,MAG1CI,oBAAsB,SAAUpC,EAAMmC,GACb,OAApBiB,IAGQ,MAARpD,GACHoD,EAAgBa,UAAY,EACxBrF,EAAIsF,WAAY/B,KACnBiB,EAAgBa,WAAaE,KAAKC,KAAMzD,WAAYwB,IAAU,GAAK,KAElD,MAARnC,EACVoD,EAAgBiB,QAAU,EAAM1D,WAAYwB,GAC1B,KAARnC,IACVoD,EAAgBiB,QAAU1D,WAAYwB,MAGxCG,kBAAoB,SAAUvC,GAC7B,GAAwB,OAApBqD,EAAJ,CAIA,IAAIkB,EAAgB7B,EAAiB1C,GACrC,GAAsB,OAAlBuE,EAAJ,CAIA,IAAIC,EAAO,IAAIC,OAAOC,MAAOH,IACzBI,EAAUF,OAAOG,IAAIC,gBAAiBL,GAC1CnB,EAAgByB,QAAUH,KAE3B/C,cAAgB,SAAU3B,GACzB,IAAI8E,EAAgB3B,EAAoBnD,QAClBO,IAAlBuE,IACHzB,EAAuByB,IAGzBtE,OAAS,SAAUF,GAClB,IAAIlB,EAAQyD,EAAcE,QAAS,IAAInE,EAAIoE,aAAc1C,IACzD2C,EAAcJ,EAAcK,QAAS9D,GACrCqE,KACAC,KACAC,MAED/C,SAAW,SAAUX,EAAGC,EAAGC,GAC1BmD,EAAe/B,KAAM,IAAI3C,EAAImG,MAAO9E,EAAGC,EAAGC,KAE3CW,SAAW,SAAUb,EAAGC,EAAGC,GAC1BoD,EAAchC,KAAM,IAAI3C,EAAImG,MAAO9E,EAAGC,EAAGC,KAE1Cc,WAAa,SAAUhB,EAAGC,GACzBsD,EAAUjC,KAAM,IAAI3C,EAAIoG,QAAS/E,EAAGC,KAErCuB,OAAS,SAAUL,EAAUC,EAASC,GACrC,SAAS2D,EAAeC,EAAkBC,EAAsBC,EAAaC,GAE5E,KAAID,EAAc,GAAKA,GAAeF,EAAiBxF,QAAvD,CAGA,IAAI4F,EAASH,EAAqBC,GAClC,QAAe7E,IAAX+E,EAEHA,EAASD,EADSH,EAAiBE,IAEnCD,EAAqBC,GAAeE,EAErC,OAAOA,GAGR,SAASC,EAAqBC,EAAcN,EAAkBC,EAAsBC,GAEnF,OAAOH,EAAeC,EAAkBC,EAAsBC,EAAa,SAAUK,GACpF,OAAOD,EAAaE,UAAWD,EAAIxF,EAAGwF,EAAIvF,EAAGuF,EAAItF,KAInD,SAASwF,EAAqBH,EAAcN,EAAkBC,EAAsBC,GAEnF,OAAOH,EAAeC,EAAkBC,EAAsBC,EAAa,SAAUK,GACpF,OAAOD,EAAaI,UAAWH,EAAIxF,EAAGwF,EAAIvF,EAAGuF,EAAItF,KAInD,SAAS0F,EAAiBL,EAAcN,EAAkBC,EAAsBC,GAE/E,OAAOH,EAAeC,EAAkBC,EAAsBC,EAAa,SAAUK,GACpF,OAAOD,EAAaM,MAAOL,EAAIxF,EAAGwF,EAAIvF,KAIxC,IAAIL,EAAGkG,EAAIC,EAAIC,EAAIC,EAAUC,EACzBC,EAAc/E,EAAQ3B,QAAU0B,EAAS1B,OACzC2G,EAAU/E,EAAI5B,QAAU0B,EAAS1B,OACjCL,EAAQ+B,EAAS1B,OACrB,IAAKG,EAAI,EAAGA,EAAIR,EAAQ,EAAGQ,IAC1BkG,EAAKR,EAAqBtC,EAAaK,EAAgBG,EAAuBrC,EAAS,IACvF4E,EAAKT,EAAqBtC,EAAaK,EAAgBG,EAAuBrC,GAAUvB,EAAI,GAAKR,IACjG4G,EAAKV,EAAqBtC,EAAaK,EAAgBG,EAAuBrC,GAAUvB,EAAI,GAAKR,IACjG8G,EAAgBlD,EAAYqD,YAAaP,EAAIC,EAAIC,GACjDC,EAAWjD,EAAYsD,YAAaJ,GAChCC,IACHF,EAASM,GAAKb,EAAqB1C,EAAaM,EAAeG,EAAsBrC,EAAQ,IAC7F6E,EAASO,GAAKd,EAAqB1C,EAAaM,EAAeG,EAAsBrC,GAASxB,EAAI,GAAKR,IACvG6G,EAASQ,GAAKf,EAAqB1C,EAAaM,EAAeG,EAAsBrC,GAASxB,EAAI,GAAKR,KAEpGgH,IACHH,EAASS,GAAKd,EAAiB5C,EAAaO,EAAWG,EAAkBrC,EAAI,IAC7E4E,EAASU,GAAKf,EAAiB5C,EAAaO,EAAWG,EAAkBrC,GAAKzB,EAAI,GAAKR,IACvF6G,EAASW,GAAKhB,EAAiB5C,EAAaO,EAAWG,EAAkBrC,GAAKzB,EAAI,GAAKR,KAE3D,OAAzBgE,IACH6C,EAASY,IAAMzD,IAIlBb,gBAAkBC,IAGnBI,EAAckE,WAECnI,EAAIoI,+BAAgCnE,IAI7CjE","file":"../../import/importerobj.js","sourcesContent":["define([\"../core/jsm\"],function(JSM){\n\tJSM.ReadObjFile = function (stringBuffer, callbacks)\n\t{\n\t\tfunction OnNewMaterial (name)\n\t\t{\n\t\t\tif (callbacks.onNewMaterial !== undefined && callbacks.onNewMaterial !== null) {\n\t\t\t\tcallbacks.onNewMaterial (name);\n\t\t\t}\n\t\t}\n\n\t\tfunction OnMaterialComponent (name, red, green, blue)\n\t\t{\n\t\t\tif (callbacks.onMaterialComponent !== undefined && callbacks.onMaterialComponent !== null) {\n\t\t\t\tcallbacks.onMaterialComponent (name, red, green, blue);\n\t\t\t}\n\t\t}\n\n\t\tfunction OnMaterialParameter (name, value)\n\t\t{\n\t\t\tif (callbacks.onMaterialParameter !== undefined && callbacks.onMaterialParameter !== null) {\n\t\t\t\tcallbacks.onMaterialParameter (name, value);\n\t\t\t}\n\t\t}\n\n\t\tfunction OnMaterialTexture (textureName)\n\t\t{\n\t\t\tif (callbacks.onMaterialTexture !== undefined && callbacks.onMaterialTexture !== null) {\n\t\t\t\tcallbacks.onMaterialTexture (textureName);\n\t\t\t}\n\t\t}\n\t\t\n\t\tfunction OnUseMaterial (name)\n\t\t{\n\t\t\tif (callbacks.onUseMaterial !== undefined && callbacks.onUseMaterial !== null) {\n\t\t\t\tcallbacks.onUseMaterial (name);\n\t\t\t}\n\t\t}\n\n\t\tfunction OnMesh (meshName)\n\t\t{\n\t\t\tif (callbacks.onMesh !== undefined && callbacks.onMesh !== null) {\n\t\t\t\tcallbacks.onMesh (meshName);\n\t\t\t}\n\t\t}\n\t\t\n\t\tfunction OnVertex (x, y, z)\n\t\t{\n\t\t\tif (callbacks.onVertex !== undefined && callbacks.onVertex !== null) {\n\t\t\t\tcallbacks.onVertex (x, y, z);\n\t\t\t}\n\t\t}\n\n\t\tfunction OnNormal (x, y, z)\n\t\t{\n\t\t\tif (callbacks.onNormal !== undefined && callbacks.onNormal !== null) {\n\t\t\t\tcallbacks.onNormal (x, y, z);\n\t\t\t}\n\t\t}\n\n\t\tfunction OnTexCoord (x, y)\n\t\t{\n\t\t\tif (callbacks.onTexCoord !== undefined && callbacks.onTexCoord !== null) {\n\t\t\t\tcallbacks.onTexCoord (x, y);\n\t\t\t}\n\t\t}\n\n\t\tfunction OnFace (vertices, normals, uvs)\n\t\t{\n\t\t\tif (callbacks.onFace !== undefined && callbacks.onFace !== null) {\n\t\t\t\tcallbacks.onFace (vertices, normals, uvs);\n\t\t\t}\n\t\t}\n\n\t\tfunction OnFileRequested (fileName)\n\t\t{\n\t\t\tif (callbacks.onFileRequested !== undefined && callbacks.onFileRequested !== null) {\n\t\t\t\treturn callbacks.onFileRequested (fileName);\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\tfunction ProcessLine (line, objectCounter)\n\t\t{\n\t\t\tfunction GetIndex (index, count)\n\t\t\t{\n\t\t\t\tif (index > 0) {\n\t\t\t\t\treturn index - 1;\n\t\t\t\t} else {\n\t\t\t\t\treturn count + index;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction GetFileName (line, keyword)\n\t\t\t{\n\t\t\t\tvar fileNameIndex = line.indexOf (keyword) + keyword.length;\n\t\t\t\tvar fileName = line.substr (fileNameIndex, line.length - fileNameIndex);\n\t\t\t\treturn fileName.trim ();\n\t\t\t}\n\t\t\n\t\t\tif (line.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tif (line[0] == '#') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar lineParts = line.split (/\\s+/);\n\t\t\tif (lineParts.length === 0 || lineParts[0][0] == '#') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar i, fileName;\n\t\t\tif (lineParts[0] == 'g') {\n\t\t\t\tif (lineParts.length < 2) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvar meshName = '';\n\t\t\t\tfor (i = 1; i < lineParts.length; i++) {\n\t\t\t\t\tmeshName += lineParts[i];\n\t\t\t\t\tif (i < lineParts.length - 1) {\n\t\t\t\t\t\tmeshName += ' ';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tOnMesh (meshName);\n\t\t\t} else if (lineParts[0] == 'v') {\n\t\t\t\tif (lineParts.length < 4) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tobjectCounter.vertexCount += 1;\n\t\t\t\tOnVertex (parseFloat (lineParts[1]), parseFloat (lineParts[2]), parseFloat (lineParts[3]));\n\t\t\t} else if (lineParts[0] == 'vn') {\n\t\t\t\tif (lineParts.length < 4) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tobjectCounter.normalCount += 1;\n\t\t\t\tOnNormal (parseFloat (lineParts[1]), parseFloat (lineParts[2]), parseFloat (lineParts[3]));\n\t\t\t} else if (lineParts[0] == 'vt') {\n\t\t\t\tif (lineParts.length < 3) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tobjectCounter.uvCount += 1;\n\t\t\t\tOnTexCoord (parseFloat (lineParts[1]), parseFloat (lineParts[2]));\n\t\t\t} else if (lineParts[0] == 'f') {\n\t\t\t\tif (lineParts.length < 4) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar vertices = [];\n\t\t\t\tvar normals = [];\n\t\t\t\tvar uvs = [];\n\t\t\t\t\n\t\t\t\tvar partSplitted;\n\t\t\t\tfor (i = 1; i < lineParts.length; i++) {\n\t\t\t\t\tpartSplitted = lineParts[i].split ('/');\n\t\t\t\t\tvertices.push (GetIndex (parseInt (partSplitted[0], 10), objectCounter.vertexCount));\n\t\t\t\t\tif (partSplitted.length > 1 && partSplitted[1].length > 0) {\n\t\t\t\t\t\tuvs.push (GetIndex (parseInt (partSplitted[1], 10), objectCounter.uvCount));\n\t\t\t\t\t}\n\t\t\t\t\tif (partSplitted.length > 2 && partSplitted[2].length > 0) {\n\t\t\t\t\t\tnormals.push (GetIndex (parseInt (partSplitted[2], 10), objectCounter.normalCount));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tOnFace (vertices, normals, uvs);\n\t\t\t} else if (lineParts[0] == 'usemtl') {\n\t\t\t\tif (lineParts.length < 2) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tOnUseMaterial (lineParts[1]);\n\t\t\t} else if (lineParts[0] == 'newmtl') {\n\t\t\t\tif (lineParts.length < 2) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tOnNewMaterial (lineParts[1]);\n\t\t\t} else if (lineParts[0] == 'Ka' || lineParts[0] == 'Kd' || lineParts[0] == 'Ks') {\n\t\t\t\tif (lineParts.length < 4) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tOnMaterialComponent (lineParts[0], parseFloat (lineParts[1]), parseFloat (lineParts[2]), parseFloat (lineParts[3]));\n\t\t\t} else if (lineParts[0] == 'Ns' || lineParts[0] == 'Tr' || lineParts[0] == 'd') {\n\t\t\t\tif (lineParts.length < 2) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tOnMaterialParameter (lineParts[0], lineParts[1]);\n\t\t\t} else if (lineParts[0] == 'map_Kd') {\n\t\t\t\tif (lineParts.length < 2) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfileName = GetFileName (line, 'map_Kd');\n\t\t\t\tOnMaterialTexture (fileName);\n\t\t\t} else if (lineParts[0] == 'mtllib') {\n\t\t\t\tif (lineParts.length < 2) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfileName = GetFileName (line, 'mtllib');\n\t\t\t\tvar fileStringBuffer = OnFileRequested (fileName.trim ());\n\t\t\t\tif (fileStringBuffer === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tProcessFile (fileStringBuffer);\n\t\t\t}\n\t\t}\n\t\t\n\t\tfunction ProcessFile (stringBuffer, objectCounter)\n\t\t{\n\t\t\tvar lines = stringBuffer.split ('\\n');\n\t\t\tvar i, line;\n\t\t\tfor (i = 0; i < lines.length; i++) {\n\t\t\t\tline = lines[i].trim ();\n\t\t\t\tProcessLine (line, objectCounter);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (callbacks === undefined || callbacks === null) {\n\t\t\tcallbacks = {};\n\t\t}\n\n\t\tvar objectCounter = {\n\t\t\tvertexCount : 0,\n\t\t\tnormalCount : 0,\n\t\t\tuvCount : 0\n\t\t};\n\n\t\tProcessFile (stringBuffer, objectCounter);\n\t};\n\n\tJSM.ConvertObjToJsonData = function (stringBuffer, callbacks)\n\t{\n\t\tfunction OnFileRequested (fileName)\n\t\t{\n\t\t\tif (callbacks.onFileRequested !== undefined && callbacks.onFileRequested !== null) {\n\t\t\t\treturn callbacks.onFileRequested (fileName);\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\tif (callbacks === undefined || callbacks === null) {\n\t\t\tcallbacks = {};\n\t\t}\n\n\t\tvar triangleModel = new JSM.TriangleModel ();\n\t\tvar index = triangleModel.AddBody (new JSM.TriangleBody ('Default'));\n\t\tvar currentBody = triangleModel.GetBody (index);\n\t\t\n\t\tvar materialNameToIndex = {};\n\t\tvar currentMaterial = null;\n\t\tvar currentMaterialIndex = null;\n\t\t\n\t\tvar globalVertices = [];\n\t\tvar globalNormals = [];\n\t\tvar globalUVs = [];\n\t\t\n\t\tvar globalToLocalVertices = {};\n\t\tvar globalToLocalNormals = {};\n\t\tvar globalToLocalUVs = {};\n\t\t\n\t\tJSM.ReadObjFile (stringBuffer, {\n\t\t\tonNewMaterial : function (name) {\n\t\t\t\tvar index = triangleModel.AddMaterial ({\n\t\t\t\t\tname : name\n\t\t\t\t});\n\t\t\t\tcurrentMaterial = triangleModel.GetMaterial (index);\n\t\t\t\tmaterialNameToIndex[name] = index;\n\t\t\t},\n\t\t\tonMaterialComponent : function (name, red, green, blue) {\n\t\t\t\tif (currentMaterial === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (name == 'Ka') {\n\t\t\t\t\tcurrentMaterial.ambient = [red, green, blue];\n\t\t\t\t} else if (name == 'Kd') {\n\t\t\t\t\tcurrentMaterial.diffuse = [red, green, blue];\n\t\t\t\t} else if (name == 'Ks') {\n\t\t\t\t\tcurrentMaterial.specular = [red, green, blue];\n\t\t\t\t}\n\t\t\t},\n\t\t\tonMaterialParameter : function (name, value) {\n\t\t\t\tif (currentMaterial === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (name == 'Ns') {\n\t\t\t\t\tcurrentMaterial.shininess = 0.0;\n\t\t\t\t\tif (JSM.IsPositive (value)) {\n\t\t\t\t\t\tcurrentMaterial.shininess = (Math.log2 (parseFloat (value)) - 1) / 10.0;\n\t\t\t\t\t}\n\t\t\t\t} else if (name == 'Tr') {\n\t\t\t\t\tcurrentMaterial.opacity = 1.0 - parseFloat (value);\n\t\t\t\t} else if (name == 'd') {\n\t\t\t\t\tcurrentMaterial.opacity = parseFloat (value);\n\t\t\t\t}\t\t\t\n\t\t\t},\n\t\t\tonMaterialTexture : function (textureName) {\n\t\t\t\tif (currentMaterial === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar textureBuffer = OnFileRequested (textureName);\n\t\t\t\tif (textureBuffer === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar blob = new window.Blob ([textureBuffer]);\n\t\t\t\tvar blobURL = window.URL.createObjectURL (blob);\n\t\t\t\tcurrentMaterial.texture = blobURL;\n\t\t\t},\n\t\t\tonUseMaterial : function (name) {\n\t\t\t\tvar materialIndex = materialNameToIndex[name];\n\t\t\t\tif (materialIndex !== undefined) {\n\t\t\t\t\tcurrentMaterialIndex = materialIndex;\n\t\t\t\t}\n\t\t\t},\n\t\t\tonMesh : function (meshName) {\n\t\t\t\tvar index = triangleModel.AddBody (new JSM.TriangleBody (meshName));\n\t\t\t\tcurrentBody = triangleModel.GetBody (index);\n\t\t\t\tglobalToLocalVertices = {};\n\t\t\t\tglobalToLocalNormals = {};\n\t\t\t\tglobalToLocalUVs = {};\n\t\t\t},\n\t\t\tonVertex : function (x, y, z) {\n\t\t\t\tglobalVertices.push (new JSM.Coord (x, y, z));\n\t\t\t},\n\t\t\tonNormal : function (x, y, z) {\n\t\t\t\tglobalNormals.push (new JSM.Coord (x, y, z));\n\t\t\t},\n\t\t\tonTexCoord : function (x, y) {\n\t\t\t\tglobalUVs.push (new JSM.Coord2D (x, y));\n\t\t\t},\n\t\t\tonFace : function (vertices, normals, uvs) {\n\t\t\t\tfunction GetLocalIndex (globalValueArray, globalToLocalIndices, globalIndex, valueAdderFunc)\n\t\t\t\t{\n\t\t\t\t\tif (globalIndex < 0 || globalIndex >= globalValueArray.length) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\t\t\t\t\n\t\t\t\t\tvar result = globalToLocalIndices[globalIndex];\n\t\t\t\t\tif (result === undefined) {\n\t\t\t\t\t\tvar globalValue = globalValueArray[globalIndex];\n\t\t\t\t\t\tresult = valueAdderFunc (globalValue);\n\t\t\t\t\t\tglobalToLocalIndices[globalIndex] = result;\n\t\t\t\t\t}\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfunction GetLocalVertexIndex (triangleBody, globalValueArray, globalToLocalIndices, globalIndex)\n\t\t\t\t{\n\t\t\t\t\treturn GetLocalIndex (globalValueArray, globalToLocalIndices, globalIndex, function (val) {\n\t\t\t\t\t\treturn triangleBody.AddVertex (val.x, val.y, val.z);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfunction GetLocalNormalIndex (triangleBody, globalValueArray, globalToLocalIndices, globalIndex)\n\t\t\t\t{\n\t\t\t\t\treturn GetLocalIndex (globalValueArray, globalToLocalIndices, globalIndex, function (val) {\n\t\t\t\t\t\treturn triangleBody.AddNormal (val.x, val.y, val.z);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfunction GetLocalUVIndex (triangleBody, globalValueArray, globalToLocalIndices, globalIndex)\n\t\t\t\t{\n\t\t\t\t\treturn GetLocalIndex (globalValueArray, globalToLocalIndices, globalIndex, function (val) {\n\t\t\t\t\t\treturn triangleBody.AddUV (val.x, val.y);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar i, v0, v1, v2, triangle, triangleIndex;\n\t\t\t\tvar hasNormals = (normals.length == vertices.length);\n\t\t\t\tvar hasUVs = (uvs.length == vertices.length);\n\t\t\t\tvar count = vertices.length;\n\t\t\t\tfor (i = 0; i < count - 2; i++) {\n\t\t\t\t\tv0 = GetLocalVertexIndex (currentBody, globalVertices, globalToLocalVertices, vertices[0]);\n\t\t\t\t\tv1 = GetLocalVertexIndex (currentBody, globalVertices, globalToLocalVertices, vertices[(i + 1) % count]);\n\t\t\t\t\tv2 = GetLocalVertexIndex (currentBody, globalVertices, globalToLocalVertices, vertices[(i + 2) % count]);\n\t\t\t\t\ttriangleIndex = currentBody.AddTriangle (v0, v1, v2);\n\t\t\t\t\ttriangle = currentBody.GetTriangle (triangleIndex);\n\t\t\t\t\tif (hasNormals) {\n\t\t\t\t\t\ttriangle.n0 = GetLocalNormalIndex (currentBody, globalNormals, globalToLocalNormals, normals[0]);\n\t\t\t\t\t\ttriangle.n1 = GetLocalNormalIndex (currentBody, globalNormals, globalToLocalNormals, normals[(i + 1) % count]);\n\t\t\t\t\t\ttriangle.n2 = GetLocalNormalIndex (currentBody, globalNormals, globalToLocalNormals, normals[(i + 2) % count]);\n\t\t\t\t\t}\n\t\t\t\t\tif (hasUVs) {\n\t\t\t\t\t\ttriangle.u0 = GetLocalUVIndex (currentBody, globalUVs, globalToLocalUVs, uvs[0]);\n\t\t\t\t\t\ttriangle.u1 = GetLocalUVIndex (currentBody, globalUVs, globalToLocalUVs, uvs[(i + 1) % count]);\n\t\t\t\t\t\ttriangle.u2 = GetLocalUVIndex (currentBody, globalUVs, globalToLocalUVs, uvs[(i + 2) % count]);\n\t\t\t\t\t}\n\t\t\t\t\tif (currentMaterialIndex !== null) {\n\t\t\t\t\t\ttriangle.mat = currentMaterialIndex;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tonFileRequested : OnFileRequested\n\t\t});\n\n\t\ttriangleModel.Finalize ();\n\t\t\n\t\tvar jsonData = JSM.ConvertTriangleModelToJsonData (triangleModel);\n\t\treturn jsonData;\n\t};\n\n\treturn JSM;\n});\n"]}