{"version":3,"sources":["extensions/threeviewer/threeconverter.js"],"names":["define","JSM","ConvertBodyToThreeMeshes","body","materials","conversionData","theConversionData","textureLoadedCallback","hasConvexPolygons","undefined","ValueOrDefault","meshes","threeGeometry","threeMaterial","explodeData","onPointGeometryStart","material","THREE","PointsMaterial","color","diffuse","size","pointSize","Geometry","onPointGeometryEnd","points","Points","push","onPoint","vertex","vertices","Vector3","x","y","z","onLineGeometryStart","LineBasicMaterial","onLineGeometryEnd","lines","LineSegments","onLine","begVertex","endVertex","onGeometryStart","hasTexture","texture","hasOpacity","opacity","specular","shininess","MeshPhongMaterial","singleSided","side","DoubleSide","transparent","theMaterial","textureName","TextureLoader","load","image","ResizeImageToPowerOfTwoSides","wrapS","RepeatWrapping","wrapT","map","needsUpdate","onGeometryEnd","computeFaceNormals","mesh","Mesh","onTriangle","vertex1","vertex2","vertex3","normal1","normal2","normal3","uv1","uv2","uv3","lastVertexIndex","length","face","Face3","faces","normalArray","vertexNormals","uvArray","Vector2","faceVertexUvs","ExplodeBody","ConvertModelToThreeMeshes","model","i","j","currentMeshes","GetMaterialSet","BodyCount","GetBody","ConvertJSONDataToThreeMeshes","jsonData","asyncCallbacks","resultMeshes","AsyncRunTask","meshIndex","AddTriangles","currentTriangles","normals","uvs","GetTextureCoordinate","u","v","offset","scale","rotation","result","IsZero","si","Math","sin","DegRad","co","cos","materialIndex","parameters","materialData","textureOffset","textureScale","textureRotation","diffuseColor","Color","specularColor","setRGB","getHex","v1","v2","v3","n1","n2","n3","u1","u2","u3","lastVertex","lastFace","textureUVs","geometry","originalJsonMaterialIndex","originalJsonMeshIndex","triangles","AddMesh"],"mappings":"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","file":"../../../extensions/threeviewer/threeconverter.js","sourcesContent":["define([\"../../core/jsm\"],function(JSM){\n\tJSM.ConvertBodyToThreeMeshes = function (body, materials, conversionData)\n\t{\n\t\tvar theConversionData = {\n\t\t\ttextureLoadedCallback : null,\n\t\t\thasConvexPolygons : false\n\t\t};\n\n\t\tif (conversionData !== undefined && conversionData !== null) {\n\t\t\ttheConversionData.textureLoadedCallback = JSM.ValueOrDefault (conversionData.textureLoadedCallback, theConversionData.textureLoadedCallback);\n\t\t\ttheConversionData.hasConvexPolygons = JSM.ValueOrDefault (conversionData.hasConvexPolygons, theConversionData.hasConvexPolygons);\n\t\t}\n\t\t\n\t\tvar meshes = [];\n\t\tvar threeGeometry = null;\n\t\tvar threeMaterial = null;\n\n\t\tvar explodeData = {\n\t\t\thasConvexPolygons : theConversionData.hasConvexPolygons,\n\t\t\tonPointGeometryStart : function (material) {\n\t\t\t\t\tthreeMaterial = new JSM.THREE.PointsMaterial ({\n\t\t\t\t\t\tcolor : material.diffuse,\n\t\t\t\t\t\tsize: material.pointSize\n\t\t\t\t\t});\n\t\t\t\t\tthreeGeometry = new JSM.THREE.Geometry ();\n\t\t\t},\n\t\t\tonPointGeometryEnd : function () {\n\t\t\t\tvar points = new JSM.THREE.Points (threeGeometry, threeMaterial);\n\t\t\t\tmeshes.push (points);\n\t\t\t},\n\t\t\tonPoint : function (vertex)\t{\n\t\t\t\tthreeGeometry.vertices.push (new JSM.THREE.Vector3 (vertex.x, vertex.y, vertex.z));\n\t\t\t},\n\t\t\tonLineGeometryStart : function (material) {\n\t\t\t\tthreeGeometry = new JSM.THREE.Geometry ();\n\t\t\t\tthreeMaterial = new JSM.THREE.LineBasicMaterial ({\n\t\t\t\t\tcolor : material.diffuse\n\t\t\t\t});\n\t\t\t},\n\t\t\tonLineGeometryEnd : function () {\n\t\t\t\tvar lines = new JSM.THREE.LineSegments (threeGeometry, threeMaterial);\n\t\t\t\tmeshes.push (lines);\n\t\t\t},\n\t\t\tonLine : function (begVertex, endVertex) {\n\t\t\t\tthreeGeometry.vertices.push (new JSM.THREE.Vector3 (begVertex.x, begVertex.y, begVertex.z));\n\t\t\t\tthreeGeometry.vertices.push (new JSM.THREE.Vector3 (endVertex.x, endVertex.y, endVertex.z));\n\t\t\t},\n\t\t\tonGeometryStart : function (material) {\n\t\t\t\tvar hasTexture = (material.texture !== null);\n\t\t\t\tvar hasOpacity = (material.opacity !== 1.0);\n\n\t\t\t\tvar diffuse = material.diffuse;\n\t\t\t\tvar specular = material.specular;\n\t\t\t\tvar shininess = material.shininess;\n\t\t\t\tif (shininess === 0.0) {\n\t\t\t\t\tspecular = 0x000000;\n\t\t\t\t\tshininess = 1;\n\t\t\t\t}\n\n\t\t\t\tthreeMaterial = new JSM.THREE.MeshPhongMaterial ({\n\t\t\t\t\tcolor : diffuse,\n\t\t\t\t\tspecular : specular,\n\t\t\t\t\tshininess : shininess\n\t\t\t\t});\n\n\t\t\t\tif (!material.singleSided) {\n\t\t\t\t\tthreeMaterial.side = JSM.THREE.DoubleSide;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (hasOpacity) {\n\t\t\t\t\tthreeMaterial.opacity = material.opacity;\n\t\t\t\t\tthreeMaterial.transparent = true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (hasTexture) {\n\t\t\t\t\tvar theMaterial = threeMaterial;\n\t\t\t\t\tvar textureName = material.texture;\n\t\t\t\t\tvar loader = new JSM.THREE.TextureLoader ();\n\t\t\t\t\tloader.load (textureName, function (texture) {\n\t\t\t\t\t\ttexture.image = JSM.ResizeImageToPowerOfTwoSides (texture.image);\n\t\t\t\t\t\ttexture.wrapS = JSM.THREE.RepeatWrapping;\n\t\t\t\t\t\ttexture.wrapT = JSM.THREE.RepeatWrapping;\n\t\t\t\t\t\ttheMaterial.map = texture;\n\t\t\t\t\t\ttheMaterial.needsUpdate = true;\n\t\t\t\t\t\tif (theConversionData.textureLoadedCallback !== null) {\n\t\t\t\t\t\t\ttheConversionData.textureLoadedCallback ();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthreeGeometry = new JSM.THREE.Geometry ();\n\t\t\t},\n\t\t\tonGeometryEnd : function () {\n\t\t\t\tthreeGeometry.computeFaceNormals ();\n\t\t\t\tvar mesh = new JSM.THREE.Mesh (threeGeometry, threeMaterial);\n\t\t\t\tmeshes.push (mesh);\n\t\t\t},\n\t\t\tonTriangle : function (vertex1, vertex2, vertex3, normal1, normal2, normal3, uv1, uv2, uv3) {\n\t\t\t\tvar lastVertexIndex = threeGeometry.vertices.length;\n\t\t\t\tthreeGeometry.vertices.push (new JSM.THREE.Vector3 (vertex1.x, vertex1.y, vertex1.z));\n\t\t\t\tthreeGeometry.vertices.push (new JSM.THREE.Vector3 (vertex2.x, vertex2.y, vertex2.z));\n\t\t\t\tthreeGeometry.vertices.push (new JSM.THREE.Vector3 (vertex3.x, vertex3.y, vertex3.z));\n\t\t\t\tvar face = new JSM.THREE.Face3 (lastVertexIndex + 0, lastVertexIndex + 1, lastVertexIndex + 2);\n\t\t\t\tthreeGeometry.faces.push (face);\n\t\t\t\t\n\t\t\t\tif (normal1 !== null && normal2 !== null && normal3 !== null) {\n\t\t\t\t\tvar normalArray = [];\n\t\t\t\t\tnormalArray.push (new JSM.THREE.Vector3 (normal1.x, normal1.y, normal1.z));\n\t\t\t\t\tnormalArray.push (new JSM.THREE.Vector3 (normal2.x, normal2.y, normal2.z));\n\t\t\t\t\tnormalArray.push (new JSM.THREE.Vector3 (normal3.x, normal3.y, normal3.z));\n\t\t\t\t\tthreeGeometry.faces[threeGeometry.faces.length - 1].vertexNormals = normalArray;\n\t\t\t\t}\n\n\t\t\t\tif (uv1 !== null && uv2 !== null && uv3 !== null) {\n\t\t\t\t\tvar uvArray = [];\n\t\t\t\t\tuvArray.push (new JSM.THREE.Vector2 (uv1.x, -uv1.y));\n\t\t\t\t\tuvArray.push (new JSM.THREE.Vector2 (uv2.x, -uv2.y));\n\t\t\t\t\tuvArray.push (new JSM.THREE.Vector2 (uv3.x, -uv3.y));\n\t\t\t\t\tthreeGeometry.faceVertexUvs[0].push (uvArray);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tJSM.ExplodeBody (body, materials, explodeData);\n\t\treturn meshes;\n\t};\n\n\tJSM.ConvertModelToThreeMeshes = function (model, conversionData)\n\t{\n\t\tvar meshes = [];\n\t\tvar materials = model.GetMaterialSet ();\n\t\t\n\t\tvar i, j, body, currentMeshes;\n\t\tfor (i = 0; i < model.BodyCount (); i++) {\n\t\t\tbody = model.GetBody (i);\n\t\t\tcurrentMeshes = JSM.ConvertBodyToThreeMeshes (body, materials, conversionData);\n\t\t\tfor (j = 0; j < currentMeshes.length; j++) {\n\t\t\t\tmeshes.push (currentMeshes[j]);\n\t\t\t}\n\t\t}\n\n\t\treturn meshes;\n\t};\n\n\tJSM.ConvertJSONDataToThreeMeshes = function (jsonData, textureLoadedCallback, asyncCallbacks)\n\t{\n\t\tfunction AddMesh (mesh, meshIndex, materials, resultMeshes)\n\t\t{\n\t\t\tfunction AddTriangles (currentTriangles, vertices, normals, uvs, materials, resultMeshes)\n\t\t\t{\n\t\t\t\tfunction GetTextureCoordinate (u, v, offset, scale, rotation)\n\t\t\t\t{\n\t\t\t\t\tvar result = new JSM.THREE.Vector2 (u, v);\n\t\t\t\t\tif (!JSM.IsZero (rotation)) {\n\t\t\t\t\t\tvar si = Math.sin (rotation * JSM.DegRad);\n\t\t\t\t\t\tvar co = Math.cos (rotation * JSM.DegRad);\n\t\t\t\t\t\tresult.x = co * u - si * v;\n\t\t\t\t\t\tresult.y = si * u + co * v;\n\t\t\t\t\t}\n\t\t\t\t\tresult.x = offset[0] + result.x * scale[0];\n\t\t\t\t\tresult.y = offset[1] + result.y * scale[1];\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t\n\t\t\t\tvar materialIndex = currentTriangles.material;\n\t\t\t\tvar parameters = currentTriangles.parameters;\n\t\t\t\tvar materialData = materials[materialIndex];\n\t\t\t\t\n\t\t\t\tvar textureName = materialData.texture;\n\t\t\t\tvar textureOffset = materialData.offset;\n\t\t\t\tvar textureScale = materialData.scale;\n\t\t\t\tvar textureRotation = materialData.rotation;\n\t\t\t\t\n\t\t\t\tvar diffuseColor = new JSM.THREE.Color ();\n\t\t\t\tvar specularColor = new JSM.THREE.Color ();\n\t\t\t\tvar shininess = materialData.shininess || 0.0;\n\n\t\t\t\tdiffuseColor.setRGB (materialData.diffuse[0], materialData.diffuse[1], materialData.diffuse[2]);\n\t\t\t\tspecularColor.setRGB (materialData.specular[0], materialData.specular[1], materialData.specular[2]);\n\n\t\t\t\tif (textureName !== undefined && textureName !== null) {\n\t\t\t\t\tdiffuseColor.setRGB (1.0, 1.0, 1.0);\n\t\t\t\t\tspecularColor.setRGB (1.0, 1.0, 1.0);\n\t\t\t\t\t\n\t\t\t\t\tif (textureOffset === undefined || textureOffset === null) {\n\t\t\t\t\t\ttextureOffset = [0.0, 0.0];\n\t\t\t\t\t}\n\t\t\t\t\tif (textureScale === undefined || textureScale === null) {\n\t\t\t\t\t\ttextureScale = [1.0, 1.0];\n\t\t\t\t\t}\n\t\t\t\t\tif (textureRotation === undefined || textureRotation === null) {\n\t\t\t\t\t\ttextureRotation = 0.0;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (shininess === 0.0) {\n\t\t\t\t\tspecularColor.setRGB (0.0, 0.0, 0.0);\n\t\t\t\t\tshininess = 1;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar material = new JSM.THREE.MeshPhongMaterial ({\n\t\t\t\t\t\tcolor : diffuseColor.getHex (),\n\t\t\t\t\t\tspecular : specularColor.getHex (),\n\t\t\t\t\t\tshininess : shininess,\n\t\t\t\t\t\tside : JSM.THREE.DoubleSide\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\tif (materialData.opacity !== 1.0) {\n\t\t\t\t\tmaterial.opacity = materialData.opacity;\n\t\t\t\t\tmaterial.transparent = true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (textureName !== undefined && textureName !== null) {\n\t\t\t\t\tvar loader = new JSM.THREE.TextureLoader ();\n\t\t\t\t\tvar theMaterial = material;\n\t\t\t\t\tloader.load (textureName, function (texture) {\n\t\t\t\t\t\ttexture.image = JSM.ResizeImageToPowerOfTwoSides (texture.image);\n\t\t\t\t\t\ttexture.wrapS = JSM.THREE.RepeatWrapping;\n\t\t\t\t\t\ttexture.wrapT = JSM.THREE.RepeatWrapping;\n\t\t\t\t\t\ttheMaterial.map = texture;\n\t\t\t\t\t\ttheMaterial.needsUpdate = true;\n\t\t\t\t\t\tif (textureLoadedCallback !== undefined && textureLoadedCallback !== null) {\n\t\t\t\t\t\t\ttextureLoadedCallback ();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar geometry = new JSM.THREE.Geometry ();\n\n\t\t\t\tvar v1, v2, v3, n1, n2, n3, u1, u2, u3;\n\t\t\t\tvar lastVertex, lastFace, vertexNormals, textureUVs;\n\t\t\t\tvar j;\n\t\t\t\tfor (j = 0; j < parameters.length; j += 9) {\n\t\t\t\t\tv1 = 3 * parameters[j + 0];\n\t\t\t\t\tv2 = 3 * parameters[j + 1];\n\t\t\t\t\tv3 = 3 * parameters[j + 2];\n\t\t\t\t\tn1 = 3 * parameters[j + 3];\n\t\t\t\t\tn2 = 3 * parameters[j + 4];\n\t\t\t\t\tn3 = 3 * parameters[j + 5];\n\t\t\t\t\tu1 = 2 * parameters[j + 6];\n\t\t\t\t\tu2 = 2 * parameters[j + 7];\n\t\t\t\t\tu3 = 2 * parameters[j + 8];\n\t\t\t\t\t\n\t\t\t\t\tlastVertex = geometry.vertices.length;\n\t\t\t\t\tlastFace = geometry.faces.length;\n\t\t\t\t\t\n\t\t\t\t\tgeometry.vertices.push (new JSM.THREE.Vector3 (vertices[v1 + 0], vertices[v1 + 1], vertices[v1 + 2]));\n\t\t\t\t\tgeometry.vertices.push (new JSM.THREE.Vector3 (vertices[v2 + 0], vertices[v2 + 1], vertices[v2 + 2]));\n\t\t\t\t\tgeometry.vertices.push (new JSM.THREE.Vector3 (vertices[v3 + 0], vertices[v3 + 1], vertices[v3 + 2]));\n\t\t\t\t\tgeometry.faces.push (new JSM.THREE.Face3 (lastVertex + 0, lastVertex + 1, lastVertex + 2));\n\n\t\t\t\t\tvertexNormals = [];\n\t\t\t\t\tvertexNormals.push (new JSM.THREE.Vector3 (normals[n1 + 0], normals[n1 + 1], normals[n1 + 2]));\n\t\t\t\t\tvertexNormals.push (new JSM.THREE.Vector3 (normals[n2 + 0], normals[n2 + 1], normals[n2 + 2]));\n\t\t\t\t\tvertexNormals.push (new JSM.THREE.Vector3 (normals[n3 + 0], normals[n3 + 1], normals[n3 + 2]));\n\t\t\t\t\tgeometry.faces[lastFace].vertexNormals = vertexNormals;\n\n\t\t\t\t\tif (textureName !== undefined && textureName !== null) {\n\t\t\t\t\t\ttextureUVs = [];\n\t\t\t\t\t\ttextureUVs.push (GetTextureCoordinate (uvs[u1 + 0], uvs[u1 + 1], textureOffset, textureScale, textureRotation));\n\t\t\t\t\t\ttextureUVs.push (GetTextureCoordinate (uvs[u2 + 0], uvs[u2 + 1], textureOffset, textureScale, textureRotation));\n\t\t\t\t\t\ttextureUVs.push (GetTextureCoordinate (uvs[u3 + 0], uvs[u3 + 1], textureOffset, textureScale, textureRotation));\n\t\t\t\t\t\tgeometry.faceVertexUvs[0].push (textureUVs);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar mesh = new JSM.THREE.Mesh (geometry, material);\n\t\t\t\tmesh.originalJsonMaterialIndex = materialIndex;\n\t\t\t\tmesh.originalJsonMeshIndex = meshIndex;\n\t\t\t\tresultMeshes.push (mesh);\n\t\t\t}\n\n\t\t\tvar vertices = mesh.vertices;\n\t\t\tif (vertices === undefined) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar normals = mesh.normals;\n\t\t\tif (normals === undefined) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar uvs = mesh.uvs;\n\t\t\tif (uvs === undefined) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\n\t\t\tvar triangles = mesh.triangles;\n\t\t\tvar i;\n\t\t\tfor (i = 0; i < triangles.length; i++) {\n\t\t\t\tAddTriangles (triangles[i], vertices, normals, uvs, materials, resultMeshes);\n\t\t\t}\n\t\t}\n\n\t\tvar resultMeshes = [];\n\n\t\tvar materials = jsonData.materials;\n\t\tif (materials === undefined) {\n\t\t\treturn resultMeshes;\n\t\t}\n\t\t\n\t\tvar meshes = jsonData.meshes;\n\t\tif (meshes === undefined) {\n\t\t\treturn resultMeshes;\n\t\t}\n\t\t\n\t\tvar i = 0;\n\t\tJSM.AsyncRunTask (\n\t\t\tfunction () {\n\t\t\t\tAddMesh (meshes[i], i, materials, resultMeshes);\n\t\t\t\ti = i + 1;\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\tasyncCallbacks,\n\t\t\tmeshes.length, 0, resultMeshes\n\t\t);\n\n\t\treturn resultMeshes;\n\t};\n\n\treturn JSM;\n});\n"]}