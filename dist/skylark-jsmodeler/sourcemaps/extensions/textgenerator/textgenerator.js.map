{"version":3,"sources":["extensions/textgenerator/textgenerator.js"],"names":["define","JSM","GenerateText","text","fontSpec","fontScale","fontHeight","fontSegmentation","CreatePathFromSpecification","commands","segmentation","offset","scale","Num","str","parseFloat","current","path","Path2D","parts","split","index","length","MoveTo","LineTo","CubicBezierTo","Close","Message","i","character","glyphs","bodies","model","Model","Vector2D","Coord2D","undefined","o","GeneratePrismsFromPath2D","DegRad","AddBodies","x","ha"],"mappings":";;;;;;;AAAAA,QAAQ,kBAAkB,SAASC,GA0ElC,OA3DAA,EAAIC,aAAe,SAAUC,EAAMC,EAAUC,EAAWC,EAAYC,GAEnE,SAASC,EAA6BC,EAAUC,EAAcC,EAAQC,GAErE,SAASC,EAAKC,GAEb,OAAOC,WAAYD,GAYpB,IATA,IAQIE,EARAC,EAAO,IAAIhB,EAAIiB,QAClBR,aAAeA,EACfC,OAASA,EACTC,MAAQA,IAGLO,EAAQV,EAASW,MAAO,KACxBC,EAAQ,EAELA,EAAQF,EAAMG,QAEG,KADvBN,EAAUG,EAAME,MACJC,SAGG,KAAXN,GACHC,EAAKM,OAAQV,EAAKM,EAAME,EAAQ,IAAKR,EAAKM,EAAME,EAAQ,KACxDA,GAAS,GACY,KAAXL,GACVC,EAAKO,OAAQX,EAAKM,EAAME,EAAQ,IAAKR,EAAKM,EAAME,EAAQ,KACxDA,GAAS,GACY,KAAXL,GACVC,EAAKQ,cAAeZ,EAAKM,EAAME,EAAQ,IAAKR,EAAKM,EAAME,EAAQ,IAAKR,EAAKM,EAAME,EAAQ,IAAKR,EAAKM,EAAME,EAAQ,IAAKR,EAAKM,EAAME,EAAQ,IAAKR,EAAKM,EAAME,EAAQ,KAC/JA,GAAS,GACY,KAAXL,EACVC,EAAKS,QAELzB,EAAI0B,QAAS,+BAAiCX,IAGhD,OAAOC,EAGR,IAGIW,EAAGC,EAAWC,EAAQb,EAAMc,EAH5BC,EAAQ,IAAI/B,EAAIgC,MAChBtB,EAAS,IAAIV,EAAIiC,SAAU,EAAK,GAChCtB,EAAQ,IAAIX,EAAIkC,QAAS9B,EAAWA,GAExC,IAAKuB,EAAI,EAAGA,EAAIzB,EAAKmB,OAAQM,IAC5BC,EAAY1B,EAAKyB,QAEFQ,KADfN,EAAS1B,EAAS0B,OAAOD,MAIzBZ,EAAOT,EAA6BsB,EAAOO,EAAG9B,EAAkBI,EAAQC,GACxEmB,EAAS9B,EAAIqC,yBAA0BrB,EAAMX,GAAY,EAAM,IAAML,EAAIsC,QACzEP,EAAMQ,UAAWT,GACjBpB,EAAO8B,GAAKX,EAAOY,GAAK9B,EAAM6B,GAE/B,OAAOT,GAGD/B","file":"../../../extensions/textgenerator/textgenerator.js","sourcesContent":["define([\"../../core/jsm\"],function(JSM){\n\t/**\n\t* Function: GenerateText\n\t* Description:\n\t*\tGenerates 3D model from the given text. It should get a font\n\t*\tspecification object created with facetype.js.\n\t* Parameters:\n\t*\ttext {string} the text\n\t*\tfontSpec {object} the font specification object generated with facetype.js\n\t*\tfontScale {number} the scale of the generated model\n\t*\tfontHeight {number} the height of the generated model\n\t*\tfontSegmentation {integer} the segmentation of font glyphs\n\t* Returns:\n\t*\t{Model} the result\n\t*/\n\tJSM.GenerateText = function (text, fontSpec, fontScale, fontHeight, fontSegmentation)\n\t{\n\t\tfunction CreatePathFromSpecification (commands, segmentation, offset, scale)\n\t\t{\n\t\t\tfunction Num (str)\n\t\t\t{\n\t\t\t\treturn parseFloat (str);\n\t\t\t}\n\t\t\n\t\t\tvar path = new JSM.Path2D ({\n\t\t\t\tsegmentation : segmentation,\n\t\t\t\toffset : offset,\n\t\t\t\tscale : scale\n\t\t\t});\n\t\t\t\n\t\t\tvar parts = commands.split (' ');\n\t\t\tvar index = 0;\n\t\t\tvar current;\n\t\t\twhile (index < parts.length) {\n\t\t\t\tcurrent = parts[index++];\n\t\t\t\tif (current.length === 0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (current == 'm') {\n\t\t\t\t\tpath.MoveTo (Num (parts[index + 0]), Num (parts[index + 1]));\n\t\t\t\t\tindex += 2;\n\t\t\t\t} else if (current == 'l') {\n\t\t\t\t\tpath.LineTo (Num (parts[index + 0]), Num (parts[index + 1]));\n\t\t\t\t\tindex += 2;\n\t\t\t\t} else if (current == 'b') {\n\t\t\t\t\tpath.CubicBezierTo (Num (parts[index + 0]), Num (parts[index + 1]), Num (parts[index + 2]), Num (parts[index + 3]), Num (parts[index + 4]), Num (parts[index + 5]));\n\t\t\t\t\tindex += 6;\n\t\t\t\t} else if (current == 'z') {\n\t\t\t\t\tpath.Close ();\n\t\t\t\t} else {\n\t\t\t\t\tJSM.Message ('Invalid path command found: ' + current);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn path;\n\t\t}\n\n\t\tvar model = new JSM.Model ();\n\t\tvar offset = new JSM.Vector2D (0.0, 0.0);\n\t\tvar scale = new JSM.Coord2D (fontScale, fontScale);\n\t\tvar i, character, glyphs, path, bodies;\n\t\tfor (i = 0; i < text.length; i++) {\n\t\t\tcharacter = text[i];\n\t\t\tglyphs = fontSpec.glyphs[character];\n\t\t\tif (glyphs === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tpath = CreatePathFromSpecification (glyphs.o, fontSegmentation, offset, scale);\n\t\t\tbodies = JSM.GeneratePrismsFromPath2D (path, fontHeight, true, 160 * JSM.DegRad);\n\t\t\tmodel.AddBodies (bodies);\n\t\t\toffset.x += glyphs.ha * scale.x;\n\t\t}\n\t\treturn model;\n\t};\n\n\treturn JSM;\n});\n"]}