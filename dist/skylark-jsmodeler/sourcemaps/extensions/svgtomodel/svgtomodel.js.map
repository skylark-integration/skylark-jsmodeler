{"version":3,"sources":["extensions/svgtomodel/svgtomodel.js"],"names":["define","JSM","SvgToModel","svgObject","height","segmentLength","curveAngle","SegmentElem","elem","AddTransformedVertex","dummySVG","result","x","y","point","createSVGPoint","transformed","matrix","getCTM","undefined","matrixTransform","transformedCoord","Coord2D","resultCoord","contour","GetLastContour","contourVertexCount","VertexCount","GetVertex","IsEqualWithEps","AddVertex","SegmentCurve","originalPath","lastCoord","items","path","i","item","command","largeArcFlag","sweepFlag","document","createElementNS","commandString","length","pathSegType","SVGPathSeg","PATHSEG_CURVETO_CUBIC_ABS","PATHSEG_CURVETO_CUBIC_REL","x1","y1","x2","y2","PATHSEG_CURVETO_QUADRATIC_ABS","PATHSEG_CURVETO_QUADRATIC_REL","PATHSEG_ARC_ABS","PATHSEG_ARC_REL","r1","r2","angle","PATHSEG_CURVETO_CUBIC_SMOOTH_ABS","PATHSEG_CURVETO_CUBIC_SMOOTH_REL","setAttributeNS","CreatePath","pathLength","getTotalLength","segmentation","parseInt","step","getPointAtLength","IsCurvedItem","IsSmoothItem","RemoveEqualEndVertices","polygon","vertexCount","firstCoord","vertices","pop","StartNewContour","AddContour","ContourPolygon2D","j","SVGPathElement","currentItem","lastMoveCoord","currentSegmentLength","hasAttribute","parseFloat","getAttribute","pathSegList","numberOfItems","getItem","PATHSEG_CLOSEPATH","PATHSEG_MOVETO_ABS","Clone","PATHSEG_MOVETO_REL","PATHSEG_LINETO_ABS","PATHSEG_LINETO_REL","PATHSEG_LINETO_HORIZONTAL_ABS","PATHSEG_LINETO_VERTICAL_ABS","PATHSEG_LINETO_HORIZONTAL_REL","PATHSEG_LINETO_VERTICAL_REL","push","SVGRectElement","baseVal","value","width","SVGPolygonElement","points","color","svgColor","target","style","fill","parentElement","HexColorToRGBColor","substring","firstBracket","indexOf","secondBracket","rgb","split","RGBComponentsToHexColor","SVGColorToHex","originalElem","ContourPolygonToPrisms","AppendPolygonVertices","vertexArray","reversed","coord","Coord","CreateBasePolygon","basePolygon","GetOrientation","Orientation","CounterClockwise","AddHoleToBasePolygon","holePolygon","Clockwise","baseOrientation","prism","prisms","direction","Vector","currentHeight","contourCount","ContourCount","GetContour","GeneratePrism","holeBasePolygon","hasHoles","GeneratePrismWithHole","Material","ambient","diffuse","prismsAndMaterial","currentPrisms","currentPrism","currentMaterial","model","Model","polygons","AddElemType","elemType","elems","getElementsByTagName","current","SegmentPaths","AddMaterial","SetPolygonsMaterialIndex","MaterialCount","AddBody"],"mappings":"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","file":"../../../extensions/svgtomodel/svgtomodel.js","sourcesContent":["define([\"../../core/jsm\"],function(JSM){\n\t/**\n\t* Function: SvgToModel\n\t* Description: Converts an svg objects rect, path and polygon elements to a body.\n\t* Parameters:\n\t*\tsvgObject {html svg element} the svg element\n\t*\theight {number} the height of the result body\n\t*\tsegmentLength {number} the maximum length of curved segments\n\t*\tcurveAngle {number} if not null, defines the curve angle of the model\n\t* Returns:\n\t*\t{Model} the result\n\t*/\n\tJSM.SvgToModel = function (svgObject, height, segmentLength, curveAngle)\n\t{\n\t\tfunction SegmentElem (elem, segmentLength)\n\t\t{\n\t\t\tfunction AddTransformedVertex (dummySVG, result, elem, x, y)\n\t\t\t{\n\t\t\t\tvar point = dummySVG.createSVGPoint ();\n\t\t\t\tpoint.x = x;\n\t\t\t\tpoint.y = y;\n\t\t\t\t\n\t\t\t\tvar transformed = point;\n\t\t\t\tvar matrix = elem.getCTM ();\n\t\t\t\tif (matrix !== undefined && matrix !== null) {\n\t\t\t\t\ttransformed = point.matrixTransform (matrix);\t\t\t\t\n\t\t\t\t}\n\t\t\t\tvar transformedCoord = new JSM.Coord2D (transformed.x, transformed.y);\n\t\t\t\tvar resultCoord = new JSM.Coord2D (x, y);\n\t\t\t\t\n\t\t\t\tvar contour = result.GetLastContour ();\n\t\t\t\tvar contourVertexCount = contour.VertexCount ();\n\t\t\t\tif (contourVertexCount > 0) {\n\t\t\t\t\tif (contour.GetVertex (contourVertexCount - 1).IsEqualWithEps (transformedCoord, 0.1)) {\n\t\t\t\t\t\treturn resultCoord;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcontour.AddVertex (transformed.x, transformed.y);\n\t\t\t\treturn resultCoord;\n\t\t\t}\n\n\t\t\tfunction SegmentCurve (dummySVG, originalPath, segmentLength, lastCoord, items, result)\n\t\t\t{\n\t\t\t\tfunction CreatePath (items)\n\t\t\t\t{\n\t\t\t\t\tfunction GenerateMoveCommand (x, y)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn 'M ' + x + ' ' + y + ' ';\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\tvar svgNameSpace = 'http://www.w3.org/2000/svg';\n\t\t\t\t\tvar path = document.createElementNS (svgNameSpace, 'path');\n\n\t\t\t\t\tvar commandString = GenerateMoveCommand (lastCoord.x, lastCoord.y);\n\t\t\t\t\tvar i, item, command, largeArcFlag, sweepFlag;\n\t\t\t\t\tfor (i = 0; i < items.length; i++) {\n\t\t\t\t\t\titem = items[i];\n\t\t\t\t\t\tif (item.pathSegType == SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS ||\n\t\t\t\t\t\t\titem.pathSegType == SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL) {\n\t\t\t\t\t\t\tcommand = (item.pathSegType == SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS ? 'C' : 'c');\n\t\t\t\t\t\t\tcommandString += command + ' ' + item.x1 + ' ' + item.y1 + ' ' + item.x2 + ' ' + item.y2 + ' ' + item.x + ' ' + item.y + ' ';\n\t\t\t\t\t\t} else if (\titem.pathSegType == SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS ||\n\t\t\t\t\t\t\t\t\titem.pathSegType == SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL){\n\t\t\t\t\t\t\tcommand = (item.pathSegType == SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS ? 'Q' : 'q');\n\t\t\t\t\t\t\tcommandString += command + ' ' + item.x1 + ' ' + item.y1 + ' ' + item.x + ' ' + item.y + ' ';\n\t\t\t\t\t\t} else if (\titem.pathSegType == SVGPathSeg.PATHSEG_ARC_ABS ||\n\t\t\t\t\t\t\t\t\titem.pathSegType == SVGPathSeg.PATHSEG_ARC_REL){\n\t\t\t\t\t\t\tcommand = (item.pathSegType == SVGPathSeg.PATHSEG_ARC_ABS ? 'A' : 'a');\n\t\t\t\t\t\t\tlargeArcFlag = (item.largeArcFlag ? 1 : 0);\n\t\t\t\t\t\t\tsweepFlag = (item.sweepFlag ? 1 : 0);\n\t\t\t\t\t\t\tcommandString +=  command + ' ' + item.r1 + ' ' + item.r2 + ' ' + item.angle + ' ' + largeArcFlag + ' ' + sweepFlag + ' ' + item.x + ' ' + item.y + ' ';\n\t\t\t\t\t\t} else if (\titem.pathSegType == SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS ||\n\t\t\t\t\t\t\t\t\titem.pathSegType == SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL){\n\t\t\t\t\t\t\tcommand = (item.pathSegType == SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS ? 'S' : 's');\n\t\t\t\t\t\t\tcommandString +=  command + ' ' + item.x2 + ' ' + item.y2 + ' ' + item.x + ' ' + item.y + ' ';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// unknown segment type\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tpath.setAttributeNS (null, 'd', commandString);\n\t\t\t\t\treturn path;\n\t\t\t\t}\n\t\t\t\n\t\t\t\tvar path = CreatePath (items);\n\t\t\t\tvar pathLength = path.getTotalLength ();\n\n\t\t\t\tvar segmentation = 0;\n\t\t\t\tif (segmentLength > 0) {\n\t\t\t\t\tsegmentation = parseInt (pathLength / segmentLength, 10);\n\t\t\t\t}\n\t\t\t\tif (segmentation < 3) {\n\t\t\t\t\tsegmentation = 3;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar step = pathLength / segmentation;\n\t\t\t\tvar i, point;\n\t\t\t\tfor (i = 1; i <= segmentation; i++) {\n\t\t\t\t\tpoint = path.getPointAtLength (i * step);\n\t\t\t\t\tlastCoord = AddTransformedVertex (dummySVG, result, originalPath, point.x, point.y);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn lastCoord;\n\t\t\t}\n\t\t\t\n\t\t\tfunction IsCurvedItem (item)\n\t\t\t{\n\t\t\t\treturn\titem.pathSegType == SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS ||\n\t\t\t\t\t\titem.pathSegType == SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL ||\n\t\t\t\t\t\titem.pathSegType == SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS ||\n\t\t\t\t\t\titem.pathSegType == SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL ||\n\t\t\t\t\t\titem.pathSegType == SVGPathSeg.PATHSEG_ARC_ABS ||\n\t\t\t\t\t\titem.pathSegType == SVGPathSeg.PATHSEG_ARC_REL ||\n\t\t\t\t\t\titem.pathSegType == SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS ||\n\t\t\t\t\t\titem.pathSegType == SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL;\n\t\t\t}\n\t\t\t\n\t\t\tfunction IsSmoothItem (item)\n\t\t\t{\n\t\t\t\treturn\titem.pathSegType == SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS ||\n\t\t\t\t\t\titem.pathSegType == SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL;\n\t\t\t}\n\n\t\t\tfunction RemoveEqualEndVertices (polygon)\n\t\t\t{\n\t\t\t\tvar contour = polygon.GetLastContour ();\n\t\t\t\tvar vertexCount = contour.VertexCount ();\n\t\t\t\tif (vertexCount === 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar firstCoord = contour.GetVertex (0);\n\t\t\t\tvar lastCoord = contour.GetVertex (vertexCount - 1);\n\t\t\t\tif (firstCoord.IsEqualWithEps (lastCoord, 0.1)) {\n\t\t\t\t\t// TODO: Do not access vertices directly\n\t\t\t\t\tcontour.vertices.pop ();\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t\tfunction StartNewContour (result)\n\t\t\t{\n\t\t\t\tif (result.GetLastContour ().VertexCount () > 0) {\n\t\t\t\t\tRemoveEqualEndVertices (result);\n\t\t\t\t\tresult.AddContour ();\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t\tfunction SVGColorToHex (path)\n\t\t\t{\n\t\t\t\tvar svgColor = '';\n\t\t\t\tvar target = path;\n\t\t\t\twhile (target !== null && target !== undefined && svgColor.length === 0) {\n\t\t\t\t\tsvgColor = target.getAttribute ('fill');\n\t\t\t\t\tif (svgColor === null) {\n\t\t\t\t\t\tsvgColor = target.style.fill;\n\t\t\t\t\t}\n\t\t\t\t\ttarget = target.parentElement;\n\t\t\t\t}\n\n\t\t\t\tvar result = 0x000000;\n\t\t\t\tif (svgColor.length === 0) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (svgColor[0] == '#') {\n\t\t\t\t\tresult = JSM.HexColorToRGBColor (svgColor.substring (1));\n\t\t\t\t} else {\n\t\t\t\t\tvar firstBracket = svgColor.indexOf ('(');\n\t\t\t\t\tvar secondBracket = svgColor.indexOf (')');\n\t\t\t\t\tif (firstBracket == -1 || secondBracket == -1) {\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tvar numbers = svgColor.substring (firstBracket + 1, secondBracket);\n\t\t\t\t\tvar rgb = numbers.split (', ');\n\t\t\t\t\tif (rgb.length != 3) {\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tresult = JSM.RGBComponentsToHexColor (rgb[0], rgb[1], rgb[2]);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\n\t\t\tvar result = new JSM.ContourPolygon2D ();\n\t\t\tresult.AddContour ();\n\n\t\t\tvar dummySVG = document.createElementNS ('http://www.w3.org/2000/svg', 'svg');\n\n\t\t\tvar i, j;\n\t\t\tif (elem instanceof SVGPathElement) {\n\t\t\t\tvar lastCoord = new JSM.Coord2D (0.0, 0.0);\n\t\t\t\tvar lastMoveCoord = new JSM.Coord2D (0.0, 0.0);\n\n\t\t\t\tvar currentSegmentLength = segmentLength;\n\t\t\t\tif (elem.hasAttribute ('segmentlength')) {\n\t\t\t\t\tcurrentSegmentLength = parseFloat (elem.getAttribute ('segmentlength'));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar item, items, currentItem;\n\t\t\t\tfor (i = 0; i < elem.pathSegList.numberOfItems; i++) {\n\t\t\t\t\titem = elem.pathSegList.getItem (i);\n\t\t\t\t\tif (item.pathSegType == SVGPathSeg.PATHSEG_CLOSEPATH) {\n\t\t\t\t\t\t// do nothing\n\t\t\t\t\t} else if (item.pathSegType == SVGPathSeg.PATHSEG_MOVETO_ABS) {\n\t\t\t\t\t\tStartNewContour (result);\n\t\t\t\t\t\tlastCoord = AddTransformedVertex (dummySVG, result, elem, item.x, item.y);\n\t\t\t\t\t\tlastMoveCoord = lastCoord.Clone ();\n\t\t\t\t\t} else if (item.pathSegType == SVGPathSeg.PATHSEG_MOVETO_REL) {\n\t\t\t\t\t\tStartNewContour (result);\n\t\t\t\t\t\tlastCoord = AddTransformedVertex (dummySVG, result, elem, lastMoveCoord.x + item.x, lastMoveCoord.y + item.y);\n\t\t\t\t\t\tlastMoveCoord = lastCoord.Clone ();\n\t\t\t\t\t} else if (item.pathSegType == SVGPathSeg.PATHSEG_LINETO_ABS) {\n\t\t\t\t\t\tlastCoord = AddTransformedVertex (dummySVG, result, elem, item.x, item.y);\n\t\t\t\t\t} else if (item.pathSegType == SVGPathSeg.PATHSEG_LINETO_REL) {\n\t\t\t\t\t\tlastCoord = AddTransformedVertex (dummySVG, result, elem, lastCoord.x + item.x, lastCoord.y + item.y);\n\t\t\t\t\t} else if (item.pathSegType == SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS) {\n\t\t\t\t\t\tlastCoord = AddTransformedVertex (dummySVG, result, elem, item.x, lastCoord.y);\n\t\t\t\t\t} else if (item.pathSegType == SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS) {\n\t\t\t\t\t\tlastCoord = AddTransformedVertex (dummySVG, result, elem, lastCoord.x, item.y);\n\t\t\t\t\t} else if (item.pathSegType == SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL) {\n\t\t\t\t\t\tlastCoord = AddTransformedVertex (dummySVG, result, elem, lastCoord.x + item.x, lastCoord.y);\n\t\t\t\t\t} else if (item.pathSegType == SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL) {\n\t\t\t\t\t\tlastCoord = AddTransformedVertex (dummySVG, result, elem, lastCoord.x, lastCoord.y + item.y);\n\t\t\t\t\t} else if (IsCurvedItem (item)) {\n\t\t\t\t\t\titems = [];\n\t\t\t\t\t\tif (IsSmoothItem (item)) {\n\t\t\t\t\t\t\tfor (j = i; j < elem.pathSegList.numberOfItems; j++) {\n\t\t\t\t\t\t\t\tcurrentItem = elem.pathSegList.getItem (j);\n\t\t\t\t\t\t\t\tif (!IsSmoothItem (currentItem)) {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\titems.push (currentItem);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ti = j - 1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\titems.push (item);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlastCoord = SegmentCurve (dummySVG, elem, currentSegmentLength, lastCoord, items, result);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// unknown segment type\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tRemoveEqualEndVertices (result);\n\t\t\t} else if (elem instanceof SVGRectElement) {\n\t\t\t\tAddTransformedVertex (dummySVG, result, elem, elem.x.baseVal.value, elem.y.baseVal.value);\n\t\t\t\tAddTransformedVertex (dummySVG, result, elem, elem.x.baseVal.value + elem.width.baseVal.value, elem.y.baseVal.value);\n\t\t\t\tAddTransformedVertex (dummySVG, result, elem, elem.x.baseVal.value + elem.width.baseVal.value, elem.y.baseVal.value + elem.height.baseVal.value);\n\t\t\t\tAddTransformedVertex (dummySVG, result, elem, elem.x.baseVal.value, elem.y.baseVal.value + elem.height.baseVal.value);\n\t\t\t} else if (elem instanceof SVGPolygonElement) {\n\t\t\t\tvar point;\n\t\t\t\tfor (i = 0; i < elem.points.numberOfItems; i++) {\n\t\t\t\t\tpoint = elem.points.getItem (i);\n\t\t\t\t\tAddTransformedVertex (dummySVG, result, elem, point.x, point.y);\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult.color = SVGColorToHex (elem);\n\t\t\tresult.originalElem = elem;\n\t\t\treturn result;\n\t\t}\n\t\t\n\t\tfunction SegmentPaths (svgObject, segmentLength)\n\t\t{\n\t\t\tfunction AddElemType (svgObject, elemType, result)\n\t\t\t{\n\t\t\t\tvar elems = svgObject.getElementsByTagName (elemType);\n\t\t\t\tvar i;\n\t\t\t\tfor (i = 0; i < elems.length; i++) {\n\t\t\t\t\tresult.push (elems[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t\tvar result = [];\n\t\t\tvar elems = [];\n\t\t\tAddElemType (svgObject, 'path', elems);\n\t\t\tAddElemType (svgObject, 'rect', elems);\n\t\t\tAddElemType (svgObject, 'polygon', elems);\n\t\t\t\n\t\t\tvar currentSegmentLength = segmentLength;\n\t\t\tif (svgObject.hasAttribute ('segmentlength')) {\n\t\t\t\tcurrentSegmentLength = parseFloat (svgObject.getAttribute ('segmentlength'));\n\t\t\t}\n\n\t\t\tvar i, current;\n\t\t\tfor (i = 0; i < elems.length; i++) {\n\t\t\t\tcurrent = SegmentElem (elems[i], currentSegmentLength);\n\t\t\t\tresult.push (current);\n\t\t\t}\n\t\t\t\n\t\t\treturn result;\n\t\t}\n\t\t\n\t\tfunction ContourPolygonToPrisms (polygon, height, curveAngle)\n\t\t{\n\t\t\tfunction AppendPolygonVertices (polygon, vertexArray, reversed)\n\t\t\t{\n\t\t\t\tvar i, coord;\n\t\t\t\tif (!reversed) {\n\t\t\t\t\tfor (i = 0; i < polygon.VertexCount (); i++) {\n\t\t\t\t\t\tcoord = polygon.GetVertex (i);\n\t\t\t\t\t\tvertexArray.push (new JSM.Coord (coord.x, -coord.y, 0.0));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (i = polygon.VertexCount () - 1; i >= 0; i--) {\n\t\t\t\t\t\tcoord = polygon.GetVertex (i);\n\t\t\t\t\t\tvertexArray.push (new JSM.Coord (coord.x, -coord.y, 0.0));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfunction CreateBasePolygon (polygon)\n\t\t\t{\n\t\t\t\tvar basePolygon = [];\n\t\t\t\tvar orientation = polygon.GetOrientation ();\n\t\t\t\tvar reversed = (orientation == JSM.Orientation.CounterClockwise);\n\t\t\t\tAppendPolygonVertices (polygon, basePolygon, reversed);\n\t\t\t\treturn basePolygon;\n\t\t\t}\n\t\t\n\t\t\tfunction AddHoleToBasePolygon (basePolygon, holePolygon)\n\t\t\t{\n\t\t\t\tbasePolygon.push (null);\n\t\t\t\tvar orientation = holePolygon.GetOrientation ();\n\t\t\t\tvar reversed = (orientation == JSM.Orientation.Clockwise);\n\t\t\t\tAppendPolygonVertices (holePolygon, basePolygon, reversed);\n\t\t\t}\n\n\t\t\tvar prisms = [];\n\t\t\tvar direction = new JSM.Vector (0.0, 0.0, 1.0);\n\t\t\t\n\t\t\tvar currentHeight = height;\n\t\t\tif (polygon.originalElem !== undefined) {\n\t\t\t\tif (polygon.originalElem.hasAttribute ('modelheight')) {\n\t\t\t\t\tcurrentHeight = parseFloat (polygon.originalElem.getAttribute ('modelheight'));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar basePolygon, baseOrientation, prism;\n\t\t\tvar contourCount = polygon.ContourCount ();\n\t\t\tif (contourCount === 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t\n\t\t\tif (contourCount == 1) {\n\t\t\t\tbaseOrientation = polygon.GetContour (0).GetOrientation ();\n\t\t\t\tbasePolygon = CreateBasePolygon (polygon.GetContour (0));\n\t\t\t\tprism = JSM.GeneratePrism (basePolygon, direction, currentHeight, true, curveAngle);\n\t\t\t\tprisms.push (prism);\n\t\t\t} else if (contourCount > 1) {\n\t\t\t\tbaseOrientation = polygon.GetContour (0).GetOrientation ();\n\t\t\t\tvar holeBasePolygon = CreateBasePolygon (polygon.GetContour (0));\n\t\t\t\tvar hasHoles = false;\n\t\t\t\t\n\t\t\t\tvar i, orientation;\n\t\t\t\tfor (i = 1; i < polygon.ContourCount (); i++) {\n\t\t\t\t\torientation = polygon.GetContour (i).GetOrientation ();\n\t\t\t\t\tif (orientation == baseOrientation) {\n\t\t\t\t\t\tbasePolygon = CreateBasePolygon (polygon.GetContour (i));\n\t\t\t\t\t\tprism = JSM.GeneratePrism (basePolygon, direction, currentHeight, true, curveAngle);\n\t\t\t\t\t\tprisms.push (prism);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tAddHoleToBasePolygon (holeBasePolygon, polygon.GetContour (i));\n\t\t\t\t\t\thasHoles = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (!hasHoles) {\n\t\t\t\t\tprism = JSM.GeneratePrism (holeBasePolygon, direction, currentHeight, true, curveAngle);\n\t\t\t\t\tprisms.push (prism);\n\t\t\t\t} else {\n\t\t\t\t\tprism = JSM.GeneratePrismWithHole (holeBasePolygon, direction, currentHeight, true, curveAngle);\n\t\t\t\t\tprisms.push (prism);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar material = new JSM.Material ({ambient : polygon.color, diffuse : polygon.color});\n\t\t\treturn [prisms, material];\n\t\t}\n\t\t\n\t\tvar model = new JSM.Model ();\n\t\tvar polygons = SegmentPaths (svgObject, segmentLength);\n\n\t\tvar currentHeight = height;\n\t\tif (svgObject.hasAttribute ('modelheight')) {\n\t\t\tcurrentHeight = parseFloat (svgObject.getAttribute ('modelheight'));\n\t\t}\n\t\t\n\t\tvar i, j, prismsAndMaterial, currentPrisms, currentPrism, currentMaterial;\n\t\tfor (i = 0; i < polygons.length; i++) {\n\t\t\tprismsAndMaterial = ContourPolygonToPrisms (polygons[i], currentHeight, curveAngle);\n\t\t\tif (prismsAndMaterial === null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tcurrentPrisms = prismsAndMaterial[0];\n\t\t\tcurrentMaterial = prismsAndMaterial[1];\n\t\t\tmodel.AddMaterial (currentMaterial);\n\t\t\tfor (j = 0; j < currentPrisms.length; j++) {\n\t\t\t\tcurrentPrism = currentPrisms[j];\n\t\t\t\tcurrentPrism.SetPolygonsMaterialIndex (model.MaterialCount () - 1);\n\t\t\t\tmodel.AddBody (currentPrism);\n\t\t\t}\n\t\t}\n\n\t\treturn model;\n\t};\n\n\treturn JSM;\n});\n"]}