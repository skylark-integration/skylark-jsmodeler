{"version":3,"sources":["modeler/exporter.js"],"names":["define","JSM","ExportBodyContentToStl","body","name","hasConvexPolygons","AddLineToContent","line","stlContent","AddTriangleToContent","normal","vertex1","vertex2","vertex3","x","y","z","AddPolygon","index","polygon","GetPolygon","count","VertexIndexCount","CalculateBodyPolygonNormal","GetVertex","GetVertexIndex","position","i","useTriangulation","undefined","vertex","polygon3D","Polygon","vertices","AddVertex","triangle","triangles","TriangulatePolygon","length","PolygonCount","ExportBodyToStl","ExportModelToStl","model","BodyCount","GetBody","toString","ExportBodyContentToObj","vertexOffset","normalOffset","AddToContent","objContent","AddNormal","normalVector","vertCoord","VertexCount","ExportBodyToObj","ExportModelToObj","ExportMaterialsToGdl","materials","AddMaterial","material","hexColor","rgb","rgbString","diffuse","HexColorToRGBComponents","gdlContent","writeMaterials","GetDefaultMaterial","Count","GetMaterial","ExportBodyGeometryToGdl","character","current","AddEdge","adjacencyInfo","edge","edges","status","pgon1","pgon2","HasCurveGroup","GetCurveGroup","vert1","vert2","lastMaterialIndex","materialIndex","GetMaterialIndex","pgon","pgons","pedges","pedge","pedgeList","reverse","AdjacencyInfo","verts","ExportBodyToGdl","ExportModelToGdl"],"mappings":";;;;;;;AAAAA,QAAQ,eAAe,SAASC,GAid/B,OAtcAA,EAAIC,uBAAyB,SAAUC,EAAMC,EAAMC,GAElD,SAASC,EAAkBC,GAE1BC,GAAcD,EAAO,KAGtB,SAASE,EAAsBC,EAAQC,EAASC,EAASC,GAExDP,EAAkB,kBAAoBI,EAAOI,EAAI,IAAMJ,EAAOK,EAAI,IAAML,EAAOM,GAC/EV,EAAkB,kBAClBA,EAAkB,gBAAkBK,EAAQG,EAAI,IAAMH,EAAQI,EAAI,IAAMJ,EAAQK,GAChFV,EAAkB,gBAAkBM,EAAQE,EAAI,IAAMF,EAAQG,EAAI,IAAMH,EAAQI,GAChFV,EAAkB,gBAAkBO,EAAQC,EAAI,IAAMD,EAAQE,EAAI,IAAMF,EAAQG,GAChFV,EAAkB,eAClBA,EAAkB,cAGnB,SAASW,EAAYC,GAEpB,IAAIC,EAAUhB,EAAKiB,WAAYF,GAC3BG,EAAQF,EAAQG,mBACpB,KAAID,EAAQ,GAAZ,CAIA,IACIX,EAAS,KACb,GAAc,IAAVW,EAKHZ,EAJAC,EAAST,EAAIsB,2BAA4BpB,EAAMe,GACrCf,EAAKqB,UAAWL,EAAQM,eAAgB,IAAIC,SAC5CvB,EAAKqB,UAAWL,EAAQM,eAAgB,IAAIC,SAC5CvB,EAAKqB,UAAWL,EAAQM,eAAgB,IAAIC,cAEhD,CACN,IAKIC,EALAC,GAAmB,EAOvB,QAN0BC,IAAtBxB,GAAmCA,IACtCuB,GAAmB,GAIpBlB,EAAST,EAAIsB,2BAA4BpB,EAAMe,GAC3CU,EAAkB,CACrB,IAEIE,EAFAC,EAAY,IAAI9B,EAAI+B,QAGxB,IAAKL,EAAI,EAAGA,EAAIN,EAAOM,IACtBG,EAAS3B,EAAKqB,UAAWL,EAAQc,SAASN,IAC1CI,EAAUG,UAAWJ,EAAOJ,SAASZ,EAAGgB,EAAOJ,SAASX,EAAGe,EAAOJ,SAASV,GAG5E,IAEKmB,EAFDC,EAAYnC,EAAIoC,mBAAoBN,EAAWrB,GACnD,GAAkB,OAAd0B,EAEH,IAAKT,EAAI,EAAGA,EAAIS,EAAUE,OAAQX,IACjCQ,EAAWC,EAAUT,GAIrBlB,EAAsBC,EAHZP,EAAKqB,UAAWL,EAAQM,eAAgBU,EAAS,KAAKT,SACtDvB,EAAKqB,UAAWL,EAAQM,eAAgBU,EAAS,KAAKT,SACtDvB,EAAKqB,UAAWL,EAAQM,eAAgBU,EAAS,KAAKT,eAKlE,IAAKC,EAAI,EAAGA,EAAIN,EAAQ,EAAGM,IAI1BlB,EAAsBC,EAHZP,EAAKqB,UAAWL,EAAQM,eAAgB,IAAIC,SAC5CvB,EAAKqB,UAAWL,EAAQM,gBAAiBE,EAAI,GAAKN,IAAQK,SAC1DvB,EAAKqB,UAAWL,EAAQM,gBAAiBE,EAAI,GAAKN,IAAQK,YAOxE,IAEIC,EAFAnB,EAAa,GAGjB,IAAKmB,EAAI,EAAGA,EAAIxB,EAAKoC,eAAiBZ,IACrCV,EAAYU,GAGb,OAAOnB,GAaRP,EAAIuC,gBAAkB,SAAUrC,EAAMC,EAAMC,GAE3C,SAASC,EAAkBC,GAE1BC,GAAcD,EAAO,KAGtB,IAAIC,EAAa,GAMjB,OAJAF,EAAkB,SAAWF,GAC7BI,GAAcP,EAAIC,uBAAwBC,EAAMC,EAAMC,GACtDC,EAAkB,YAAcF,GAEzBI,GAaRP,EAAIwC,iBAAmB,SAAUC,EAAOtC,EAAMC,GAE7C,SAASC,EAAkBC,GAE1BC,GAAcD,EAAO,KAGtB,IAGIoB,EAAGxB,EAHHK,EAAa,GAIjB,IAFAF,EAAkB,SAAWF,GAExBuB,EAAI,EAAGA,EAAIe,EAAMC,YAAchB,IACnCxB,EAAOuC,EAAME,QAASjB,GACtBnB,GAAcP,EAAIC,uBAAwBC,EAAMC,GAAQuB,EAAI,GAAGkB,WAAaxC,GAI7E,OAFAC,EAAkB,YAAcF,GAEzBI,GAaRP,EAAI6C,uBAAyB,SAAU3C,EAAM4C,EAAcC,GAE1D,SAASC,EAAc1C,GAEtB2C,GAAc3C,EAGf,SAASD,EAAkBC,GAE1B2C,GAAc3C,EAAO,KAStB,SAAS4C,EAAWjC,GAEnB,IAAIkC,EAAenD,EAAIsB,2BAA4BpB,EAAMe,GACzDZ,EAAkB,MAAQ8C,EAAatC,EAAI,IAAMsC,EAAarC,EAAI,IAAMqC,EAAapC,GAGtF,SAASC,EAAYC,GAEpB,IAIIS,EAJAR,EAAUhB,EAAKiB,WAAYF,GAK/B,IAHA+B,EAAc,MAGTtB,EAAI,EAAGA,EAAIR,EAAQG,mBAAqBK,IAC5CsB,EAAeF,EAAe5B,EAAQM,eAAgBE,GAAK,EAAK,MAAQqB,EAAe9B,EAAQ,GAAK,KAGrGZ,EAAkB,IAGnB,IAEIqB,EA5BgBT,EAEfmC,EAwBDH,EAAa,GAGjB,IAAKvB,EAAI,EAAGA,EAAIxB,EAAKmD,cAAgB3B,IA7BjBT,EA8BRS,OA5BP0B,EACJ/C,EAAkB,MADd+C,EAAYlD,EAAKqB,UAAWN,GAAOQ,UACJZ,EAAI,IAAMuC,EAAUtC,EAAI,IAAMsC,EAAUrC,GA8B5E,IAAKW,EAAI,EAAGA,EAAIxB,EAAKoC,eAAiBZ,IACrCwB,EAAWxB,GAGZ,IAAKA,EAAI,EAAGA,EAAIxB,EAAKoC,eAAiBZ,IACrCV,EAAYU,GAGb,OAAOuB,GAWRjD,EAAIsD,gBAAkB,SAAUpD,GAE/B,OAAOF,EAAI6C,uBAAwB3C,EAAM,EAAG,IAW7CF,EAAIuD,iBAAmB,SAAUd,GAEhC,IAKIf,EAAGxB,EALH+C,EAAa,GAEbH,EAAe,EACfC,EAAe,EAGnB,IAAKrB,EAAI,EAAGA,EAAIe,EAAMC,YAAchB,IACnCxB,EAAOuC,EAAME,QAASjB,GACtBuB,GAAcjD,EAAI6C,uBAAwB3C,EAAM4C,EAAcC,GAC9DD,GAAgB5C,EAAKmD,cACrBN,GAAgB7C,EAAKoC,eAGtB,OAAOW,GAWRjD,EAAIwD,qBAAuB,SAAUC,GAcpC,SAASC,EAAaC,EAAU1C,GAE/B,IAdkC2C,EAE9BC,EAYAC,GAd8BF,EAcQD,EAASI,SAZ/CF,EAAM7D,EAAIgE,wBAAyBJ,IACtB,GAAK,IAAQ,IAAMC,EAAI,GAAK,IAAQ,IAAMA,EAAI,GAAK,KAMpEI,GAMkB,4BAA8BhD,EAAQ,QAAU6C,EAAY,MAAQ7C,EANjE,KAStB,IAMIS,EANAuC,EAAa,GACbC,GAAiB,EAMrB,QALkBtC,IAAd6B,GAAyC,OAAdA,IAC9BS,GAAiB,GAIdA,EAEH,IADAR,EAAaD,EAAUU,qBAAuB,GACzCzC,EAAI,EAAGA,EAAI+B,EAAUW,QAAU1C,IACnCgC,EAAaD,EAAUY,YAAa3C,GAAIA,EAAI,GAI9C,OAAOuC,GAYRjE,EAAIsE,wBAA0B,SAAUpE,EAAMgE,GAE7C,SAASlB,EAAc1C,GAGtB,GAAIA,EAAK+B,OADa,IACa,CAClC,IACIX,EAAG6C,EADHC,EAAU,EAEd,IAAK9C,EAAI,EAAGA,EAAIpB,EAAK+B,OAAQX,IAC5B6C,EAAYjE,EAAKoB,GACjBuC,GAAcM,IACdC,EAPoB,KAQ0B,KAAbD,IAChCN,GAAc,KACdO,EAAU,QAIZP,GAAc3D,EAIhB,SAASD,EAAkBC,GAE1B0C,EAAc1C,EAAO,MAStB,SAASmE,EAASC,EAAezD,GAEhC,IAAI0D,EAAOD,EAAcE,MAAM3D,GAC3B4D,EAAS,GACM,GAAfF,EAAKG,QAA8B,GAAfH,EAAKI,OACxB7E,EAAKiB,WAAYwD,EAAKG,OAAOE,iBAAoB9E,EAAKiB,WAAYwD,EAAKI,OAAOC,iBAC7E9E,EAAKiB,WAAYwD,EAAKG,OAAOG,iBAAoB/E,EAAKiB,WAAYwD,EAAKI,OAAOE,kBACjFJ,EAAS,GAIZxE,EAAkB,SAAWsE,EAAKO,MAAQ,GAAK,MAAQP,EAAKQ,MAAQ,GAAK,aAAeN,EAAS,OAAS5D,EAAQ,IAGnH,SAASD,EAAY0D,EAAezD,EAAOmE,GAE1C,IAAIC,GAAiB,EACjBnB,IACHmB,EAAgBnF,EAAKiB,WAAYF,GAAOqE,mBAAsB,IACzCF,GACpB/E,EAAkB,yBAA2BgF,EAAgB,KAI/D,IAAIE,EAAOb,EAAcc,MAAMvE,GAC3B4D,EAAS,EACT3E,EAAKiB,WAAYF,GAAO+D,kBAC3BH,EAAS,GAEV7B,EAAc,QAAUuC,EAAKE,OAAOpD,OAAS,QAAUwC,EAAS,MAChE,IACInD,EAAGgE,EADHC,EAAY,GAEhB,IAAKjE,EAAI,EAAGA,EAAI6D,EAAKE,OAAOpD,OAAQX,KACnCgE,EAAQH,EAAKE,OAAO/D,IACTkE,QAGVD,KAAgBD,EAAMzE,MAAQ,GAF9B0E,GAAcD,EAAMzE,MAAQ,EAIzBS,EAAI6D,EAAKE,OAAOpD,OAAS,IAC5BsD,GAAa,MAOf,OAJA3C,EAAc2C,GACd3C,EAAc,OAAS/B,EAAQ,IAC/BZ,EAAkB,IAEXgF,EAGR,IAAIpB,EAAa,GAEjB5D,EAAkB,QAClB,IAEIqB,EA7DgBT,EAEfmC,EAyDDsB,EAAgB,IAAI1E,EAAI6F,cAAe3F,GAG3C,IAAKwB,EAAI,EAAGA,EAAIgD,EAAcoB,MAAMzD,OAAQX,IA9DxBT,EA+DRS,OA7DP0B,EACJ/C,EAAkB,SADd+C,EAAYlD,EAAKqB,UAAWN,GAAOQ,UACDZ,EAAI,KAAOuC,EAAUtC,EAAI,KAAOsC,EAAUrC,EAAI,OAASE,EAAQ,IA+DtG,IAAKS,EAAI,EAAGA,EAAIgD,EAAcE,MAAMvC,OAAQX,IAC3C+C,EAASC,EAAehD,GAGzB,IAAI0D,GAAqB,EACzB,IAAK1D,EAAI,EAAGA,EAAIgD,EAAcc,MAAMnD,OAAQX,IAC3C0D,EAAoBpE,EAAY0D,EAAehD,EAAG0D,GAInD,OADA/E,EAAkB,WACX4D,GAYRjE,EAAI+F,gBAAkB,SAAU7F,EAAMuD,GAErC,IAAIQ,EAAa,GAEbC,GAAiB,EAOrB,YANkBtC,IAAd6B,GAAyC,OAAdA,IAC9BQ,GAAcjE,EAAIwD,qBAAsBC,GACxCS,GAAiB,GAGlBD,GAAcjE,EAAIsE,wBAAyBpE,EAAMgE,IAalDlE,EAAIgG,iBAAmB,SAAUvD,EAAOgB,GAEvC,IAOI/B,EAAGxB,EAPH+D,EAAa,GACbC,GAAiB,EAOrB,SANkBtC,IAAd6B,GAAyC,OAAdA,IAC9BQ,GAAcjE,EAAIwD,qBAAsBC,GACxCS,GAAiB,GAIbxC,EAAI,EAAGA,EAAIe,EAAMC,YAAchB,IACnCxB,EAAOuC,EAAME,QAASjB,GACtBuC,GAAcjE,EAAIsE,wBAAyBpE,EAAMgE,GAGlD,OAAOD,GAGDjE","file":"../../modeler/exporter.js","sourcesContent":["define([\"../core/jsm\"],function(JSM){\n\t/**\n\t* Function: ExportBodyContentToStl\n\t* Description: Exports a body content to stl.\n\t* Parameters:\n\t*\tbody {Body} the body\n\t*\tname {string} name the body\n\t*\thasConvexPolygons {boolean} the body has only convex polygons\n\t* Returns:\n\t*\t{string} the result\n\t*/\n\tJSM.ExportBodyContentToStl = function (body, name, hasConvexPolygons)\n\t{\n\t\tfunction AddLineToContent (line)\n\t\t{\n\t\t\tstlContent += line + '\\n';\n\t\t}\n\n\t\tfunction AddTriangleToContent (normal, vertex1, vertex2, vertex3)\n\t\t{\n\t\t\tAddLineToContent ('\\tfacet normal ' + normal.x + ' ' + normal.y + ' ' + normal.z);\n\t\t\tAddLineToContent ('\\t\\touter loop');\n\t\t\tAddLineToContent ('\\t\\t\\tvertex ' + vertex1.x + ' ' + vertex1.y + ' ' + vertex1.z);\n\t\t\tAddLineToContent ('\\t\\t\\tvertex ' + vertex2.x + ' ' + vertex2.y + ' ' + vertex2.z);\n\t\t\tAddLineToContent ('\\t\\t\\tvertex ' + vertex3.x + ' ' + vertex3.y + ' ' + vertex3.z);\n\t\t\tAddLineToContent ('\\t\\tendloop');\n\t\t\tAddLineToContent ('\\tendfacet');\n\t\t}\n\t\t\n\t\tfunction AddPolygon (index)\n\t\t{\n\t\t\tvar polygon = body.GetPolygon (index);\n\t\t\tvar count = polygon.VertexIndexCount ();\n\t\t\tif (count < 3) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tvar vertex1, vertex2, vertex3;\n\t\t\tvar normal = null;\n\t\t\tif (count === 3) {\n\t\t\t\tnormal = JSM.CalculateBodyPolygonNormal (body, index);\n\t\t\t\tvertex1 = body.GetVertex (polygon.GetVertexIndex (0)).position;\n\t\t\t\tvertex2 = body.GetVertex (polygon.GetVertexIndex (1)).position;\n\t\t\t\tvertex3 = body.GetVertex (polygon.GetVertexIndex (2)).position;\n\t\t\t\tAddTriangleToContent (normal, vertex1, vertex2, vertex3);\n\t\t\t} else {\n\t\t\t\tvar useTriangulation = true;\n\t\t\t\tif (hasConvexPolygons !== undefined && hasConvexPolygons) {\n\t\t\t\t\tuseTriangulation = false;\n\t\t\t\t}\n\t\t\t\n\t\t\t\tvar i;\n\t\t\t\tnormal = JSM.CalculateBodyPolygonNormal (body, index);\n\t\t\t\tif (useTriangulation) {\n\t\t\t\t\tvar polygon3D = new JSM.Polygon ();\n\t\t\t\t\t\n\t\t\t\t\tvar vertex;\n\t\t\t\t\tfor (i = 0; i < count; i++) {\n\t\t\t\t\t\tvertex = body.GetVertex (polygon.vertices[i]);\n\t\t\t\t\t\tpolygon3D.AddVertex (vertex.position.x, vertex.position.y, vertex.position.z);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tvar triangles = JSM.TriangulatePolygon (polygon3D, normal);\n\t\t\t\t\tif (triangles !== null) {\n\t\t\t\t\t\tvar triangle;\n\t\t\t\t\t\tfor (i = 0; i < triangles.length; i++) {\n\t\t\t\t\t\t\ttriangle = triangles[i];\n\t\t\t\t\t\t\tvertex1 = body.GetVertex (polygon.GetVertexIndex (triangle[0])).position;\n\t\t\t\t\t\t\tvertex2 = body.GetVertex (polygon.GetVertexIndex (triangle[1])).position;\n\t\t\t\t\t\t\tvertex3 = body.GetVertex (polygon.GetVertexIndex (triangle[2])).position;\n\t\t\t\t\t\t\tAddTriangleToContent (normal, vertex1, vertex2, vertex3);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (i = 0; i < count - 2; i++) {\n\t\t\t\t\t\tvertex1 = body.GetVertex (polygon.GetVertexIndex (0)).position;\n\t\t\t\t\t\tvertex2 = body.GetVertex (polygon.GetVertexIndex ((i + 1) % count)).position;\n\t\t\t\t\t\tvertex3 = body.GetVertex (polygon.GetVertexIndex ((i + 2) % count)).position;\n\t\t\t\t\t\tAddTriangleToContent (normal, vertex1, vertex2, vertex3);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar stlContent = '';\n\n\t\tvar i;\n\t\tfor (i = 0; i < body.PolygonCount (); i++) {\n\t\t\tAddPolygon (i);\n\t\t}\n\n\t\treturn stlContent;\n\t};\n\n\t/**\n\t* Function: ExportBodyToStl\n\t* Description: Exports a body to stl.\n\t* Parameters:\n\t*\tbody {Body} the body\n\t*\tname {string} name the body\n\t*\thasConvexPolygons {boolean} the body has only convex polygons\n\t* Returns:\n\t*\t{string} the result\n\t*/\n\tJSM.ExportBodyToStl = function (body, name, hasConvexPolygons)\n\t{\n\t\tfunction AddLineToContent (line)\n\t\t{\n\t\t\tstlContent += line + '\\n';\n\t\t}\n\n\t\tvar stlContent = '';\n\t\t\n\t\tAddLineToContent ('solid ' + name);\n\t\tstlContent += JSM.ExportBodyContentToStl (body, name, hasConvexPolygons);\n\t\tAddLineToContent ('endsolid ' + name);\n\t\t\n\t\treturn stlContent;\n\t};\n\n\t/**\n\t* Function: ExportModelToStl\n\t* Description: Exports a model to stl.\n\t* Parameters:\n\t*\tmodel {Model} the model\n\t*\tname {string} name the model\n\t*\thasConvexPolygons {boolean} the model has only convex polygons\n\t* Returns:\n\t*\t{string} the result\n\t*/\n\tJSM.ExportModelToStl = function (model, name, hasConvexPolygons)\n\t{\n\t\tfunction AddLineToContent (line)\n\t\t{\n\t\t\tstlContent += line + '\\n';\n\t\t}\n\n\t\tvar stlContent = '';\n\n\t\tAddLineToContent ('solid ' + name);\n\t\tvar i, body;\n\t\tfor (i = 0; i < model.BodyCount (); i++) {\n\t\t\tbody = model.GetBody (i);\n\t\t\tstlContent += JSM.ExportBodyContentToStl (body, name + (i + 1).toString (), hasConvexPolygons);\n\t\t}\n\t\tAddLineToContent ('endsolid ' + name);\n\n\t\treturn stlContent;\n\t};\n\n\t/**\n\t* Function: ExportBodyContentToObj\n\t* Description: Exports a body content to obj.\n\t* Parameters:\n\t*\tbody {Body} the body\n\t*\tvertexOffset {integer} vertex index offset\n\t*\tnormalOffset {integer} normal index offset\n\t* Returns:\n\t*\t{string} the result\n\t*/\n\tJSM.ExportBodyContentToObj = function (body, vertexOffset, normalOffset)\n\t{\n\t\tfunction AddToContent (line)\n\t\t{\n\t\t\tobjContent += line;\n\t\t}\n\n\t\tfunction AddLineToContent (line)\n\t\t{\n\t\t\tobjContent += line + '\\n';\n\t\t}\n\n\t\tfunction AddVertex (index)\n\t\t{\n\t\t\tvar vertCoord = body.GetVertex (index).position;\n\t\t\tAddLineToContent ('v ' + vertCoord.x + ' ' + vertCoord.y + ' ' + vertCoord.z);\n\t\t}\n\n\t\tfunction AddNormal (index)\n\t\t{\n\t\t\tvar normalVector = JSM.CalculateBodyPolygonNormal (body, index);\n\t\t\tAddLineToContent ('vn ' + normalVector.x + ' ' + normalVector.y + ' ' + normalVector.z);\n\t\t}\n\n\t\tfunction AddPolygon (index)\n\t\t{\n\t\t\tvar polygon = body.GetPolygon (index);\n\t\t\n\t\t\tAddToContent ('f ');\n\t\t\n\t\t\tvar i;\n\t\t\tfor (i = 0; i < polygon.VertexIndexCount (); i++) {\n\t\t\t\tAddToContent ((vertexOffset + polygon.GetVertexIndex (i) + 1) + '//' + (normalOffset + index + 1) + ' ');\n\t\t\t}\n\t\t\t\n\t\t\tAddLineToContent ('');\n\t\t}\n\n\t\tvar objContent = '';\n\t\t\n\t\tvar i;\n\t\tfor (i = 0; i < body.VertexCount (); i++) {\n\t\t\tAddVertex (i);\n\t\t}\n\t\t\n\t\tfor (i = 0; i < body.PolygonCount (); i++) {\n\t\t\tAddNormal (i);\n\t\t}\n\n\t\tfor (i = 0; i < body.PolygonCount (); i++) {\n\t\t\tAddPolygon (i);\n\t\t}\n\t\t\n\t\treturn objContent;\n\t};\n\n\t/**\n\t* Function: ExportBodyToObj\n\t* Description: Exports a body to obj.\n\t* Parameters:\n\t*\tbody {Body} the body\n\t* Returns:\n\t*\t{string} the result\n\t*/\n\tJSM.ExportBodyToObj = function (body)\n\t{\n\t\treturn JSM.ExportBodyContentToObj (body, 0, 0);\n\t};\n\n\t/**\n\t* Function: ExportModelToObj\n\t* Description: Exports a model to obj.\n\t* Parameters:\n\t*\tmodel {Model} the model\n\t* Returns:\n\t*\t{string} the result\n\t*/\n\tJSM.ExportModelToObj = function (model)\n\t{\n\t\tvar objContent = '';\n\t\t\n\t\tvar vertexOffset = 0;\n\t\tvar normalOffset = 0;\n\t\t\n\t\tvar i, body;\n\t\tfor (i = 0; i < model.BodyCount (); i++) {\n\t\t\tbody = model.GetBody (i);\n\t\t\tobjContent += JSM.ExportBodyContentToObj (body, vertexOffset, normalOffset);\n\t\t\tvertexOffset += body.VertexCount ();\n\t\t\tnormalOffset += body.PolygonCount ();\n\t\t}\n\n\t\treturn objContent;\n\t};\n\n\t/**\n\t* Function: ExportMaterialsToGdl\n\t* Description: Exports a material container to gdl.\n\t* Parameters:\n\t*\tmaterials {MaterialSet} the material container\n\t* Returns:\n\t*\t{string} the result\n\t*/\n\tJSM.ExportMaterialsToGdl = function (materials)\n\t{\n\t\tfunction HexColorToRGBColorString (hexColor)\n\t\t{\n\t\t\tvar rgb = JSM.HexColorToRGBComponents (hexColor);\n\t\t\tvar result = rgb[0] / 255.0 + ',' + rgb[1] / 255.0 + ',' + rgb[2] / 255.0;\n\t\t\treturn result;\n\t\t}\n\n\t\tfunction AddLineToContent (line)\n\t\t{\n\t\t\tgdlContent += line + '\\n';\n\t\t}\n\n\t\tfunction AddMaterial (material, index)\n\t\t{\n\t\t\tvar rgbString = HexColorToRGBColorString (material.diffuse);\n\t\t\tAddLineToContent ('define material \"material' + index + '\" 2, ' + rgbString + ' ! ' + index);\n\t\t}\n\t\t\n\t\tvar gdlContent = '';\n\t\tvar writeMaterials = false;\n\t\tif (materials !== undefined && materials !== null) {\n\t\t\twriteMaterials = true;\n\t\t}\n\n\t\tvar i;\n\t\tif (writeMaterials) {\n\t\t\tAddMaterial (materials.GetDefaultMaterial (), 1);\n\t\t\tfor (i = 0; i < materials.Count (); i++) {\n\t\t\t\tAddMaterial (materials.GetMaterial (i), i + 2);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn gdlContent;\n\t};\n\n\t/**\n\t* Function: ExportBodyGeometryToGdl\n\t* Description: Exports a body geometry to gdl.\n\t* Parameters:\n\t*\tbody {Body} the body\n\t*\twriteMaterials {boolean} write materials\n\t* Returns:\n\t*\t{string} the result\n\t*/\n\tJSM.ExportBodyGeometryToGdl = function (body, writeMaterials)\n\t{\n\t\tfunction AddToContent (line)\n\t\t{\n\t\t\tvar lineLengthLimit = 200;\n\t\t\tif (line.length > lineLengthLimit) {\n\t\t\t\tvar current = 0;\n\t\t\t\tvar i, character;\n\t\t\t\tfor (i = 0; i < line.length; i++) {\n\t\t\t\t\tcharacter = line[i];\n\t\t\t\t\tgdlContent += character;\n\t\t\t\t\tcurrent++;\n\t\t\t\t\tif (current > lineLengthLimit && character == ',') {\n\t\t\t\t\t\tgdlContent += '\\n';\n\t\t\t\t\t\tcurrent = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tgdlContent += line;\n\t\t\t}\n\t\t}\n\n\t\tfunction AddLineToContent (line)\n\t\t{\n\t\t\tAddToContent (line + '\\n');\n\t\t}\n\n\t\tfunction AddVertex (index)\n\t\t{\n\t\t\tvar vertCoord = body.GetVertex (index).position;\n\t\t\tAddLineToContent ('vert ' + vertCoord.x + ', ' + vertCoord.y + ', ' + vertCoord.z + ' ! ' + (index + 1));\n\t\t}\n\n\t\tfunction AddEdge (adjacencyInfo, index)\n\t\t{\n\t\t\tvar edge = adjacencyInfo.edges[index];\n\t\t\tvar status = 0;\n\t\t\tif (edge.pgon1 != -1 && edge.pgon2 != -1) {\n\t\t\t\tif (body.GetPolygon (edge.pgon1).HasCurveGroup () && body.GetPolygon (edge.pgon2).HasCurveGroup ()) {\n\t\t\t\t\tif (body.GetPolygon (edge.pgon1).GetCurveGroup () == body.GetPolygon (edge.pgon2).GetCurveGroup ()) {\n\t\t\t\t\t\tstatus = 2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tAddLineToContent ('edge ' + (edge.vert1 + 1) + ', ' + (edge.vert2 + 1) + ', -1, -1, ' + status + ' ! ' + (index + 1));\n\t\t}\n\n\t\tfunction AddPolygon (adjacencyInfo, index, lastMaterialIndex)\n\t\t{\n\t\t\tvar materialIndex = -1;\n\t\t\tif (writeMaterials) {\n\t\t\t\tmaterialIndex = body.GetPolygon (index).GetMaterialIndex () + 2;\n\t\t\t\tif (materialIndex != lastMaterialIndex) {\n\t\t\t\t\tAddLineToContent ('set material \"material' + materialIndex + '\"');\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t\tvar pgon = adjacencyInfo.pgons[index];\n\t\t\tvar status = 0;\n\t\t\tif (body.GetPolygon (index).HasCurveGroup ()) {\n\t\t\t\tstatus = 2;\n\t\t\t}\n\t\t\tAddToContent ('pgon ' + pgon.pedges.length + ', 0, ' + status + ', ');\n\t\t\tvar pedgeList = '';\n\t\t\tvar i, pedge;\n\t\t\tfor (i = 0; i < pgon.pedges.length; i++) {\n\t\t\t\tpedge = pgon.pedges[i];\n\t\t\t\tif (!pedge.reverse) {\n\t\t\t\t\tpedgeList += (pedge.index + 1);\n\t\t\t\t} else {\n\t\t\t\t\tpedgeList += (-(pedge.index + 1));\n\t\t\t\t}\n\t\t\t\tif (i < pgon.pedges.length - 1) {\n\t\t\t\t\tpedgeList += ', ';\n\t\t\t\t}\n\t\t\t}\n\t\t\tAddToContent (pedgeList);\n\t\t\tAddToContent (' ! ' + (index + 1));\n\t\t\tAddLineToContent ('');\n\t\t\t\n\t\t\treturn materialIndex;\n\t\t}\n\n\t\tvar gdlContent = '';\n\n\t\tAddLineToContent ('base');\n\t\tvar adjacencyInfo = new JSM.AdjacencyInfo (body);\n\t\t\n\t\tvar i;\n\t\tfor (i = 0; i < adjacencyInfo.verts.length; i++) {\n\t\t\tAddVertex (i);\n\t\t}\n\n\t\tfor (i = 0; i < adjacencyInfo.edges.length; i++) {\n\t\t\tAddEdge (adjacencyInfo, i);\n\t\t}\n\t\t\n\t\tvar lastMaterialIndex = -1;\n\t\tfor (i = 0; i < adjacencyInfo.pgons.length; i++) {\n\t\t\tlastMaterialIndex = AddPolygon (adjacencyInfo, i, lastMaterialIndex);\n\t\t}\n\n\t\tAddLineToContent ('body -1');\n\t\treturn gdlContent;\n\t};\n\n\t/**\n\t* Function: ExportBodyToGdl\n\t* Description: Exports a body to gdl.\n\t* Parameters:\n\t*\tbody {Body} the body\n\t*\tmaterials {MaterialSet} the material container\n\t* Returns:\n\t*\t{string} the result\n\t*/\n\tJSM.ExportBodyToGdl = function (body, materials)\n\t{\n\t\tvar gdlContent = '';\n\n\t\tvar writeMaterials = false;\n\t\tif (materials !== undefined && materials !== null) {\n\t\t\tgdlContent += JSM.ExportMaterialsToGdl (materials);\n\t\t\twriteMaterials = true;\n\t\t}\n\n\t\tgdlContent += JSM.ExportBodyGeometryToGdl (body, writeMaterials);\n\t\treturn gdlContent;\n\t};\n\n\t/**\n\t* Function: ExportModelToGdl\n\t* Description: Exports a model to gdl.\n\t* Parameters:\n\t*\tmodel {Model} the model\n\t*\tmaterials {MaterialSet} the material container\n\t* Returns:\n\t*\t{string} the result\n\t*/\n\tJSM.ExportModelToGdl = function (model, materials)\n\t{\n\t\tvar gdlContent = '';\n\t\tvar writeMaterials = false;\n\t\tif (materials !== undefined && materials !== null) {\n\t\t\tgdlContent += JSM.ExportMaterialsToGdl (materials);\n\t\t\twriteMaterials = true;\n\t\t}\n\t\t\n\t\tvar i, body;\n\t\tfor (i = 0; i < model.BodyCount (); i++) {\n\t\t\tbody = model.GetBody (i);\n\t\t\tgdlContent += JSM.ExportBodyGeometryToGdl (body, writeMaterials);\n\t\t}\n\n\t\treturn gdlContent;\n\t};\n\n\treturn JSM;\n});\n"]}