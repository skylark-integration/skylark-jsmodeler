{"version":3,"sources":["modeler/body.js"],"names":["define","JSM","BodyVertex","position","this","prototype","GetPosition","SetPosition","Clone","BodyPoint","index","vertex","material","GetVertexIndex","SetVertexIndex","HasMaterialIndex","GetMaterialIndex","SetMaterialIndex","InheritAttributes","source","result","BodyLine","beg","end","GetBegVertexIndex","SetBegVertexIndex","GetEndVertexIndex","SetEndVertexIndex","BodyPolygon","vertices","curved","AddVertexIndex","push","InsertVertexIndex","vertexIndex","polygonIndex","splice","vertIndex","GetVertexIndices","SetVertexIndices","VertexIndexCount","length","HasCurveGroup","GetCurveGroup","SetCurveGroup","group","ReverseVertexIndices","reverse","i","TextureProjectionType","Planar","Cubic","Cylindrical","BodyTextureProjection","type","coords","SetCubic","Coord","GetType","GetCoords","SetType","SetCoords","SetPlanar","origo","xDirection","yDirection","CoordSystem","zDirection","SetCylindrical","radius","SetLength","VectorCross","Transform","transformation","ToAbsoluteCoords","Apply","e1","e2","e3","ToDirectionVectors","Body","Clear","AddVertex","AddPoint","point","points","AddLine","line","lines","AddPolygon","polygon","polygons","GetVertex","GetVertexPosition","SetVertexPosition","GetPoint","GetLine","GetPolygon","SetPointsMaterialIndex","SetLinesMaterialIndex","SetPolygonsMaterialIndex","SetPolygonsCurveGroup","RemoveVertex","j","bodyVertIndex","pointsToDelete","linesToDelete","polygonsToDelete","RemovePoint","RemoveLine","RemovePolygon","VertexCount","PointCount","LineCount","PolygonCount","GetTextureProjection","projection","SetTextureProjection","SetPlanarTextureProjection","SetCubicTextureProjection","SetCylindricalTextureProjection","GetBoundingBox","coord","min","Inf","max","x","Minimum","y","z","Maximum","Box","GetCenter","GetBoundingSphere","current","center","DistanceTo","IsGreater","Sphere","OffsetToOrigo","MultiplyScalar","CoordAdd","Merge","body","newPoint","newLine","newPolygon","oldVertexCount"],"mappings":"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","file":"../../modeler/body.js","sourcesContent":["define([\"../core/jsm\"],function(JSM){\n\n\t/**\n\t* Class: BodyVertex\n\t* Description:\n\t*\tRepresents a vertex of a 3D body. The vertex contains\n\t*\tonly its position as a 3D coordinate.\n\t* Parameters:\n\t*\tposition {Coord} the position\n\t*/\n\tJSM.BodyVertex = function (position)\n\t{\n\t\tthis.position = position;\n\t};\n\n\t/**\n\t* Function: BodyVertex.GetPosition\n\t* Description: Returns the position of the vertex.\n\t* Returns:\n\t*\t{Coord} the result\n\t*/\n\tJSM.BodyVertex.prototype.GetPosition = function ()\n\t{\n\t\treturn this.position;\n\t};\n\n\t/**\n\t* Function: BodyVertex.SetPosition\n\t* Description: Sets the position of the vertex.\n\t* Parameters:\n\t*\tposition {Coord} the position\n\t*/\n\tJSM.BodyVertex.prototype.SetPosition = function (position)\n\t{\n\t\tthis.position = position;\n\t};\n\n\t/**\n\t* Function: BodyVertex.Clone\n\t* Description: Clones the vertex.\n\t* Returns:\n\t*\t{BodyVertex} the cloned instance\n\t*/\n\tJSM.BodyVertex.prototype.Clone = function ()\n\t{\n\t\treturn new JSM.BodyVertex (this.position.Clone ());\n\t};\n\n\t/**\n\t* Class: BodyPoint\n\t* Description:\n\t*\tRepresents a point in a 3D body. The point contains the vertex index stored in its 3D body,\n\t*\tand a material index of a material defined outside of the body.\n\t* Parameters:\n\t*\tindex {integer} the vertex index stored in the body\n\t*/\n\tJSM.BodyPoint = function (index)\n\t{\n\t\tthis.vertex = index;\n\t\tthis.material = -1;\n\t};\n\n\t/**\n\t* Function: BodyPoint.GetVertexIndex\n\t* Description: Returns the body vertex index of the point.\n\t* Returns:\n\t*\t{integer} the stored vertex index\n\t*/\n\tJSM.BodyPoint.prototype.GetVertexIndex = function ()\n\t{\n\t\treturn this.vertex;\n\t};\n\n\t/**\n\t* Function: BodyPoint.SetVertexIndex\n\t* Description: Sets the vertex index of the point.\n\t* Parameters:\n\t*\tindex {integer} the vertex index\n\t*/\n\tJSM.BodyPoint.prototype.SetVertexIndex = function (index)\n\t{\n\t\tthis.vertex = index;\n\t};\n\n\t/**\n\t* Function: BodyPoint.HasMaterialIndex\n\t* Description: Returns if the point has a material index.\n\t* Returns:\n\t*\t{boolean} the result\n\t*/\n\tJSM.BodyPoint.prototype.HasMaterialIndex = function ()\n\t{\n\t\treturn this.material !== -1;\n\t};\n\n\t/**\n\t* Function: BodyPoint.GetMaterialIndex\n\t* Description: Returns the point material index.\n\t* Returns:\n\t*\t{integer} the result\n\t*/\n\tJSM.BodyPoint.prototype.GetMaterialIndex = function ()\n\t{\n\t\treturn this.material;\n\t};\n\n\t/**\n\t* Function: BodyPoint.SetMaterialIndex\n\t* Description: Sets the point material index.\n\t* Parameters:\n\t*\tmaterial {integer} the material index\n\t*/\n\tJSM.BodyPoint.prototype.SetMaterialIndex = function (material)\n\t{\n\t\tthis.material = material;\n\t};\n\n\t/**\n\t* Function: BodyPoint.InheritAttributes\n\t* Description: Inherits attributes (material) from an another point.\n\t* Parameters:\n\t*\tsource {BodyPoint} the source point\n\t*/\n\tJSM.BodyPoint.prototype.InheritAttributes = function (source)\n\t{\n\t\tthis.material = source.material;\n\t};\n\n\t/**\n\t* Function: BodyPoint.Clone\n\t* Description: Clones the point.\n\t* Returns:\n\t*\t{BodyPoint} the cloned instance\n\t*/\n\tJSM.BodyPoint.prototype.Clone = function ()\n\t{\n\t\tvar result = new JSM.BodyPoint (this.vertex);\n\t\tresult.material = this.material;\n\t\treturn result;\n\t};\n\n\t/**\n\t* Class: BodyLine\n\t* Description:\n\t*\tRepresents a line in a 3D body. The line contains begin and end indices of vertices\n\t*\tstored in its 3D body, and a material index of a material defined outside of the body.\n\t* Parameters:\n\t*\tbeg {integer} begin vertex index stored in the body\n\t*\tend {integer} end vertex index stored in the body\n\t*/\n\tJSM.BodyLine = function (beg, end)\t{\n\t\tthis.beg = beg;\n\t\tthis.end = end;\n\t\tthis.material = -1;\n\t};\n\n\t/**\n\t* Function: BodyLine.GetBegVertexIndex\n\t* Description: Returns the body vertex index at the beginning of the line.\n\t* Returns:\n\t*\t{integer} the stored vertex index\n\t*/\n\tJSM.BodyLine.prototype.GetBegVertexIndex = function ()\t{\n\t\treturn this.beg;\n\t};\n\n\t/**\n\t* Function: BodyLine.SetBegVertexIndex\n\t* Description: Sets the begin vertex index of the line.\n\t* Parameters:\n\t*\tindex {integer} the vertex index\n\t*/\n\tJSM.BodyLine.prototype.SetBegVertexIndex = function (index)\t{\n\t\tthis.beg = index;\n\t};\n\n\t/**\n\t* Function: BodyLine.GetEndVertexIndex\n\t* Description: Returns the body vertex index at the end of the line.\n\t* Returns:\n\t*\t{integer} the stored vertex index\n\t*/\n\tJSM.BodyLine.prototype.GetEndVertexIndex = function ()\t{\n\t\treturn this.end;\n\t};\n\n\t/**\n\t* Function: BodyLine.SetEndVertexIndex\n\t* Description: Sets the end vertex index of the line.\n\t* Parameters:\n\t*\tindex {integer} the vertex index\n\t*/\n\tJSM.BodyLine.prototype.SetEndVertexIndex = function (index)\t{\n\t\tthis.end = index;\n\t};\n\n\t/**\n\t* Function: BodyLine.HasMaterialIndex\n\t* Description: Returns if the line has a material index.\n\t* Returns:\n\t*\t{boolean} the result\n\t*/\n\tJSM.BodyLine.prototype.HasMaterialIndex = function (){\n\t\treturn this.material !== -1;\n\t};\n\n\t/**\n\t* Function: BodyLine.GetMaterialIndex\n\t* Description: Returns the line material index.\n\t* Returns:\n\t*\t{integer} the result\n\t*/\n\tJSM.BodyLine.prototype.GetMaterialIndex = function (){\n\t\treturn this.material;\n\t};\n\n\t/**\n\t* Function: BodyLine.SetMaterialIndex\n\t* Description: Sets the line material index.\n\t* Parameters:\n\t*\tmaterial {integer} the material index\n\t*/\n\tJSM.BodyLine.prototype.SetMaterialIndex = function (material){\n\t\tthis.material = material;\n\t};\n\n\t/**\n\t* Function: BodyLine.InheritAttributes\n\t* Description: Inherits attributes (material) from an another line.\n\t* Parameters:\n\t*\tsource {BodyLine} the source line\n\t*/\n\tJSM.BodyLine.prototype.InheritAttributes = function (source)\n\t{\n\t\tthis.material = source.material;\n\t};\n\n\t/**\n\t* Function: BodyLine.Clone\n\t* Description: Clones the line.\n\t* Returns:\n\t*\t{BodyLine} the cloned instance\n\t*/\n\tJSM.BodyLine.prototype.Clone = function ()\n\t{\n\t\tvar result = new JSM.BodyLine (this.beg, this.end);\n\t\tresult.material = this.material;\n\t\treturn result;\n\t};\n\n\t/**\n\t* Class: BodyPolygon\n\t* Description:\n\t*\tRepresents a polygon in a 3D body. The polygon contains indices of vertices stored in its body.\n\t*\tIt also contains a material index of a material defined outside of the body, and a curve\n\t*\tgroup index which defines its normal vector calculation in case of smooth surfaces.\n\t* Parameters:\n\t*\tvertices {integer[*]} array of vertex indices stored in the body\n\t*/\n\tJSM.BodyPolygon = function (vertices)\n\t{\n\t\tthis.vertices = vertices;\n\t\tthis.material = -1;\n\t\tthis.curved = -1;\n\t};\n\n\t/**\n\t* Function: BodyPolygon.AddVertexIndex\n\t* Description: Adds a vertex index to the polygon.\n\t* Parameters:\n\t*\tindex {integer} the vertex index\n\t*/\n\tJSM.BodyPolygon.prototype.AddVertexIndex = function (index)\n\t{\n\t\tthis.vertices.push (index);\n\t};\n\n\t/**\n\t* Function: BodyPolygon.InsertVertexIndex\n\t* Description: Inserts a vertex index to given index in the polygon.\n\t* Parameters:\n\t*\tvertexIndex {integer} the vertex index\n\t*\tpolygonIndex {integer} the index in the polygon\n\t*/\n\tJSM.BodyPolygon.prototype.InsertVertexIndex = function (vertexIndex, polygonIndex)\n\t{\n\t\tthis.vertices.splice (polygonIndex, 0, vertexIndex);\n\t};\n\n\t/**\n\t* Function: BodyPolygon.GetVertexIndex\n\t* Description: Returns the body vertex index at the given polygon vertex index.\n\t* Parameters:\n\t*\tindex {integer} the polygon vertex index\n\t* Returns:\n\t*\t{integer} the stored vertex index\n\t*/\n\tJSM.BodyPolygon.prototype.GetVertexIndex = function (index)\n\t{\n\t\treturn this.vertices[index];\n\t};\n\n\t/**\n\t* Function: BodyPolygon.SetVertexIndex\n\t* Description: Sets the body vertex index at the given polygon vertex index.\n\t* Parameters:\n\t*\tindex {integer} the polygon vertex index\n\t*\tvertIndex {integer} the body vertex index\n\t*/\n\tJSM.BodyPolygon.prototype.SetVertexIndex = function (index, vertIndex)\n\t{\n\t\tthis.vertices[index] = vertIndex;\n\t};\n\n\t/**\n\t* Function: BodyPolygon.GetVertexIndices\n\t* Description: Returns an array of the body vertex indices in the polygon.\n\t* Returns:\n\t*\t{integer[]} the stored vertex indices\n\t*/\n\tJSM.BodyPolygon.prototype.GetVertexIndices = function ()\n\t{\n\t\treturn this.vertices;\n\t};\n\n\t/**\n\t* Function: BodyPolygon.SetVertexIndices\n\t* Description: Sets the vertex indices in the polygon.\n\t* Parameters:\n\t*\tvertices {integer[]} the new vertex indices\n\t*/\n\tJSM.BodyPolygon.prototype.SetVertexIndices = function (vertices)\n\t{\n\t\tthis.vertices = vertices;\n\t};\n\n\t/**\n\t* Function: BodyPolygon.VertexIndexCount\n\t* Description: Returns the vertex count of the polygon.\n\t* Returns:\n\t*\t{integer} the result\n\t*/\n\tJSM.BodyPolygon.prototype.VertexIndexCount = function ()\n\t{\n\t\treturn this.vertices.length;\n\t};\n\n\t/**\n\t* Function: BodyPolygon.HasMaterialIndex\n\t* Description: Returns if the polygon has a material index.\n\t* Returns:\n\t*\t{boolean} the result\n\t*/\n\tJSM.BodyPolygon.prototype.HasMaterialIndex = function ()\n\t{\n\t\treturn this.material !== -1;\n\t};\n\n\t/**\n\t* Function: BodyPolygon.GetMaterialIndex\n\t* Description: Returns the polygons material index.\n\t* Returns:\n\t*\t{integer} the result\n\t*/\n\tJSM.BodyPolygon.prototype.GetMaterialIndex = function ()\n\t{\n\t\treturn this.material;\n\t};\n\n\t/**\n\t* Function: BodyPolygon.SetMaterialIndex\n\t* Description: Sets the polygons material index.\n\t* Parameters:\n\t*\tmaterial {integer} the material index\n\t*/\n\tJSM.BodyPolygon.prototype.SetMaterialIndex = function (material)\n\t{\n\t\tthis.material = material;\n\t};\n\n\t/**\n\t* Function: BodyPolygon.HasCurveGroup\n\t* Description: Returns if the polygon has a curve group index.\n\t* Returns:\n\t*\t{boolean} the result\n\t*/\n\tJSM.BodyPolygon.prototype.HasCurveGroup = function ()\n\t{\n\t\treturn this.curved !== -1;\n\t};\n\n\t/**\n\t* Function: BodyPolygon.GetCurveGroup\n\t* Description: Returns the polygons curve group index.\n\t* Returns:\n\t*\t{integer} the result\n\t*/\n\tJSM.BodyPolygon.prototype.GetCurveGroup = function ()\n\t{\n\t\treturn this.curved;\n\t};\n\n\t/**\n\t* Function: BodyPolygon.SetCurveGroup\n\t* Description: Sets the polygons curve group index.\n\t* Parameters:\n\t*\tgroup {integer} the curve group index\n\t*/\n\tJSM.BodyPolygon.prototype.SetCurveGroup = function (group)\n\t{\n\t\tthis.curved = group;\n\t};\n\n\t/**\n\t* Function: BodyPolygon.ReverseVertexIndices\n\t* Description: Reverses the order of vertex indices in the polygon.\n\t*/\n\tJSM.BodyPolygon.prototype.ReverseVertexIndices = function ()\n\t{\n\t\tthis.vertices.reverse ();\n\t};\n\n\t/**\n\t* Function: BodyPolygon.InheritAttributes\n\t* Description: Inherits attributes (material and curve group index) from an another polygon.\n\t* Parameters:\n\t*\tsource {BodyPolygon} the source polygon\n\t*/\n\tJSM.BodyPolygon.prototype.InheritAttributes = function (source)\n\t{\n\t\tthis.material = source.material;\n\t\tthis.curved = source.curved;\n\t};\n\n\t/**\n\t* Function: BodyPolygon.Clone\n\t* Description: Clones the polygon.\n\t* Returns:\n\t*\t{BodyPolygon} the cloned instance\n\t*/\n\tJSM.BodyPolygon.prototype.Clone = function ()\n\t{\n\t\tvar result = new JSM.BodyPolygon ([]);\n\t\tvar i;\n\t\tfor (i = 0; i < this.vertices.length; i++) {\n\t\t\tresult.vertices.push (this.vertices[i]);\n\t\t}\n\t\tresult.material = this.material;\n\t\tresult.curved = this.curved;\n\t\treturn result;\n\t};\n\n\t/**\n\t* Enum: TextureProjectionType\n\t* Description: Texture projection type.\n\t* Values:\n\t*\t{Planar} planar projection\n\t*\t{Cubic} cubic projection\n\t*\t{Cylindrical} cylindrical projection\n\t*/\n\tJSM.TextureProjectionType = {\n\t\tPlanar : 0,\n\t\tCubic : 1,\n\t\tCylindrical : 2\n\t};\n\n\t/**\n\t* Class: BodyTextureProjection\n\t* Description:\n\t*\tRepresents the texture projection of the body. It contains a projection type,\n\t*\tand a coordinate system for projection.\n\t*/\n\tJSM.BodyTextureProjection = function ()\n\t{\n\t\tthis.type = null;\n\t\tthis.coords = null;\n\t\tthis.SetCubic (new JSM.Coord (0.0, 0.0, 0.0), new JSM.Coord (1.0, 0.0, 0.0), new JSM.Coord (0.0, 1.0, 0.0), new JSM.Coord (0.0, 0.0, 1.0));\n\t};\n\n\t/**\n\t* Function: BodyTextureProjection.GetType\n\t* Description: Returns the texture projection type.\n\t* Returns:\n\t*\t{TextureProjectionType} the result\n\t*/\n\tJSM.BodyTextureProjection.prototype.GetType = function ()\n\t{\n\t\treturn this.type;\n\t};\n\n\t/**\n\t* Function: BodyTextureProjection.GetCoords\n\t* Description: Returns the texture projection coordinate system.\n\t* Returns:\n\t*\t{CoordSystem} the result\n\t*/\n\tJSM.BodyTextureProjection.prototype.GetCoords = function ()\n\t{\n\t\treturn this.coords;\n\t};\n\n\t/**\n\t* Function: BodyTextureProjection.SetType\n\t* Description: Sets the texture projection type.\n\t* Parameters:\n\t*\ttype {TextureProjectionType} the type\n\t*/\n\tJSM.BodyTextureProjection.prototype.SetType = function (type)\n\t{\n\t\tthis.type = type;\n\t};\n\n\t/**\n\t* Function: BodyTextureProjection.SetCoords\n\t* Description: Sets the texture projection coordinates.\n\t* Parameters:\n\t*\tcoords {CoordSystem} the coordinates\n\t*/\n\tJSM.BodyTextureProjection.prototype.SetCoords = function (coords)\n\t{\n\t\tthis.coords = coords;\n\t};\n\n\t/**\n\t* Function: BodyTextureProjection.SetPlanar\n\t* Description: Sets the texture projection to planar with the given parameters.\n\t* Parameters:\n\t*\torigo {Coord} origo of the projection\n\t*\txDirection {Vector} x direction of the projection plane\n\t*\tyDirection {Vector} y direction of the projection plane\n\t*/\n\tJSM.BodyTextureProjection.prototype.SetPlanar = function (origo, xDirection, yDirection)\n\t{\n\t\tthis.type = JSM.TextureProjectionType.Planar;\n\t\tthis.coords = new JSM.CoordSystem (\n\t\t\torigo,\n\t\t\txDirection,\n\t\t\tyDirection,\n\t\t\tnew JSM.Coord (0.0, 0.0, 0.0)\n\t\t);\n\t};\n\n\t/**\n\t* Function: BodyTextureProjection.SetCubic\n\t* Description: Sets the texture projection to cubic with the given parameters.\n\t* Parameters:\n\t*\torigo {Coord} origo of the projection\n\t*\txDirection {Vector} x direction (edge of the cube) of the projection\n\t*\tyDirection {Vector} y direction (edge of the cube) of the projection\n\t*\tzDirection {Vector} z direction (edge of the cube) of the projection\n\t*/\n\tJSM.BodyTextureProjection.prototype.SetCubic = function (origo, xDirection, yDirection, zDirection)\n\t{\n\t\tthis.type = JSM.TextureProjectionType.Cubic;\n\t\tthis.coords = new JSM.CoordSystem (\n\t\t\torigo,\n\t\t\txDirection,\n\t\t\tyDirection,\n\t\t\tzDirection\n\t\t);\n\t};\n\n\t/**\n\t* Function: BodyTextureProjection.SetCylindrical\n\t* Description: Sets the texture projection to cylindrical with the given parameters.\n\t* Parameters:\n\t*\torigo {Coord} origo of the projection\n\t*\tradius {number} radius of the cylinder\n\t*\txDirection {Vector} x direction (start point along perimeter) of the projection\n\t*\tzDirection {Vector} z direction (normal vector) of the projection\n\t*/\n\tJSM.BodyTextureProjection.prototype.SetCylindrical = function (origo, radius, xDirection, zDirection)\n\t{\n\t\tthis.type = JSM.TextureProjectionType.Cylindrical;\n\t\tthis.coords = new JSM.CoordSystem (\n\t\t\torigo,\n\t\t\txDirection.Clone ().SetLength (radius),\n\t\t\tJSM.VectorCross (zDirection, xDirection).SetLength (radius),\n\t\t\tzDirection\n\t\t);\n\t};\n\n\t/**\n\t* Function: BodyTextureProjection.Transform\n\t* Description: Transforms the texture projection coordinate system.\n\t* Parameters:\n\t*\ttransformation {Transformation} the transformation\n\t*/\n\tJSM.BodyTextureProjection.prototype.Transform = function (transformation)\n\t{\n\t\tthis.coords.ToAbsoluteCoords ();\n\t\tthis.coords.origo = transformation.Apply (this.coords.origo);\n\t\tthis.coords.e1 = transformation.Apply (this.coords.e1);\n\t\tthis.coords.e2 = transformation.Apply (this.coords.e2);\n\t\tthis.coords.e3 = transformation.Apply (this.coords.e3);\n\t\tthis.coords.ToDirectionVectors ();\n\t};\n\n\t/**\n\t* Function: BodyTextureProjection.Clone\n\t* Description: Clones the texture projection.\n\t* Returns:\n\t*\t{BodyTextureProjection} the cloned instance\n\t*/\n\tJSM.BodyTextureProjection.prototype.Clone = function ()\n\t{\n\t\tvar result = new JSM.BodyTextureProjection ();\n\t\tresult.SetType (this.type);\n\t\tresult.SetCoords (this.coords.Clone ());\n\t\treturn result;\n\t};\n\n\t/**\n\t* Class: Body\n\t* Description:\n\t*\tRepresents a 3D body. The body contains vertices, polygons,\n\t*\tand a texture coordinate system.\n\t*/\n\tJSM.Body = function ()\n\t{\n\t\tthis.Clear ();\n\t};\n\n\t/**\n\t* Function: Body.AddVertex\n\t* Description: Adds a vertex to the body.\n\t* Parameters:\n\t*\tvertex {BodyVertex} the vertex\n\t* Returns:\n\t*\t{integer} the index of the newly added vertex\n\t*/\n\tJSM.Body.prototype.AddVertex = function (vertex)\n\t{\n\t\tthis.vertices.push (vertex);\n\t\treturn this.vertices.length - 1;\n\t};\n\n\t/**\n\t* Function: Body.AddPoint\n\t* Description: Adds a point to the body.\n\t* Parameters:\n\t*\tpoint {BodyPoint} the point\n\t* Returns:\n\t*\t{integer} the index of the newly added point\n\t*/\n\tJSM.Body.prototype.AddPoint = function (point)\n\t{\n\t\tthis.points.push (point);\n\t\treturn this.points.length - 1;\n\t};\n\n\t/**\n\t* Function: Body.AddLine\n\t* Description: Adds a line to the body.\n\t* Parameters:\n\t*\tline {BodyLine} the line\n\t* Returns:\n\t*\t{integer} the index of the newly added line\n\t*/\n\tJSM.Body.prototype.AddLine = function (line)\n\t{\n\t\tthis.lines.push (line);\n\t\treturn this.lines.length - 1;\n\t};\n\n\t/**\n\t* Function: Body.AddPolygon\n\t* Description: Adds a polygon to the body.\n\t* Parameters:\n\t*\tpolygon {BodyPolygon} the polygon\n\t* Returns:\n\t*\t{integer} the index of the newly added polygon\n\t*/\n\tJSM.Body.prototype.AddPolygon = function (polygon)\n\t{\n\t\tthis.polygons.push (polygon);\n\t\treturn this.polygons.length - 1;\n\t};\n\n\t/**\n\t* Function: Body.GetVertex\n\t* Description: Returns the vertex at the given index.\n\t* Parameters:\n\t*\tindex {integer} the vertex index\n\t* Returns:\n\t*\t{BodyVertex} the result\n\t*/\n\tJSM.Body.prototype.GetVertex = function (index)\n\t{\n\t\treturn this.vertices[index];\n\t};\n\n\t/**\n\t* Function: Body.GetVertexPosition\n\t* Description: Returns the position of the vertex at the given index.\n\t* Parameters:\n\t*\tindex {integer} the vertex index\n\t* Returns:\n\t*\t{Coord} the result\n\t*/\n\tJSM.Body.prototype.GetVertexPosition = function (index)\n\t{\n\t\treturn this.vertices[index].position;\n\t};\n\n\t/**\n\t* Function: Body.SetVertexPosition\n\t* Description: Sets the position of the vertex at the given index.\n\t* Parameters:\n\t*\tindex {integer} the vertex index\n\t*\tposition {Coord} the new position\n\t*/\n\tJSM.Body.prototype.SetVertexPosition = function (index, position)\n\t{\n\t\tthis.vertices[index].position = position;\n\t};\n\n\t/**\n\t* Function: Body.GetPoint\n\t* Description: Returns the point at the given index.\n\t* Parameters:\n\t*\tindex {integer} the point index\n\t* Returns:\n\t*\t{BodyPoint} the result\n\t*/\n\tJSM.Body.prototype.GetPoint = function (index)\n\t{\n\t\treturn this.points[index];\n\t};\n\n\t/**\n\t* Function: Body.GetLine\n\t* Description: Returns the line at the given index.\n\t* Parameters:\n\t*\tindex {integer} the line index\n\t* Returns:\n\t*\t{BodyLine} the result\n\t*/\n\tJSM.Body.prototype.GetLine = function (index)\n\t{\n\t\treturn this.lines[index];\n\t};\n\n\t/**\n\t* Function: Body.GetPolygon\n\t* Description: Returns the polygon at the given index.\n\t* Parameters:\n\t*\tindex {integer} the polygon index\n\t* Returns:\n\t*\t{BodyPolygon} the result\n\t*/\n\tJSM.Body.prototype.GetPolygon = function (index)\n\t{\n\t\treturn this.polygons[index];\n\t};\n\n\t/**\n\t* Function: Body.SetPointsMaterialIndex\n\t* Description: Sets the material index for all points in the body.\n\t* Parameters:\n\t*\tmaterial {integer} the material index\n\t*/\n\tJSM.Body.prototype.SetPointsMaterialIndex = function (material)\n\t{\n\t\tvar i;\n\t\tfor (i = 0; i < this.points.length; i++) {\n\t\t\tthis.points[i].SetMaterialIndex (material);\n\t\t}\n\t};\n\n\t/**\n\t* Function: Body.SetLinesMaterialIndex\n\t* Description: Sets the material index for all lines in the body.\n\t* Parameters:\n\t*\tmaterial {integer} the material index\n\t*/\n\tJSM.Body.prototype.SetLinesMaterialIndex = function (material)\n\t{\n\t\tvar i;\n\t\tfor (i = 0; i < this.lines.length; i++) {\n\t\t\tthis.lines[i].SetMaterialIndex (material);\n\t\t}\n\t};\n\n\t/**\n\t* Function: Body.SetPolygonsMaterialIndex\n\t* Description: Sets the material index for all polygons in the body.\n\t* Parameters:\n\t*\tmaterial {integer} the material index\n\t*/\n\tJSM.Body.prototype.SetPolygonsMaterialIndex = function (material)\n\t{\n\t\tvar i;\n\t\tfor (i = 0; i < this.polygons.length; i++) {\n\t\t\tthis.polygons[i].SetMaterialIndex (material);\n\t\t}\n\t};\n\n\t/**\n\t* Function: Body.SetPolygonsCurveGroup\n\t* Description: Sets the curve group index for all polygons in the body.\n\t* Parameters:\n\t*\tgroup {integer} the curve group index\n\t*/\n\tJSM.Body.prototype.SetPolygonsCurveGroup = function (group)\n\t{\n\t\tvar i;\n\t\tfor (i = 0; i < this.polygons.length; i++) {\n\t\t\tthis.polygons[i].SetCurveGroup (group);\n\t\t}\n\t};\n\n\t/**\n\t* Function: Body.RemoveVertex\n\t* Description: Removes a vertex from the body. It also removes connected polygons.\n\t* Parameters:\n\t*\tindex {integer} the index of the vertex\n\t*/\n\tJSM.Body.prototype.RemoveVertex = function (index)\n\t{\n\t\tvar pointsToDelete = [];\n\t\tvar linesToDelete = [];\n\t\tvar polygonsToDelete = [];\n\t\tvar i, j, point, line, polygon, bodyVertIndex;\n\t\tfor (i = 0; i < this.points.length; i++) {\n\t\t\tpoint = this.points[i];\n\t\t\tif (point.GetVertexIndex () == index) {\n\t\t\t\tpointsToDelete.push (i);\n\t\t\t} else if (point.GetVertexIndex () >= index) {\n\t\t\t\tpoint.SetVertexIndex (point.GetVertexIndex () - 1);\n\t\t\t}\n\t\t}\n\t\tfor (i = 0; i < this.lines.length; i++) {\n\t\t\tline = this.lines[i];\n\t\t\tif (line.GetBegVertexIndex () == index || line.GetEndVertexIndex () == index) {\n\t\t\t\tlinesToDelete.push (i);\n\t\t\t} else {\n\t\t\t\tif (line.GetBegVertexIndex () >= index) {\n\t\t\t\t\tline.SetBegVertexIndex (line.GetBegVertexIndex () - 1);\n\t\t\t\t}\n\t\t\t\tif (line.GetEndVertexIndex () >= index) {\n\t\t\t\t\tline.SetEndVertexIndex (line.GetEndVertexIndex () - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (i = 0; i < this.polygons.length; i++) {\n\t\t\tpolygon = this.polygons[i];\n\t\t\tfor (j = 0; j < polygon.VertexIndexCount (); j++) {\n\t\t\t\tbodyVertIndex = polygon.GetVertexIndex (j);\n\t\t\t\tif (polygon.GetVertexIndex (j) == index) {\n\t\t\t\t\tpolygonsToDelete.push (i);\n\t\t\t\t\tbreak;\n\t\t\t\t} else if (bodyVertIndex >= index) {\n\t\t\t\t\tpolygon.SetVertexIndex (j, bodyVertIndex - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (i = 0; i < pointsToDelete.length; i++) {\n\t\t\tthis.RemovePoint (pointsToDelete[i] - i);\n\t\t}\n\t\tfor (i = 0; i < linesToDelete.length; i++) {\n\t\t\tthis.RemoveLine (linesToDelete[i] - i);\n\t\t}\n\t\tfor (i = 0; i < polygonsToDelete.length; i++) {\n\t\t\tthis.RemovePolygon (polygonsToDelete[i] - i);\n\t\t}\n\t\tthis.vertices.splice (index, 1);\n\t};\n\n\t/**\n\t* Function: Body.RemovePoint\n\t* Description: Removes a point from the body.\n\t* Parameters:\n\t*\tindex {integer} the index of the point\n\t*/\n\tJSM.Body.prototype.RemovePoint = function (index)\n\t{\n\t\tthis.points.splice (index, 1);\n\t};\n\n\t/**\n\t* Function: Body.RemoveLine\n\t* Description: Removes a line from the body.\n\t* Parameters:\n\t*\tindex {integer} the index of the line\n\t*/\n\tJSM.Body.prototype.RemoveLine = function (index)\n\t{\n\t\tthis.lines.splice (index, 1);\n\t};\n\n\t/**\n\t* Function: Body.RemovePolygon\n\t* Description: Removes a polygon from the body.\n\t* Parameters:\n\t*\tindex {integer} the index of the polygon\n\t*/\n\tJSM.Body.prototype.RemovePolygon = function (index)\n\t{\n\t\tthis.polygons.splice (index, 1);\n\t};\n\n\t/**\n\t* Function: Body.VertexCount\n\t* Description: Returns the vertex count of the body.\n\t* Returns:\n\t*\t{integer} the result\n\t*/\n\tJSM.Body.prototype.VertexCount = function ()\n\t{\n\t\treturn this.vertices.length;\n\t};\n\n\t/**\n\t* Function: Body.PointCount\n\t* Description: Returns the point count of the body.\n\t* Returns:\n\t*\t{integer} the result\n\t*/\n\tJSM.Body.prototype.PointCount = function ()\n\t{\n\t\treturn this.points.length;\n\t};\n\n\t/**\n\t* Function: Body.LineCount\n\t* Description: Returns the line count of the body.\n\t* Returns:\n\t*\t{integer} the result\n\t*/\n\tJSM.Body.prototype.LineCount = function ()\n\t{\n\t\treturn this.lines.length;\n\t};\n\n\t/**\n\t* Function: Body.PolygonCount\n\t* Description: Returns the polygon count of the body.\n\t* Returns:\n\t*\t{integer} the result\n\t*/\n\tJSM.Body.prototype.PolygonCount = function ()\n\t{\n\t\treturn this.polygons.length;\n\t};\n\n\t/**\n\t* Function: Body.GetTextureProjection\n\t* Description: Returns the texture projection of the body.\n\t* Returns:\n\t*\t{BodyTextureProjection} the result\n\t*/\n\tJSM.Body.prototype.GetTextureProjection = function ()\n\t{\n\t\treturn this.projection;\n\t};\n\n\t/**\n\t* Function: Body.SetTextureProjection\n\t* Description: Sets the texture projection of the body.\n\t* Parameters:\n\t*\tprojection {BodyTextureProjection} the new texture projection\n\t*/\n\tJSM.Body.prototype.SetTextureProjection = function (projection)\n\t{\n\t\tthis.projection = projection;\n\t};\n\n\t/**\n\t* Function: Body.SetPlanarTextureProjection\n\t* Description: Sets the texture projection to planar with the given parameters.\n\t* Parameters:\n\t*\torigo {Coord} origo of the projection\n\t*\txDirection {Vector} x direction of the projection plane\n\t*\tyDirection {Vector} y direction of the projection plane\n\t*/\n\tJSM.Body.prototype.SetPlanarTextureProjection = function (origo, xDirection, yDirection)\n\t{\n\t\tthis.projection.SetPlanar (origo, xDirection, yDirection);\n\t};\n\n\t/**\n\t* Function: Body.SetCubicTextureProjection\n\t* Description: Sets the texture projection to cubic with the given parameters.\n\t* Parameters:\n\t*\torigo {Coord} origo of the projection\n\t*\txDirection {Vector} x direction (edge of the cube) of the projection\n\t*\tyDirection {Vector} y direction (edge of the cube) of the projection\n\t*\tzDirection {Vector} z direction (edge of the cube) of the projection\n\t*/\n\tJSM.Body.prototype.SetCubicTextureProjection = function (origo, xDirection, yDirection, zDirection)\n\t{\n\t\tthis.projection.SetCubic (origo, xDirection, yDirection, zDirection);\n\t};\n\n\t/**\n\t* Function: Body.SetCylindricalTextureProjection\n\t* Description: Sets the texture projection to cylindrical with the given parameters.\n\t* Parameters:\n\t*\torigo {Coord} origo of the projection\n\t*\tradius {number} radius of the cylinder\n\t*\txDirection {Vector} x direction (start point along perimeter) of the projection\n\t*\tzDirection {Vector} z direction (normal vector) of the projection\n\t*/\n\tJSM.Body.prototype.SetCylindricalTextureProjection = function (origo, radius, xDirection, zDirection)\n\t{\n\t\tthis.projection.SetCylindrical (origo, radius, xDirection, zDirection);\n\t};\n\n\t/**\n\t* Function: Body.Transform\n\t* Description: Transforms the body.\n\t* Parameters:\n\t*\ttransformation {Transformation} the transformation\n\t*/\n\tJSM.Body.prototype.Transform = function (transformation)\n\t{\n\t\tvar i;\n\t\tfor (i = 0; i < this.vertices.length; i++) {\n\t\t\tthis.vertices[i].position = transformation.Apply (this.vertices[i].position);\n\t\t}\n\t\tthis.projection.Transform (transformation);\n\t};\n\n\t/**\n\t* Function: Body.GetBoundingBox\n\t* Description: Returns the bounding box of the body.\n\t* Returns:\n\t*\t{Box} the result\n\t*/\n\tJSM.Body.prototype.GetBoundingBox = function ()\n\t{\n\t\tvar min = new JSM.Coord (JSM.Inf, JSM.Inf, JSM.Inf);\n\t\tvar max = new JSM.Coord (-JSM.Inf, -JSM.Inf, -JSM.Inf);\n\n\t\tvar i, coord;\n\t\tfor (i = 0; i < this.vertices.length; i++) {\n\t\t\tcoord = this.vertices[i].position;\n\t\t\tmin.x = JSM.Minimum (min.x, coord.x);\n\t\t\tmin.y = JSM.Minimum (min.y, coord.y);\n\t\t\tmin.z = JSM.Minimum (min.z, coord.z);\n\t\t\tmax.x = JSM.Maximum (max.x, coord.x);\n\t\t\tmax.y = JSM.Maximum (max.y, coord.y);\n\t\t\tmax.z = JSM.Maximum (max.z, coord.z);\n\t\t}\n\t\t\n\t\treturn new JSM.Box (min, max);\n\t};\n\n\t/**\n\t* Function: Body.GetCenter\n\t* Description: Returns the center of the bounding box of the body.\n\t* Returns:\n\t*\t{Coord} the result\n\t*/\n\tJSM.Body.prototype.GetCenter = function ()\n\t{\n\t\tvar boundingBox = this.GetBoundingBox ();\n\t\treturn boundingBox.GetCenter ();\n\t};\n\n\t/**\n\t* Function: Body.GetBoundingSphere\n\t* Description: Returns the bounding sphere of the body.\n\t* Returns:\n\t*\t{Sphere} the result\n\t*/\n\tJSM.Body.prototype.GetBoundingSphere = function ()\n\t{\n\t\tvar center = this.GetCenter ();\n\t\tvar radius = 0.0;\n\t\t\n\t\tvar i, current;\n\t\tfor (i = 0; i < this.vertices.length; i++) {\n\t\t\tcurrent = center.DistanceTo (this.vertices[i].position);\n\t\t\tif (JSM.IsGreater (current, radius)) {\n\t\t\t\tradius = current;\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar result = new JSM.Sphere (center, radius);\n\t\treturn result;\n\t};\n\n\t/**\n\t* Function: Body.OffsetToOrigo\n\t* Description: Offsets the body to the origo.\n\t*/\n\tJSM.Body.prototype.OffsetToOrigo = function ()\n\t{\n\t\tvar center = this.GetCenter ().Clone ();\n\t\tcenter.MultiplyScalar (-1.0);\n\n\t\tvar i;\n\t\tfor (i = 0; i < this.vertices.length; i++) {\n\t\t\tthis.vertices[i].position = JSM.CoordAdd (this.vertices[i].position, center);\n\t\t}\n\t};\n\n\t/**\n\t* Function: Body.Merge\n\t* Description: Merges an existing body to the body.\n\t* Parameters:\n\t*\tbody {Body} the body to merge\n\t*/\n\tJSM.Body.prototype.Merge = function (body)\n\t{\n\t\tvar oldVertexCount = this.vertices.length;\n\t\t\n\t\tvar i, j;\n\t\tfor (i = 0; i < body.VertexCount (); i++) {\n\t\t\tthis.vertices.push (body.GetVertex (i).Clone ());\n\t\t}\n\t\t\n\t\tvar newPoint;\n\t\tfor (i = 0; i < body.PointCount (); i++) {\n\t\t\tnewPoint = body.GetPoint (i).Clone ();\n\t\t\tnewPoint.SetVertexIndex (newPoint.GetVertexIndex () + oldVertexCount);\n\t\t\tthis.points.push (newPoint);\n\t\t}\t\n\t\t\n\t\tvar newLine;\n\t\tfor (i = 0; i < body.LineCount (); i++) {\n\t\t\tnewLine = body.GetLine (i).Clone ();\n\t\t\tnewLine.SetBegVertexIndex (newLine.GetBegVertexIndex () + oldVertexCount);\n\t\t\tnewLine.SetEndVertexIndex (newLine.GetEndVertexIndex () + oldVertexCount);\n\t\t\tthis.lines.push (newLine);\n\t\t}\n\n\t\tvar newPolygon;\n\t\tfor (i = 0; i < body.PolygonCount (); i++) {\n\t\t\tnewPolygon = body.GetPolygon (i).Clone ();\n\t\t\tfor (j = 0; j < newPolygon.VertexIndexCount (); j++) {\n\t\t\t\tnewPolygon.vertices[j] += oldVertexCount;\n\t\t\t}\n\t\t\tthis.polygons.push (newPolygon);\n\t\t}\n\t};\n\n\t/**\n\t* Function: Body.Clear\n\t* Description: Makes the body empty.\n\t*/\n\tJSM.Body.prototype.Clear = function ()\n\t{\n\t\tthis.vertices = [];\n\t\tthis.points = [];\n\t\tthis.lines = [];\n\t\tthis.polygons = [];\n\t\tthis.projection = new JSM.BodyTextureProjection ();\n\t};\n\n\t/**\n\t* Function: Body.Clone\n\t* Description: Clones the body.\n\t* Returns:\n\t*\t{Body} the cloned instance\n\t*/\n\tJSM.Body.prototype.Clone = function ()\n\t{\n\t\tvar result = new JSM.Body ();\n\t\t\n\t\tvar i;\n\t\tfor (i = 0; i < this.vertices.length; i++) {\n\t\t\tresult.AddVertex (this.vertices[i].Clone ());\n\t\t}\n\t\t\n\t\tfor (i = 0; i < this.points.length; i++) {\n\t\t\tresult.AddPoint (this.points[i].Clone ());\n\t\t}\n\n\t\tfor (i = 0; i < this.lines.length; i++) {\n\t\t\tresult.AddLine (this.lines[i].Clone ());\n\t\t}\n\n\t\tfor (i = 0; i < this.polygons.length; i++) {\n\t\t\tresult.AddPolygon (this.polygons[i].Clone ());\n\t\t}\n\n\t\tresult.SetTextureProjection (this.projection.Clone ());\n\t\treturn result;\n\t};\n\n\treturn JSM;\n});\n"]}