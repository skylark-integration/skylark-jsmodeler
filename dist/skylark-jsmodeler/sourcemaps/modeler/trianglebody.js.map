{"version":3,"sources":["modeler/trianglebody.js"],"names":["define","JSM","TriangleBody","name","this","vertices","normals","uvs","triangles","defaultUVIndex","prototype","SetName","GetName","AddVertex","x","y","z","push","Coord","length","GetVertex","index","SetVertex","VertexCount","AddNormal","Vector","GetNormal","GetTriangleNormal","triangleIndex","normalPosition","normal","triangle","curve","n0","v0","v1","v2","n1","n2","BarycentricInterpolation","NormalCount","AddUV","Coord2D","AddDefaultUV","GetUV","UVCount","AddTriangle","u0","u1","u2","mat","GetTriangle","TriangleCount","GetBoundingBox","i","coord","min","Inf","max","Minimum","Maximum","Box","GetCenter","GetBoundingSphere","current","center","radius","DistanceTo","IsGreater","Sphere","Finalize","model","FinalizeTriangle","body","triangleNormals","vertexToTriangles","AddAverageNormal","vertexIndex","neighbourTriangleIndex","neighbourTriangle","averageNormal","averageCount","neighbourTriangles","CoordAdd","MultiplyScalar","Normalize","normalIndex","undefined","GetDefaultMaterialIndex","CalculateTriangleNormal","Clone","result","ConvertTriangleBodyToOctree","TriangleOctree"],"mappings":"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","file":"../../modeler/trianglebody.js","sourcesContent":["define([\"../core/jsm\"],function(JSM){\n\t/**\n\t* Class: TriangleBody\n\t* Description: Represents a 3D body which contains only triangles.\n\t*/\n\tJSM.TriangleBody = function (name)\n\t{\n\t\tthis.name = name;\n\t\tthis.vertices = [];\n\t\tthis.normals = [];\n\t\tthis.uvs = [];\n\t\tthis.triangles = [];\n\t\tthis.defaultUVIndex = -1;\n\t};\n\n\t/**\n\t* Function: TriangleBody.SetName\n\t* Description: Sets the name of the body.\n\t* Parameters:\n\t*\tname {string} the name\n\t*/\n\tJSM.TriangleBody.prototype.SetName = function (name)\n\t{\n\t\tthis.name = name;\n\t};\n\n\t/**\n\t* Function: TriangleBody.GetName\n\t* Description: Returns the name of the body.\n\t* Returns:\n\t*\t{string} the result\n\t*/\n\tJSM.TriangleBody.prototype.GetName = function ()\n\t{\n\t\treturn this.name;\n\t};\n\n\t/**\n\t* Function: TriangleBody.AddVertex\n\t* Description: Adds a vertex to the body.\n\t* Parameters:\n\t*\tx, y, z {number} the coordinates of the vertex\n\t* Returns:\n\t*\t{integer} the index of the added vertex\n\t*/\n\tJSM.TriangleBody.prototype.AddVertex = function (x, y, z)\n\t{\n\t\tthis.vertices.push (new JSM.Coord (x, y, z));\n\t\treturn this.vertices.length - 1;\n\t};\n\n\t/**\n\t* Function: TriangleBody.GetVertex\n\t* Description: Returns the vertex at the given index.\n\t* Parameters:\n\t*\tindex {integer} the vertex index\n\t* Returns:\n\t*\t{Coord} the result\n\t*/\n\tJSM.TriangleBody.prototype.GetVertex = function (index)\n\t{\n\t\treturn this.vertices[index];\n\t};\n\n\t/**\n\t* Function: TriangleBody.SetVertex\n\t* Description: Sets the position of the vertex at the given index.\n\t* Parameters:\n\t*\tindex {integer} the vertex index\n\t*\tx, y, z {number} the new coordinates of the vertex\n\t*/\n\tJSM.TriangleBody.prototype.SetVertex = function (index, x, y, z)\n\t{\n\t\tthis.vertices[index] = new JSM.Coord (x, y, z);\n\t};\n\n\t/**\n\t* Function: TriangleBody.VertexCount\n\t* Description: Returns the vertex count of the body.\n\t* Returns:\n\t*\t{integer} the result\n\t*/\n\tJSM.TriangleBody.prototype.VertexCount = function ()\n\t{\n\t\treturn this.vertices.length;\n\t};\n\n\t/**\n\t* Function: TriangleBody.AddNormal\n\t* Description: Adds a normal vector to the body.\n\t* Parameters:\n\t*\tx, y, z {number} the coordinates of the normal vector\n\t* Returns:\n\t*\t{integer} the index of the added normal vector\n\t*/\n\tJSM.TriangleBody.prototype.AddNormal = function (x, y, z)\n\t{\n\t\tthis.normals.push (new JSM.Vector (x, y, z));\n\t\treturn this.normals.length - 1;\n\t};\n\n\t/**\n\t* Function: TriangleBody.GetNormal\n\t* Description: Returns the normal vector at the given index.\n\t* Parameters:\n\t*\tindex {integer} the normal vector index\n\t* Returns:\n\t*\t{Vector} the result\n\t*/\n\tJSM.TriangleBody.prototype.GetNormal = function (index)\n\t{\n\t\treturn this.normals[index];\n\t};\n\n\n\t/**\n\t* Function: TriangleBody.GetTriangleNormal\n\t* Description: Returns the normal vector of a triangle at the given position.\n\t* Parameters:\n\t*\ttriangleIndex {integer} the triangle index\n\t*\tnormalPosition {Coord} the position of the normal inside the triangle\n\t* Returns:\n\t*\t{Vector} the result\n\t*/\n\tJSM.TriangleBody.prototype.GetTriangleNormal = function (triangleIndex, normalPosition)\n\t{\n\t\tvar normal = null;\n\t\tvar triangle = this.triangles[triangleIndex];\n\t\tif (triangle.curve == -1) {\n\t\t\tnormal = this.GetNormal (triangle.n0);\n\t\t} else {\n\t\t\tvar v0 = this.GetVertex (triangle.v0);\n\t\t\tvar v1 = this.GetVertex (triangle.v1);\n\t\t\tvar v2 = this.GetVertex (triangle.v2);\n\t\t\tvar n0 = this.GetNormal (triangle.n0);\n\t\t\tvar n1 = this.GetNormal (triangle.n1);\n\t\t\tvar n2 = this.GetNormal (triangle.n2);\n\t\t\tnormal = JSM.BarycentricInterpolation (v0, v1, v2, n0, n1, n2, normalPosition);\n\t\t}\n\t\treturn normal;\n\t};\n\n\t/**\n\t* Function: TriangleBody.NormalCount\n\t* Description: Returns the normal vector count of the body.\n\t* Returns:\n\t*\t{integer} the result\n\t*/\n\tJSM.TriangleBody.prototype.NormalCount = function ()\n\t{\n\t\treturn this.normals.length;\n\t};\n\n\t/**\n\t* Function: TriangleBody.AddUV\n\t* Description: Adds a texture coordinate to the body.\n\t* Parameters:\n\t*\tx, y {number} the coordinates of the texture coordinate\n\t* Returns:\n\t*\t{integer} the index of the added texture coordinate\n\t*/\n\tJSM.TriangleBody.prototype.AddUV = function (x, y)\n\t{\n\t\tthis.uvs.push (new JSM.Coord2D (x, y));\n\t\treturn this.uvs.length - 1;\n\t};\n\n\t/**\n\t* Function: TriangleBody.AddDefaultUV\n\t* Description:\n\t*\tAdds a default texture coordinate to the body.\n\t*\tThe default texture coordinate is stored only once.\n\t* Returns:\n\t*\t{integer} the index of the default texture coordinate\n\t*/\n\tJSM.TriangleBody.prototype.AddDefaultUV = function ()\n\t{\n\t\tif (this.defaultUVIndex != -1) {\n\t\t\treturn this.defaultUVIndex;\n\t\t}\n\t\t\n\t\tthis.defaultUVIndex = this.AddUV (0.0, 0.0);\n\t\treturn this.defaultUVIndex;\n\t};\n\n\t/**\n\t* Function: TriangleBody.GetUV\n\t* Description: Returns the texture coordinate at the given index.\n\t* Parameters:\n\t*\tindex {integer} the texture coordinate index\n\t* Returns:\n\t*\t{Coord2D} the result\n\t*/\n\tJSM.TriangleBody.prototype.GetUV = function (index)\n\t{\n\t\treturn this.uvs[index];\n\t};\n\n\t/**\n\t* Function: TriangleBody.UVCount\n\t* Description: Returns the texture coordinate count of the body.\n\t* Returns:\n\t*\t{integer} the result\n\t*/\n\tJSM.TriangleBody.prototype.UVCount = function ()\n\t{\n\t\treturn this.uvs.length;\n\t};\n\n\t/**\n\t* Function: TriangleBody.AddTriangle\n\t* Description: Adds a triangle to the body.\n\t* Parameters:\n\t*\tv0, v1, v2 {integer} the vertex indices of the triangle\n\t*\tn0, n1, n2 {integer} the normal vector indices of the triangle\n\t*\tu0, u1, u2 {integer} the texture coordinate indices of the triangle\n\t*\tmat {integer} the material index of the triangle\n\t*\tcurve {integer} the curve group index of the triangle\n\t* Returns:\n\t*\t{integer} the index of the added triangle\n\t*/\n\tJSM.TriangleBody.prototype.AddTriangle = function (v0, v1, v2, n0, n1, n2, u0, u1, u2, mat, curve)\n\t{\n\t\tthis.triangles.push ({\n\t\t\tv0 : v0,\n\t\t\tv1 : v1,\n\t\t\tv2 : v2,\n\t\t\tn0 : n0,\n\t\t\tn1 : n1,\n\t\t\tn2 : n2,\n\t\t\tu0 : u0,\n\t\t\tu1 : u1,\n\t\t\tu2 : u2,\n\t\t\tmat : mat,\n\t\t\tcurve : curve\n\t\t});\n\t\treturn this.triangles.length - 1;\n\t};\n\n\t/**\n\t* Function: TriangleBody.GetTriangle\n\t* Description: Returns the triangle at the given index.\n\t* Parameters:\n\t*\tindex {integer} the triangle index\n\t* Returns:\n\t*\t{object} the result\n\t*/\n\tJSM.TriangleBody.prototype.GetTriangle = function (index)\n\t{\n\t\treturn this.triangles[index];\n\t};\n\n\t/**\n\t* Function: TriangleBody.TriangleCount\n\t* Description: Returns the triangle count of the body.\n\t* Returns:\n\t*\t{integer} the result\n\t*/\n\tJSM.TriangleBody.prototype.TriangleCount = function ()\n\t{\n\t\treturn this.triangles.length;\n\t};\n\n\t/**\n\t* Function: TriangleBody.GetBoundingBox\n\t* Description: Returns the bounding box of the body.\n\t* Returns:\n\t*\t{Box} the result\n\t*/\n\tJSM.TriangleBody.prototype.GetBoundingBox = function ()\n\t{\n\t\tvar min = new JSM.Coord (JSM.Inf, JSM.Inf, JSM.Inf);\n\t\tvar max = new JSM.Coord (-JSM.Inf, -JSM.Inf, -JSM.Inf);\n\n\t\tvar i, coord;\n\t\tfor (i = 0; i < this.vertices.length; i++) {\n\t\t\tcoord = this.vertices[i];\n\t\t\tmin.x = JSM.Minimum (min.x, coord.x);\n\t\t\tmin.y = JSM.Minimum (min.y, coord.y);\n\t\t\tmin.z = JSM.Minimum (min.z, coord.z);\n\t\t\tmax.x = JSM.Maximum (max.x, coord.x);\n\t\t\tmax.y = JSM.Maximum (max.y, coord.y);\n\t\t\tmax.z = JSM.Maximum (max.z, coord.z);\n\t\t}\n\t\t\n\t\treturn new JSM.Box (min, max);\n\t};\n\n\t/**\n\t* Function: TriangleBody.GetCenter\n\t* Description: Returns the center of the bounding box of the body.\n\t* Returns:\n\t*\t{Coord} the result\n\t*/\n\tJSM.TriangleBody.prototype.GetCenter = function ()\n\t{\n\t\tvar boundingBox = this.GetBoundingBox ();\n\t\treturn boundingBox.GetCenter ();\n\t};\n\n\t/**\n\t* Function: TriangleBody.GetBoundingSphere\n\t* Description: Returns the bounding sphere of the body.\n\t* Returns:\n\t*\t{Sphere} the result\n\t*/\n\tJSM.TriangleBody.prototype.GetBoundingSphere = function ()\n\t{\n\t\tvar center = this.GetCenter ();\n\t\tvar radius = 0.0;\n\t\t\n\t\tvar i, current;\n\t\tfor (i = 0; i < this.vertices.length; i++) {\n\t\t\tcurrent = center.DistanceTo (this.vertices[i]);\n\t\t\tif (JSM.IsGreater (current, radius)) {\n\t\t\t\tradius = current;\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar result = new JSM.Sphere (center, radius);\n\t\treturn result;\n\t};\n\n\t/**\n\t* Function: TriangleBody.Finalize\n\t* Description:\n\t*\tFinalizes the body. This operation calculates normal vectors\n\t*\tand fixes the body if some data is missing from it.\n\t* Parameters:\n\t*\tmodel {TriangleModel} the triangle index\n\t*/\n\tJSM.TriangleBody.prototype.Finalize = function (model)\n\t{\n\t\tfunction FinalizeTriangle (body, triangleIndex, triangleNormals, vertexToTriangles)\n\t\t{\n\t\t\tfunction AddAverageNormal (body, vertexIndex, triangleIndex, triangleNormals, vertexToTriangles)\n\t\t\t{\n\t\t\t\tvar averageNormal = new JSM.Vector (0.0, 0.0, 0.0);\n\t\t\t\tvar averageCount = 0;\n\t\t\t\t\n\t\t\t\tvar triangle = body.GetTriangle (triangleIndex);\n\t\t\t\tvar neighbourTriangles = vertexToTriangles[vertexIndex];\n\t\t\t\tvar i, neighbourTriangleIndex, neighbourTriangle;\n\t\t\t\tfor (i = 0; i < neighbourTriangles.length; i++) {\n\t\t\t\t\tneighbourTriangleIndex = neighbourTriangles[i];\n\t\t\t\t\tneighbourTriangle = body.GetTriangle (neighbourTriangleIndex);\n\t\t\t\t\tif (triangle.curve == neighbourTriangle.curve) {\n\t\t\t\t\t\taverageNormal = JSM.CoordAdd (averageNormal, triangleNormals[neighbourTriangleIndex]);\n\t\t\t\t\t\taverageCount = averageCount + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\taverageNormal.MultiplyScalar (1.0 / averageCount);\n\t\t\t\taverageNormal.Normalize ();\n\t\t\t\treturn body.AddNormal (averageNormal.x, averageNormal.y, averageNormal.z);\n\t\t\t}\n\t\t\n\t\t\tvar triangle = body.triangles[triangleIndex];\n\t\t\tif (triangle.mat === undefined || triangle.mat < 0) {\n\t\t\t\ttriangle.mat = model.GetDefaultMaterialIndex ();\n\t\t\t}\n\t\t\t\n\t\t\tvar normal, normalIndex;\n\t\t\tif (triangle.n0 === undefined || triangle.n1 === undefined || triangle.n2 === undefined) {\n\t\t\t\tif (triangle.curve === undefined || triangle.curve < 0) {\n\t\t\t\t\tnormal = triangleNormals[triangleIndex];\n\t\t\t\t\tnormalIndex = body.AddNormal (normal.x, normal.y, normal.z);\n\t\t\t\t\ttriangle.n0 = normalIndex;\n\t\t\t\t\ttriangle.n1 = normalIndex;\n\t\t\t\t\ttriangle.n2 = normalIndex;\n\t\t\t\t\ttriangle.curve = -1;\n\t\t\t\t} else {\n\t\t\t\t\ttriangle.n0 = AddAverageNormal (body, triangle.v0, triangleIndex, triangleNormals, vertexToTriangles);\n\t\t\t\t\ttriangle.n1 = AddAverageNormal (body, triangle.v1, triangleIndex, triangleNormals, vertexToTriangles);\n\t\t\t\t\ttriangle.n2 = AddAverageNormal (body, triangle.v2, triangleIndex, triangleNormals, vertexToTriangles);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (triangle.u0 === undefined || triangle.u1 === undefined || triangle.u2 === undefined) {\n\t\t\t\ttriangle.u0 = body.AddDefaultUV ();\n\t\t\t\ttriangle.u1 = body.AddDefaultUV ();\n\t\t\t\ttriangle.u2 = body.AddDefaultUV ();\n\t\t\t}\n\t\t}\n\n\t\tvar triangleNormals = [];\n\t\tvar vertexToTriangles = {};\n\n\t\tvar i;\n\t\tfor (i = 0; i < this.vertices.length; i++) {\n\t\t\tvertexToTriangles[i] = [];\n\t\t}\n\t\t\n\t\tvar triangle, normal;\n\t\tfor (i = 0; i < this.triangles.length; i++) {\n\t\t\ttriangle = this.triangles[i];\n\t\t\tnormal = JSM.CalculateTriangleNormal (this.vertices[triangle.v0], this.vertices[triangle.v1], this.vertices[triangle.v2]);\n\t\t\ttriangleNormals.push (normal);\n\t\t\tvertexToTriangles[triangle.v0].push (i);\n\t\t\tvertexToTriangles[triangle.v1].push (i);\n\t\t\tvertexToTriangles[triangle.v2].push (i);\n\t\t}\n\n\t\tfor (i = 0; i < this.triangles.length; i++) {\n\t\t\tFinalizeTriangle (this, i, triangleNormals, vertexToTriangles);\n\t\t}\n\t};\n\n\t/**\n\t* Function: TriangleBody.Clone\n\t* Description: Clones the body.\n\t* Returns:\n\t*\t{TriangleBody} a cloned instance\n\t*/\n\tJSM.TriangleBody.prototype.Clone = function ()\n\t{\n\t\tvar result = new JSM.TriangleBody (this.name);\n\t\t\n\t\tvar i, triangle;\n\t\t\n\t\tfor (i = 0; i < this.vertices.length; i++) {\n\t\t\tresult.vertices.push (this.vertices[i].Clone ());\n\t\t}\n\t\t\n\t\tfor (i = 0; i < this.normals.length; i++) {\n\t\t\tresult.normals.push (this.normals[i].Clone ());\n\t\t}\n\t\t\n\t\tfor (i = 0; i < this.uvs.length; i++) {\n\t\t\tresult.uvs.push (this.uvs[i].Clone ());\n\t\t}\n\t\t\n\t\tfor (i = 0; i < this.triangles.length; i++) {\n\t\t\ttriangle = this.triangles[i];\n\t\t\tresult.triangles.push ({\n\t\t\t\tv0 : triangle.v0,\n\t\t\t\tv1 : triangle.v1,\n\t\t\t\tv2 : triangle.v2,\n\t\t\t\tn0 : triangle.n0,\n\t\t\t\tn1 : triangle.n1,\n\t\t\t\tn2 : triangle.n2,\n\t\t\t\tu0 : triangle.u0,\n\t\t\t\tu1 : triangle.u1,\n\t\t\t\tu2 : triangle.u2,\n\t\t\t\tmat : triangle.mat,\n\t\t\t\tcurve : triangle.curve\n\t\t\t});\n\t\t}\n\t\t\n\t\treturn result;\n\t};\n\n\t/**\n\t* Function: ConvertTriangleBodyToOctree\n\t* Description: Converts a triangle body to triangle octree.\n\t* Parameters:\n\t*\tbody {TriangleBody} the body\n\t* Returns:\n\t*\t{TriangleOctree} the result\n\t*/\n\tJSM.ConvertTriangleBodyToOctree = function (body)\n\t{\n\t\tvar result = new JSM.TriangleOctree (body.GetBoundingBox ());\n\t\tvar i, triangle, v0, v1, v2;\n\t\tfor (i = 0; i < body.TriangleCount (); i++) {\n\t\t\ttriangle = body.GetTriangle (i);\n\t\t\tv0 = body.GetVertex (triangle.v0);\n\t\t\tv1 = body.GetVertex (triangle.v1);\n\t\t\tv2 = body.GetVertex (triangle.v2);\n\t\t\tresult.AddTriangle (v0, v1, v2, {\n\t\t\t\ttriangleIndex : i\n\t\t\t});\n\t\t}\n\t\treturn result;\n\t};\n\n\treturn JSM;\n});\n"]}