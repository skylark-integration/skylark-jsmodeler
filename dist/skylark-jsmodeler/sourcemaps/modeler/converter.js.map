{"version":3,"sources":["modeler/converter.js"],"names":["define","JSM","ConvertBodyToTriangleBody","body","AddTriangle","result","polygon","v0","v1","v2","triangleIndex","triangle","GetTriangle","HasMaterialIndex","mat","GetMaterialIndex","HasCurveGroup","curve","GetCurveGroup","i","j","vertex","vertexCount","polygon3D","normal","triangles","TriangleBody","VertexCount","GetVertexPosition","AddVertex","x","y","z","PolygonCount","GetPolygon","VertexIndexCount","GetVertexIndex","Polygon","CalculateBodyPolygonNormal","TriangulatePolygon","length","ConvertModelToTriangleModel","model","material","triangleBody","TriangleModel","materials","GetMaterialSet","Count","GetMaterial","AddMaterial","name","ambient","HexColorToNormalizedRGBComponents","diffuse","specular","shininess","opacity","reflection","BodyCount","GetBody","AddBody","Finalize","ConvertTriangleModelToJsonData","ConvertBody","mesh","coord","trianglesByMaterial","materialCount","MaterialCount","GetVertex","vertices","push","NormalCount","GetNormal","normals","UVCount","GetUV","uvs","TriangleCount","undefined","jsonTriangles","parameters","n0","n1","n2","u0","u1","u2","version","meshes","jsonMaterial","ValueOrDefault","texture","offset","scale","rotation","ConvertMaterials","GetName","MergeJsonDataMeshes","jsonData","MergeMesh","currentMesh","materialToTriangles","MergeTriangles","currentTriangles","vertexOffset","normalOffset","uvOffset","trianglesIndex","triangleParameters","MergeAttributes"],"mappings":"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","file":"../../modeler/converter.js","sourcesContent":["define([\"../core/jsm\"],function(JSM){\n\t/**\n\t* Function: ConvertBodyToTriangleBody\n\t* Description: Converts a body to triangle body.\n\t* Parameters:\n\t*\tbody {Body} the body\n\t* Returns:\n\t*\t{TriangleBody} the result\n\t*/\n\tJSM.ConvertBodyToTriangleBody = function (body)\n\t{\n\t\tfunction AddTriangle (result, polygon, v0, v1, v2)\n\t\t{\n\t\t\tvar triangleIndex = result.AddTriangle (v0, v1, v2);\n\t\t\tvar triangle = result.GetTriangle (triangleIndex);\n\t\t\tif (polygon.HasMaterialIndex ()) {\n\t\t\t\ttriangle.mat = polygon.GetMaterialIndex ();\n\t\t\t}\n\t\t\tif (polygon.HasCurveGroup ()) {\n\t\t\t\ttriangle.curve = polygon.GetCurveGroup ();\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar result = new JSM.TriangleBody ();\n\t\t\n\t\tvar i, j, vertex;\n\t\tfor (i = 0; i < body.VertexCount (); i++) {\n\t\t\tvertex = body.GetVertexPosition (i);\n\t\t\tresult.AddVertex (vertex.x, vertex.y, vertex.z);\n\t\t}\n\t\t\n\t\tvar polygon, vertexCount;\n\t\tvar polygon3D, normal, triangle, triangles;\n\t\tvar v0, v1, v2;\n\t\tfor (i = 0; i < body.PolygonCount (); i++) {\n\t\t\tpolygon = body.GetPolygon (i);\n\t\t\tvertexCount = polygon.VertexIndexCount ();\n\t\t\tif (vertexCount < 3) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (vertexCount == 3) {\n\t\t\t\tv0 = polygon.GetVertexIndex (0);\n\t\t\t\tv1 = polygon.GetVertexIndex (1);\n\t\t\t\tv2 = polygon.GetVertexIndex (2);\n\t\t\t\tAddTriangle (result, polygon, v0, v1, v2);\n\t\t\t} else {\n\t\t\t\tpolygon3D = new JSM.Polygon ();\n\t\t\t\tfor (j = 0; j < vertexCount; j++) {\n\t\t\t\t\tvertex = body.GetVertexPosition (polygon.GetVertexIndex (j));\n\t\t\t\t\tpolygon3D.AddVertex (vertex.x, vertex.y, vertex.z);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tnormal = JSM.CalculateBodyPolygonNormal (body, i);\n\t\t\t\ttriangles = JSM.TriangulatePolygon (polygon3D, normal);\n\t\t\t\tif (triangles !== null) {\n\t\t\t\t\tfor (j = 0; j < triangles.length; j++) {\n\t\t\t\t\t\ttriangle = triangles[j];\n\t\t\t\t\t\tv0 = polygon.GetVertexIndex (triangle[0]);\n\t\t\t\t\t\tv1 = polygon.GetVertexIndex (triangle[1]);\n\t\t\t\t\t\tv2 = polygon.GetVertexIndex (triangle[2]);\n\t\t\t\t\t\tAddTriangle (result, polygon, v0, v1, v2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t};\n\n\t/**\n\t* Function: ConvertModelToTriangleModel\n\t* Description: Converts a model to triangle model.\n\t* Parameters:\n\t*\tmodel {Model} the model\n\t* Returns:\n\t*\t{TriangleModel} the result\n\t*/\n\tJSM.ConvertModelToTriangleModel = function (model)\n\t{\n\t\tvar result = new JSM.TriangleModel ();\n\t\tvar materials = model.GetMaterialSet ();\n\t\tvar i, material;\n\t\tfor (i = 0; i < materials.Count (); i++) {\n\t\t\tmaterial = materials.GetMaterial (i);\n\t\t\tresult.AddMaterial ({\n\t\t\t\tname : 'Material' + i,\n\t\t\t\tambient : JSM.HexColorToNormalizedRGBComponents (material.ambient),\n\t\t\t\tdiffuse : JSM.HexColorToNormalizedRGBComponents (material.diffuse),\n\t\t\t\tspecular : JSM.HexColorToNormalizedRGBComponents (material.specular),\n\t\t\t\tshininess : material.shininess,\n\t\t\t\topacity : material.opacity,\n\t\t\t\treflection : material.reflection\n\t\t\t});\n\t\t}\n\t\t\n\t\tvar body, triangleBody;\n\t\tfor (i = 0; i < model.BodyCount (); i++) {\n\t\t\tbody = model.GetBody (i);\n\t\t\ttriangleBody = JSM.ConvertBodyToTriangleBody (body);\n\t\t\tresult.AddBody (triangleBody);\n\t\t}\n\t\tresult.Finalize ();\n\t\treturn result;\n\t};\n\n\t/**\n\t* Function: ConvertTriangleModelToJsonData\n\t* Description: Converts a triangle model to json data.\n\t* Parameters:\n\t*\tmodel {TriangleModel} the model\n\t* Returns:\n\t*\t{object} the result data\n\t*/\n\tJSM.ConvertTriangleModelToJsonData = function (model)\n\t{\n\t\tfunction ConvertMaterials (model, materials)\n\t\t{\n\t\t\tvar i, material, jsonMaterial;\n\t\t\tfor (i = 0; i < model.MaterialCount (); i++) {\n\t\t\t\tmaterial = model.GetMaterial (i);\n\t\t\t\tjsonMaterial = {\n\t\t\t\t\tname : JSM.ValueOrDefault (material.name, ''),\n\t\t\t\t\tambient : material.ambient,\n\t\t\t\t\tdiffuse : material.diffuse,\n\t\t\t\t\tspecular : material.specular,\n\t\t\t\t\tshininess : material.shininess,\n\t\t\t\t\topacity : material.opacity\n\t\t\t\t};\n\t\t\t\tif (material.texture !== undefined && material.texture !== null) {\n\t\t\t\t\tjsonMaterial.texture = JSM.ValueOrDefault (material.texture, null);\n\t\t\t\t\tjsonMaterial.offset = material.offset;\n\t\t\t\t\tjsonMaterial.scale = material.scale;\n\t\t\t\t\tjsonMaterial.rotation = material.rotation;\n\t\t\t\t}\n\t\t\t\tmaterials.push (jsonMaterial);\n\t\t\t}\n\t\t}\n\n\t\tfunction ConvertBody (model, body, mesh)\n\t\t{\n\t\t\tvar trianglesByMaterial = [];\n\t\t\tvar materialCount = model.MaterialCount ();\n\t\t\t\n\t\t\tvar i, j, coord;\n\t\t\tfor (i = 0; i < body.VertexCount (); i++) {\n\t\t\t\tcoord = body.GetVertex (i);\n\t\t\t\tmesh.vertices.push (coord.x, coord.y, coord.z);\n\t\t\t}\n\t\t\t\n\t\t\tfor (i = 0; i < body.NormalCount (); i++) {\n\t\t\t\tcoord = body.GetNormal (i);\n\t\t\t\tmesh.normals.push (coord.x, coord.y, coord.z);\n\t\t\t}\n\n\t\t\tfor (i = 0; i < body.UVCount (); i++) {\n\t\t\t\tcoord = body.GetUV (i);\n\t\t\t\tmesh.uvs.push (coord.x, coord.y);\n\t\t\t}\n\t\t\t\n\t\t\tfor (i = 0; i < materialCount; i++) {\n\t\t\t\ttrianglesByMaterial.push ([]);\n\t\t\t}\n\n\t\t\tvar triangle;\n\t\t\tfor (i = 0; i < body.TriangleCount (); i++) {\n\t\t\t\ttriangle = body.GetTriangle (i);\n\t\t\t\tif (triangle.mat === undefined || triangle.mat < 0 || triangle.mat >= materialCount) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\ttrianglesByMaterial[triangle.mat].push (i);\n\t\t\t}\n\n\t\t\tvar triangleCount = 0;\n\t\t\tvar triangles, jsonTriangles;\n\t\t\tfor (i = 0; i < trianglesByMaterial.length; i++) {\n\t\t\t\ttriangles = trianglesByMaterial[i];\n\t\t\t\tif (triangles.length === 0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tjsonTriangles =  {\n\t\t\t\t\tmaterial : i,\n\t\t\t\t\tparameters : []\n\t\t\t\t};\n\t\t\t\tfor (j = 0; j < triangles.length; j++) {\n\t\t\t\t\ttriangle = body.GetTriangle (triangles[j]);\n\t\t\t\t\tjsonTriangles.parameters.push (\n\t\t\t\t\t\ttriangle.v0, triangle.v1, triangle.v2,\n\t\t\t\t\t\ttriangle.n0, triangle.n1, triangle.n2,\n\t\t\t\t\t\ttriangle.u0, triangle.u1, triangle.u2\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\ttriangleCount = triangleCount + triangles.length;\n\t\t\t\tmesh.triangles.push (jsonTriangles);\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar result = {\n\t\t\tversion : 1,\n\t\t\tmaterials : [],\n\t\t\tmeshes : []\n\t\t};\n\t\t\n\t\tConvertMaterials (model, result.materials);\n\t\t\n\t\tvar i, body, mesh;\n\t\tfor (i = 0; i < model.BodyCount (); i++) {\n\t\t\tbody = model.GetBody (i);\n\t\t\tif (body.TriangleCount () === 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmesh = {\n\t\t\t\tname : body.GetName (),\n\t\t\t\tvertices : [],\n\t\t\t\tnormals : [],\n\t\t\t\tuvs : [],\n\t\t\t\ttriangles : []\n\t\t\t};\n\t\t\tConvertBody (model, body, mesh);\n\t\t\tresult.meshes.push (mesh);\n\t\t}\n\t\t\n\t\treturn result;\n\t};\n\n\t/**\n\t* Function: MergeJsonDataMeshes\n\t* Description: Merges meshes in json data.\n\t* Parameters:\n\t*\tjsonData {object} the original data\n\t* Returns:\n\t*\t{object} the result data\n\t*/\n\tJSM.MergeJsonDataMeshes = function (jsonData)\n\t{\n\t\tfunction MergeMesh (mesh, currentMesh, materialToTriangles)\n\t\t{\n\t\t\tfunction MergeAttributes (mesh, currentMesh)\n\t\t\t{\n\t\t\t\tvar i;\n\t\t\t\tfor (i = 0; i < currentMesh.vertices.length; i++) {\n\t\t\t\t\tmesh.vertices.push (currentMesh.vertices[i]);\n\t\t\t\t}\n\t\t\t\tfor (i = 0; i < currentMesh.normals.length; i++) {\n\t\t\t\t\tmesh.normals.push (currentMesh.normals[i]);\n\t\t\t\t}\n\t\t\t\tfor (i = 0; i < currentMesh.uvs.length; i++) {\n\t\t\t\t\tmesh.uvs.push (currentMesh.uvs[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t\tfunction MergeTriangles (mesh, currentTriangles, materialToTriangles, vertexOffset, normalOffset, uvOffset)\n\t\t\t{\n\t\t\t\tvar material = currentTriangles.material;\n\t\t\t\tvar trianglesIndex = materialToTriangles[material];\n\t\t\t\tif (trianglesIndex === undefined) {\n\t\t\t\t\tmesh.triangles.push ({\n\t\t\t\t\t\tmaterial : material,\n\t\t\t\t\t\tparameters : []\n\t\t\t\t\t});\n\t\t\t\t\ttrianglesIndex = mesh.triangles.length - 1;\n\t\t\t\t\tmaterialToTriangles[material] = trianglesIndex;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar triangles = mesh.triangles[trianglesIndex];\n\t\t\t\tvar triangleParameters = triangles.parameters;\n\t\t\t\tvar i;\n\t\t\t\tfor (i = 0; i < currentTriangles.parameters.length; i = i + 9) {\n\t\t\t\t\ttriangleParameters.push (\n\t\t\t\t\t\tcurrentTriangles.parameters[i] + vertexOffset,\n\t\t\t\t\t\tcurrentTriangles.parameters[i + 1] + vertexOffset,\n\t\t\t\t\t\tcurrentTriangles.parameters[i + 2] + vertexOffset,\n\t\t\t\t\t\tcurrentTriangles.parameters[i + 3] + normalOffset,\n\t\t\t\t\t\tcurrentTriangles.parameters[i + 4] + normalOffset,\n\t\t\t\t\t\tcurrentTriangles.parameters[i + 5] + normalOffset,\n\t\t\t\t\t\tcurrentTriangles.parameters[i + 6] + uvOffset,\n\t\t\t\t\t\tcurrentTriangles.parameters[i + 7] + uvOffset,\n\t\t\t\t\t\tcurrentTriangles.parameters[i + 8] + uvOffset\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t\tvar vertexOffset = mesh.vertices.length / 3;\n\t\t\tvar normalOffset = mesh.normals.length / 3;\n\t\t\tvar uvOffset = mesh.uvs.length / 2;\n\t\t\tMergeAttributes (mesh, currentMesh);\n\n\t\t\tvar i, currentTriangles;\n\t\t\tfor (i = 0; i < currentMesh.triangles.length; i++) {\n\t\t\t\tcurrentTriangles = currentMesh.triangles[i];\n\t\t\t\tMergeTriangles (mesh, currentTriangles, materialToTriangles, vertexOffset, normalOffset, uvOffset);\n\t\t\t}\n\t\t}\n\n\t\tvar result = {\n\t\t\tversion : jsonData.version,\n\t\t\tmaterials : jsonData.materials,\n\t\t\tmeshes : []\n\t\t};\n\t\t\n\t\tvar mesh = {\n\t\t\tname : 'Merged',\n\t\t\tvertices : [],\n\t\t\tnormals : [],\n\t\t\tuvs : [],\n\t\t\ttriangles : []\n\t\t};\n\t\t\n\t\tvar materialToTriangles = {};\n\t\tvar i, currentMesh;\n\t\tfor (i = 0; i < jsonData.meshes.length; i++) {\n\t\t\tcurrentMesh = jsonData.meshes[i];\n\t\t\tMergeMesh (mesh, currentMesh, materialToTriangles);\n\t\t}\n\t\t\n\t\tresult.meshes.push (mesh);\n\t\treturn result;\n\t};\n\n\treturn JSM;\n});\n"]}