{"version":3,"sources":["modeler/model.js"],"names":["define","JSM","Model","this","bodies","materials","MaterialSet","prototype","AddBody","body","push","length","AddBodies","i","GetBody","index","BodyCount","AddMaterial","material","GetMaterial","GetDefaultMaterial","GetMaterialSet","MaterialCount","Count","VertexCount","count","PolygonCount"],"mappings":";;;;;;;AAAAA,QAAQ,eAAe,SAASC,GA2J/B,OAtJAA,EAAIC,MAAQ,WAEXC,KAAKC,UACLD,KAAKE,UAAY,IAAIJ,EAAIK,aAW1BL,EAAIC,MAAMK,UAAUC,QAAU,SAAUC,GAGvC,OADAN,KAAKC,OAAOM,KAAMD,GACXN,KAAKC,OAAOO,OAAS,GAS7BV,EAAIC,MAAMK,UAAUK,UAAY,SAAUR,GAEzC,IAAIS,EAAGJ,EACP,IAAKI,EAAI,EAAGA,EAAIT,EAAOO,OAAQE,IAC9BJ,EAAOL,EAAOS,GACdV,KAAKK,QAASC,IAYhBR,EAAIC,MAAMK,UAAUO,QAAU,SAAUC,GAEvC,OAAOZ,KAAKC,OAAOW,IASpBd,EAAIC,MAAMK,UAAUS,UAAY,WAE/B,OAAOb,KAAKC,OAAOO,QAWpBV,EAAIC,MAAMK,UAAUU,YAAc,SAAUC,GAE3C,OAAOf,KAAKE,UAAUY,YAAaC,IAWpCjB,EAAIC,MAAMK,UAAUY,YAAc,SAAUJ,GAE3C,OAAOZ,KAAKE,UAAUc,YAAaJ,IASpCd,EAAIC,MAAMK,UAAUa,mBAAqB,WAExC,OAAOjB,KAAKE,UAAUe,sBASvBnB,EAAIC,MAAMK,UAAUc,eAAiB,WAEpC,OAAOlB,KAAKE,WASbJ,EAAIC,MAAMK,UAAUe,cAAgB,WAEnC,OAAOnB,KAAKE,UAAUkB,SASvBtB,EAAIC,MAAMK,UAAUiB,YAAc,WAEjC,IACIX,EADAY,EAAQ,EAEZ,IAAKZ,EAAI,EAAGA,EAAIV,KAAKC,OAAOO,OAAQE,IACnCY,GAAStB,KAAKC,OAAOS,GAAGW,cAEzB,OAAOC,GASRxB,EAAIC,MAAMK,UAAUmB,aAAe,WAElC,IACIb,EADAY,EAAQ,EAEZ,IAAKZ,EAAI,EAAGA,EAAIV,KAAKC,OAAOO,OAAQE,IACnCY,GAAStB,KAAKC,OAAOS,GAAGa,eAEzB,OAAOD,GAGDxB","file":"../../modeler/model.js","sourcesContent":["define([\"../core/jsm\"],function(JSM){\n\t/**\n\t* Class: Model\n\t* Description: Represents a 3D model. The model contains bodies.\n\t*/\n\tJSM.Model = function ()\n\t{\n\t\tthis.bodies = [];\n\t\tthis.materials = new JSM.MaterialSet ();\n\t};\n\n\t/**\n\t* Function: Model.AddBody\n\t* Description: Adds a body to the model.\n\t* Parameters:\n\t*\tbody {Body} the body\n\t* Returns:\n\t*\t{integer} the index of the newly added body\n\t*/\n\tJSM.Model.prototype.AddBody = function (body)\n\t{\n\t\tthis.bodies.push (body);\n\t\treturn this.bodies.length - 1;\n\t};\n\n\t/**\n\t* Function: Model.AddBodies\n\t* Description: Adds bodies to the model.\n\t* Parameters:\n\t*\tbodies {Body[*]} the body\n\t*/\n\tJSM.Model.prototype.AddBodies = function (bodies)\n\t{\n\t\tvar i, body;\n\t\tfor (i = 0; i < bodies.length; i++) {\n\t\t\tbody = bodies[i];\n\t\t\tthis.AddBody (body);\n\t\t}\n\t};\n\n\t/**\n\t* Function: Model.GetBody\n\t* Description: Returns the stored body with the given index.\n\t* Parameters:\n\t*\tindex {integer} the index of the body\n\t* Returns:\n\t*\t{Body} the result\n\t*/\n\tJSM.Model.prototype.GetBody = function (index)\n\t{\n\t\treturn this.bodies[index];\n\t};\n\n\t/**\n\t* Function: Model.BodyCount\n\t* Description: Returns the body count of the model.\n\t* Returns:\n\t*\t{integer} the result\n\t*/\n\tJSM.Model.prototype.BodyCount = function ()\n\t{\n\t\treturn this.bodies.length;\n\t};\n\n\t/**\n\t* Function: Model.AddMaterial\n\t* Description: Adds a material to the mode.\n\t* Parameters:\n\t*\tmaterial {Material} the material\n\t* Returns:\n\t*\t{integer} the index of the newly added material\n\t*/\n\tJSM.Model.prototype.AddMaterial = function (material)\n\t{\n\t\treturn this.materials.AddMaterial (material);\n\t};\n\n\t/**\n\t* Function: Model.GetMaterial\n\t* Description: Returns a material from the model.\n\t* Parameters:\n\t*\tindex {integer} the index\n\t* Returns:\n\t*\t{Material} the result\n\t*/\n\tJSM.Model.prototype.GetMaterial = function (index)\n\t{\n\t\treturn this.materials.GetMaterial (index);\n\t};\n\n\t/**\n\t* Function: Model.GetDefaultMaterial\n\t* Description: Returns the default material from the model. It is always exists.\n\t* Returns:\n\t*\t{Material} the result\n\t*/\n\tJSM.Model.prototype.GetDefaultMaterial = function ()\n\t{\n\t\treturn this.materials.GetDefaultMaterial ();\n\t};\n\n\t/**\n\t* Function: Model.GetMaterialSet\n\t* Description: Returns the material set of the model.\n\t* Returns:\n\t*\t{MaterialSet} the result\n\t*/\n\tJSM.Model.prototype.GetMaterialSet = function ()\n\t{\n\t\treturn this.materials;\n\t};\n\n\t/**\n\t* Function: Model.Count\n\t* Description: Returns the material count of the model.\n\t* Returns:\n\t*\t{integer} the result\n\t*/\n\tJSM.Model.prototype.MaterialCount = function ()\n\t{\n\t\treturn this.materials.Count ();\n\t};\n\n\t/**\n\t* Function: Model.VertexCount\n\t* Description: Returns the vertex count of the model.\n\t* Returns:\n\t*\t{integer} the result\n\t*/\n\tJSM.Model.prototype.VertexCount = function ()\n\t{\n\t\tvar count = 0;\n\t\tvar i;\n\t\tfor (i = 0; i < this.bodies.length; i++) {\n\t\t\tcount += this.bodies[i].VertexCount ();\n\t\t}\n\t\treturn count;\n\t};\n\n\t/**\n\t* Function: Model.PolygonCount\n\t* Description: Returns the polygon count of the model.\n\t* Returns:\n\t*\t{integer} the result\n\t*/\n\tJSM.Model.prototype.PolygonCount = function ()\n\t{\n\t\tvar count = 0;\n\t\tvar i;\n\t\tfor (i = 0; i < this.bodies.length; i++) {\n\t\t\tcount += this.bodies[i].PolygonCount ();\n\t\t}\n\t\treturn count;\n\t};\n\n\treturn JSM;\n});\n"]}