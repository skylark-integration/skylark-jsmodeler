{"version":3,"sources":["modeler/textureutils.js"],"names":["define","JSM","CalculatePlanarTextureCoord","coord","system","result","Coord2D","e1","Clone","Normalize","e2","e3","VectorCross","xyPlane","GetPlaneFromCoordAndDirection","origo","xzPlane","yzPlane","projected","ProjectCoord","x","CoordSignedDistance","y","CalculateCubicTextureCoord","normal","i","currentDirection","product","correctPlane","maxProduct","Math","abs","VectorDot","IsGreater","planeSystem","CoordSystem","Coord","CalculateCylindricalTextureCoord","e3Direction","IsCollinearWith","projectedCoord","Line","projectedDistance","e1Direction","coordDirection","CoordSub","angle","GetVectorsFullAngle","radius","Length","CalculatePolygonPlanarTextureCoords","body","index","polygon","GetPolygon","GetTextureProjection","GetCoords","VertexIndexCount","GetVertexPosition","GetVertexIndex","push","CalculatePolygonCubicTextureCoords","CalculatePolygonCylindricalTextureCoords","j","textureValues","angles","needRepair","length","PI","IsLower","CalculateBodyPlanarTextureCoords","PolygonCount","CalculateBodyCubicTextureCoords","polygonNormals","CalculateBodyPolygonNormals","CalculateBodyCylindricalTextureCoords","CalculateBodyTextureCoords","projection","GetType","TextureProjectionType","Planar","Cubic","Cylindrical"],"mappings":"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","file":"../../modeler/textureutils.js","sourcesContent":["define([\"../core/jsm\"],function(JSM){\n\t/**\n\t* Function: CalculatePlanarTextureCoord\n\t* Description: Calculates the planar texture coordinate for a coordinate.\n\t* Parameters:\n\t*\tcoord {Coord} the coordinate\n\t*\tsystem {CoordSystem} the coordinate system\n\t* Returns:\n\t*\t{Coord2D} the result\n\t*/\n\tJSM.CalculatePlanarTextureCoord = function (coord, system)\n\t{\n\t\tvar result = new JSM.Coord2D (0.0, 0.0);\n\n\t\tvar e1 = system.e1.Clone ().Normalize ();\n\t\tvar e2 = system.e2.Clone ().Normalize ();\n\t\tvar e3 = JSM.VectorCross (system.e1, system.e2);\n\n\t\tvar xyPlane = JSM.GetPlaneFromCoordAndDirection (system.origo, e3);\n\t\tvar xzPlane = JSM.GetPlaneFromCoordAndDirection (system.origo, e2);\n\t\tvar yzPlane = JSM.GetPlaneFromCoordAndDirection (system.origo, e1);\n\t\t\n\t\tvar projected = xyPlane.ProjectCoord (coord);\n\t\tresult.x = yzPlane.CoordSignedDistance (projected);\n\t\tresult.y = xzPlane.CoordSignedDistance (projected);\n\n\t\treturn result;\n\t};\n\n\t/**\n\t* Function: CalculateCubicTextureCoord\n\t* Description: Calculates the cubic texture coordinate for a coordinate.\n\t* Parameters:\n\t*\tcoord {Coord} the coordinate\n\t*\tnormal {Vector} the normal vector for calculation\n\t*\tsystem {CoordSystem} the coordinate system\n\t* Returns:\n\t*\t{Coord2D} the result\n\t*/\n\tJSM.CalculateCubicTextureCoord = function (coord, normal, system)\n\t{\n\t\tvar result = new JSM.Coord2D (0.0, 0.0);\n\n\t\tvar e1 = system.e1.Clone ().Normalize ();\n\t\tvar e2 = system.e2.Clone ().Normalize ();\n\t\tvar e3 = system.e3.Clone ().Normalize ();\n\n\t\tvar correctPlane = -1;\n\t\tvar maxProduct = 0.0;\n\t\t\n\t\tvar i, currentDirection, product;\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\tif (i === 0) {\n\t\t\t\tcurrentDirection = e1;\n\t\t\t} else if (i === 1) {\n\t\t\t\tcurrentDirection = e2;\n\t\t\t} else if (i === 2) {\n\t\t\t\tcurrentDirection = e3;\n\t\t\t}\n\n\t\t\tproduct = Math.abs (JSM.VectorDot (normal, currentDirection));\n\t\t\tif (JSM.IsGreater (product, maxProduct)) {\n\t\t\t\tcorrectPlane = i;\n\t\t\t\tmaxProduct = product;\n\t\t\t}\n\t\t}\n\n\t\tif (correctPlane === -1) {\n\t\t\treturn result;\n\t\t}\n\n\t\tvar planeSystem = null;\n\t\tif (correctPlane === 0) {\n\t\t\tplaneSystem = new JSM.CoordSystem (\n\t\t\t\tsystem.origo,\n\t\t\t\te2,\n\t\t\t\te3,\n\t\t\t\tnew JSM.Coord (0.0, 0.0, 0.0)\n\t\t\t);\n\t\t} else if (correctPlane === 1) {\n\t\t\tplaneSystem = new JSM.CoordSystem (\n\t\t\t\tsystem.origo,\n\t\t\t\te1,\n\t\t\t\te3,\n\t\t\t\tnew JSM.Coord (0.0, 0.0, 0.0)\n\t\t\t);\n\t\t} else if (correctPlane === 2) {\n\t\t\tplaneSystem = new JSM.CoordSystem (\n\t\t\t\tsystem.origo,\n\t\t\t\te1,\n\t\t\t\te2,\n\t\t\t\tnew JSM.Coord (0.0, 0.0, 0.0)\n\t\t\t);\n\t\t}\n\t\t\n\t\tif (planeSystem === null) {\n\t\t\treturn result;\n\t\t}\n\n\t\treturn JSM.CalculatePlanarTextureCoord (coord, planeSystem);\n\t};\n\n\t/**\n\t* Function: CalculateCylindricalTextureCoord\n\t* Description: Calculates the cylindrical texture coordinate for a coordinate.\n\t* Parameters:\n\t*\tcoord {Coord} the coordinate\n\t*\tnormal {Vector} the normal vector for calculation\n\t*\tsystem {CoordSystem} the coordinate system\n\t* Returns:\n\t*\t{Coord2D} the result\n\t*/\n\tJSM.CalculateCylindricalTextureCoord = function (coord, normal, system)\n\t{\n\t\tvar result = new JSM.Coord2D (0.0, 0.0);\n\n\t\tvar e3Direction = system.e3.Clone ().Normalize ();\n\t\tif (e3Direction.IsCollinearWith (normal)) {\n\t\t\tresult = JSM.CalculateCubicTextureCoord (coord, normal, system);\n\t\t\treturn [result, 0.0];\n\t\t}\n\n\t\tvar baseLine = new JSM.Line (system.origo, e3Direction);\n\t\tvar projectedCoord = baseLine.ProjectCoord (coord);\n\t\tvar projectedDistance = JSM.CoordSignedDistance (system.origo, projectedCoord, e3Direction);\n\n\t\tvar e1Direction = system.e1.Clone ().Normalize ();\n\t\tvar coordDirection = JSM.CoordSub (coord, projectedCoord);\n\t\tvar angle = JSM.GetVectorsFullAngle (coordDirection, e1Direction, e3Direction);\n\t\tvar radius = system.e1.Length ();\n\n\t\tresult.x = angle * radius;\n\t\tresult.y = projectedDistance;\n\t\treturn [result, angle];\n\t};\n\n\t/**\n\t* Function: CalculatePolygonPlanarTextureCoords\n\t* Description: Calculates the planar texture coordinates for a polygon.\n\t* Parameters:\n\t*\tbody {Body} the body\n\t*\tindex {integer} the polygon index\n\t* Returns:\n\t*\t{Coord2D[*]} the result\n\t*/\n\tJSM.CalculatePolygonPlanarTextureCoords = function (body, index)\n\t{\n\t\tvar result = [];\n\t\tvar polygon = body.GetPolygon (index);\n\t\tvar system = body.GetTextureProjection ().GetCoords ();\n\n\t\tvar i, coord;\n\t\tfor (i = 0; i < polygon.VertexIndexCount (); i++) {\n\t\t\tcoord = body.GetVertexPosition (polygon.GetVertexIndex (i));\n\t\t\tresult.push (JSM.CalculatePlanarTextureCoord (coord, system));\n\t\t}\n\t\t\n\t\treturn result;\n\t};\n\n\t/**\n\t* Function: CalculatePolygonCubicTextureCoords\n\t* Description: Calculates the cubic texture coordinates for a polygon.\n\t* Parameters:\n\t*\tbody {Body} the body\n\t*\tindex {integer} the polygon index\n\t*\tnormal {Vector} the normal vector for calculation\n\t* Returns:\n\t*\t{Coord2D[*]} the result\n\t*/\n\tJSM.CalculatePolygonCubicTextureCoords = function (body, index, normal)\n\t{\n\t\tvar result = [];\n\t\tvar polygon = body.GetPolygon (index);\n\t\tvar system = body.GetTextureProjection ().GetCoords ();\n\n\t\tvar i, coord;\n\t\tfor (i = 0; i < polygon.VertexIndexCount (); i++) {\n\t\t\tcoord = body.GetVertexPosition (polygon.GetVertexIndex (i));\n\t\t\tresult.push (JSM.CalculateCubicTextureCoord (coord, normal, system));\n\t\t}\n\t\t\n\t\treturn result;\n\t};\n\n\t/**\n\t* Function: CalculatePolygonCylindricalTextureCoords\n\t* Description: Calculates the cylindrical texture coordinates for a polygon.\n\t* Parameters:\n\t*\tbody {Body} the body\n\t*\tindex {integer} the polygon index\n\t*\tnormal {Vector} the normal vector for calculation\n\t* Returns:\n\t*\t{Coord2D[*]} the result\n\t*/\n\tJSM.CalculatePolygonCylindricalTextureCoords = function (body, index, normal)\n\t{\n\t\tvar result = [];\n\t\tvar angles = [];\n\n\t\tvar polygon = body.GetPolygon (index);\n\t\tvar system = body.GetTextureProjection ().GetCoords ();\n\n\t\tvar i, j, coord, textureValues;\n\t\tfor (i = 0; i < polygon.VertexIndexCount (); i++) {\n\t\t\tcoord = body.GetVertexPosition (polygon.GetVertexIndex (i));\n\t\t\ttextureValues = JSM.CalculateCylindricalTextureCoord (coord, normal, system);\n\t\t\tresult.push (textureValues[0]);\n\t\t\tangles.push (textureValues[1]);\n\t\t}\n\n\t\tvar e3Direction = system.e3.Clone ().Normalize ();\n\t\tif (e3Direction.IsCollinearWith (normal)) {\n\t\t\treturn result;\n\t\t}\n\t\t\n\t\tvar needRepair = false;\n\t\tfor (i = 0; i < angles.length; i++) {\n\t\t\tfor (j = i + 1; j < angles.length; j++) {\n\t\t\t\tif (JSM.IsGreater (Math.abs (angles[i] - angles[j]), Math.PI)) {\n\t\t\t\t\tneedRepair = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (needRepair) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (needRepair) {\n\t\t\tvar radius = system.e1.Length ();\n\t\t\tfor (i = 0; i < angles.length; i++) {\n\t\t\t\tif (JSM.IsLower (angles[i], Math.PI)) {\n\t\t\t\t\tresult[i].x = radius * (angles[i] + 2.0 * Math.PI);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\t};\n\n\t/**\n\t* Function: CalculateBodyPlanarTextureCoords\n\t* Description: Calculates the planar texture coordinates for a body.\n\t* Parameters:\n\t*\tbody {Body} the body\n\t* Returns:\n\t*\t{Coord2D[*][*]} the result\n\t*/\n\tJSM.CalculateBodyPlanarTextureCoords = function (body)\n\t{\n\t\tvar result = [];\n\t\tvar i;\n\t\tfor (i = 0; i < body.PolygonCount (); i++) {\n\t\t\tresult.push (JSM.CalculatePolygonPlanarTextureCoords (body, i));\n\t\t}\n\t\treturn result;\n\t};\n\n\t/**\n\t* Function: CalculateBodyCubicTextureCoords\n\t* Description: Calculates the cubic texture coordinates for a body.\n\t* Parameters:\n\t*\tbody {Body} the body\n\t* Returns:\n\t*\t{Coord2D[*][*]} the result\n\t*/\n\tJSM.CalculateBodyCubicTextureCoords = function (body)\n\t{\n\t\tvar result = [];\n\t\tvar polygonNormals = JSM.CalculateBodyPolygonNormals (body);\n\t\tvar i, normal;\n\t\tfor (i = 0; i < body.PolygonCount (); i++) {\n\t\t\tnormal = polygonNormals[i];\n\t\t\tresult.push (JSM.CalculatePolygonCubicTextureCoords (body, i, normal));\n\t\t}\n\t\treturn result;\n\t};\n\n\t/**\n\t* Function: CalculateBodyCylindricalTextureCoords\n\t* Description: Calculates the cylindrical texture coordinates for a body.\n\t* Parameters:\n\t*\tbody {Body} the body\n\t* Returns:\n\t*\t{Coord2D[*][*]} the result\n\t*/\n\tJSM.CalculateBodyCylindricalTextureCoords = function (body)\n\t{\n\t\tvar result = [];\n\t\tvar polygonNormals = JSM.CalculateBodyPolygonNormals (body);\n\t\tvar i, normal;\n\t\tfor (i = 0; i < body.PolygonCount (); i++) {\n\t\t\tnormal = polygonNormals[i];\n\t\t\tresult.push (JSM.CalculatePolygonCylindricalTextureCoords (body, i, normal));\n\t\t}\n\t\treturn result;\n\t};\n\n\t/**\n\t* Function: CalculateBodyTextureCoords\n\t* Description:\n\t*\tCalculates the texture coordinates for a body. The result\n\t*\tis an array of arrays of texture coordinates.\n\t* Parameters:\n\t*\tbody {Body} the body\n\t* Returns:\n\t*\t{Coord2D[*][*]} the result\n\t*/\n\tJSM.CalculateBodyTextureCoords = function (body)\n\t{\n\t\tvar result = [];\n\t\tvar projection = body.GetTextureProjection ().GetType ();\n\t\tif (projection === JSM.TextureProjectionType.Planar) {\n\t\t\tresult = JSM.CalculateBodyPlanarTextureCoords (body);\n\t\t} else if (projection === JSM.TextureProjectionType.Cubic) {\n\t\t\tresult = JSM.CalculateBodyCubicTextureCoords (body);\n\t\t} else if (projection === JSM.TextureProjectionType.Cylindrical) {\n\t\t\tresult = JSM.CalculateBodyCylindricalTextureCoords (body);\n\t\t}\n\n\t\treturn result;\n\t};\n\n\treturn JSM;\n});\n"]}