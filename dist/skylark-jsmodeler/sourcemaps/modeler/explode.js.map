{"version":3,"sources":["modeler/explode.js"],"names":["define","JSM","ExplodeBody","body","materials","explodeData","SeparateByMaterial","itemsByMaterial","itemsWithNoMaterial","callbacks","i","Count","push","material","itemCount","getMaterial","undefined","MaterialSet","ExplodePointsByMaterial","pointIndices","materialIndex","length","point","vertex","GetMaterial","onPointGeometryStart","onPoint","GetPoint","GetVertexPosition","GetVertexIndex","onPointGeometryEnd","PointCount","pointsByMaterial","pointsWithNoMaterial","index","GetMaterialIndex","ExplodePoints","ExplodeLinesByMaterial","lineIndices","line","beg","end","onLineGeometryStart","onLine","GetLine","GetBegVertexIndex","GetEndVertexIndex","onLineGeometryEnd","LineCount","linesByMaterial","linesWithNoMaterial","ExplodeLines","ExplodePolygonsByMaterial","polygonIndices","derivedData","ExplodePolygon","CreateTriangle","vertex1","vertex2","vertex3","normal1","normal2","normal3","uv1","uv2","uv3","onTriangle","polygon","GetPolygon","count","VertexIndexCount","Message","convexPolygon","hasConvexPolygons","vertexNormals","textureCoords","polygon3D","Polygon","vertices","AddVertex","x","y","z","triangle","normal","CalculateBodyPolygonNormal","triangles","TriangulatePolygon","onGeometryStart","onGeometryEnd","PolygonCount","polygonsByMaterial","polygonsWithNoMaterial","j","CalculateBodyVertexNormals","hasTextureCoords","texture","CalculateBodyTextureCoords","HasMaterialIndex","textureWidth","textureHeight","CalculatePolygonsDerivedData","ExplodePolygons"],"mappings":"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","file":"../../modeler/explode.js","sourcesContent":["define([\"../core/jsm\"],function(JSM){\n\t/**\n\t* Function: ExplodeBody\n\t* Description:\n\t*\tExplodes a body to primitives. The function calls callback functions\n\t*\ton geometry start and end, and when a triangle or a line is created.\n\t* Parameters:\n\t*\tbody {Body} the body\n\t*\tmaterials {MaterialSet} the materials\n\t*\texplodeData {object} the parameters and callback functions of explode\n\t* Returns:\n\t*\t{boolean} success\n\t*/\n\tJSM.ExplodeBody = function (body, materials, explodeData)\n\t{\n\t\tfunction SeparateByMaterial (materials, itemsByMaterial, itemsWithNoMaterial, callbacks)\n\t\t{\n\t\t\tvar i;\n\t\t\tfor (i = 0; i < materials.Count (); i++) {\n\t\t\t\titemsByMaterial.push ([]);\n\t\t\t}\n\n\t\t\tvar itemCount = callbacks.itemCount ();\n\t\t\tvar material;\n\t\t\tfor (i = 0; i < itemCount; i++) {\n\t\t\t\tmaterial = callbacks.getMaterial (i);\n\t\t\t\tif (material !== -1) {\n\t\t\t\t\titemsByMaterial[material].push (i);\n\t\t\t\t} else {\n\t\t\t\t\titemsWithNoMaterial.push (i);\n\t\t\t\t}\n\t\t\t}\t\t\n\t\t}\n\t\t\n\t\tfunction ExplodePoints (body, materials, explodeData)\n\t\t{\n\t\t\tfunction ExplodePointsByMaterial (pointIndices, materialIndex, explodeData)\n\t\t\t{\n\t\t\t\tif (pointIndices.length === 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar material = materials.GetMaterial (materialIndex);\n\t\t\t\tif (explodeData.onPointGeometryStart !== undefined && explodeData.onPointGeometryStart !== null) {\n\t\t\t\t\texplodeData.onPointGeometryStart (material);\n\t\t\t\t}\n\n\t\t\t\tif (explodeData.onPoint !== undefined && explodeData.onPoint !== null) {\n\t\t\t\t\tvar i, point, vertex;\n\t\t\t\t\tfor (i = 0; i < pointIndices.length; i++) {\n\t\t\t\t\t\tpoint = body.GetPoint (pointIndices[i]);\n\t\t\t\t\t\tvertex = body.GetVertexPosition (point.GetVertexIndex ());\n\t\t\t\t\t\texplodeData.onPoint (vertex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (explodeData.onPointGeometryEnd !== undefined && explodeData.onPointGeometryEnd !== null) {\n\t\t\t\t\texplodeData.onPointGeometryEnd (material);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (body.PointCount () === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar pointsByMaterial = [];\n\t\t\tvar pointsWithNoMaterial = [];\n\t\t\tSeparateByMaterial (materials, pointsByMaterial, pointsWithNoMaterial, {\n\t\t\t\titemCount : function () {\n\t\t\t\t\treturn body.PointCount ();\n\t\t\t\t},\n\t\t\t\tgetMaterial : function (index) {\n\t\t\t\t\tvar point = body.GetPoint (index);\n\t\t\t\t\treturn point.GetMaterialIndex ();\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tvar i;\t\t\n\t\t\tfor (i = 0; i < pointsByMaterial.length; i++) {\n\t\t\t\tExplodePointsByMaterial (pointsByMaterial[i], i, explodeData);\n\t\t\t}\n\t\t\tExplodePointsByMaterial (pointsWithNoMaterial, -1, explodeData);\n\t\t}\n\n\t\tfunction ExplodeLines (body, materials, explodeData)\n\t\t{\n\t\t\tfunction ExplodeLinesByMaterial (lineIndices, materialIndex, explodeData)\n\t\t\t{\n\t\t\t\tif (lineIndices.length === 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar material = materials.GetMaterial (materialIndex);\n\t\t\t\tif (explodeData.onLineGeometryStart !== undefined && explodeData.onLineGeometryStart !== null) {\n\t\t\t\t\texplodeData.onLineGeometryStart (material);\n\t\t\t\t}\n\n\t\t\t\tif (explodeData.onLine !== undefined && explodeData.onLine !== null) {\n\t\t\t\t\tvar i, line, beg, end;\n\t\t\t\t\tfor (i = 0; i < lineIndices.length; i++) {\n\t\t\t\t\t\tline = body.GetLine (lineIndices[i]);\n\t\t\t\t\t\tbeg = body.GetVertexPosition (line.GetBegVertexIndex ());\n\t\t\t\t\t\tend = body.GetVertexPosition (line.GetEndVertexIndex ());\n\t\t\t\t\t\texplodeData.onLine (beg, end);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (explodeData.onLineGeometryEnd !== undefined && explodeData.onLineGeometryEnd !== null) {\n\t\t\t\t\texplodeData.onLineGeometryEnd (material);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (body.LineCount () === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar linesByMaterial = [];\n\t\t\tvar linesWithNoMaterial = [];\n\t\t\tSeparateByMaterial (materials, linesByMaterial, linesWithNoMaterial, {\n\t\t\t\titemCount : function () {\n\t\t\t\t\treturn body.LineCount ();\n\t\t\t\t},\n\t\t\t\tgetMaterial : function (index) {\n\t\t\t\t\tvar line = body.GetLine (index);\n\t\t\t\t\treturn line.GetMaterialIndex ();\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tvar i;\t\t\n\t\t\tfor (i = 0; i < linesByMaterial.length; i++) {\n\t\t\t\tExplodeLinesByMaterial (linesByMaterial[i], i, explodeData);\n\t\t\t}\n\t\t\tExplodeLinesByMaterial (linesWithNoMaterial, -1, explodeData);\n\t\t}\n\n\t\tfunction ExplodePolygons (body, materials, explodeData)\n\t\t{\n\t\t\tfunction CalculatePolygonsDerivedData (body, materials)\n\t\t\t{\n\t\t\t\tvar vertexNormals = JSM.CalculateBodyVertexNormals (body);\n\n\t\t\t\tvar i, j;\n\t\t\t\tvar hasTextureCoords = false;\n\t\t\t\tif (materials !== undefined && materials !== null) {\n\t\t\t\t\tfor (i = 0; i < materials.Count (); i++) {\n\t\t\t\t\t\tif (materials.GetMaterial (i).texture !== null) {\n\t\t\t\t\t\t\thasTextureCoords = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar textureCoords = null;\n\t\t\t\tvar polygon, material;\n\t\t\t\tif (hasTextureCoords) {\n\t\t\t\t\ttextureCoords = JSM.CalculateBodyTextureCoords (body);\n\t\t\t\t\tfor (i = 0; i < textureCoords.length; i++) {\n\t\t\t\t\t\tpolygon = body.GetPolygon (i);\n\t\t\t\t\t\tif (polygon.HasMaterialIndex ()) {\n\t\t\t\t\t\t\tmaterial = materials.GetMaterial (polygon.GetMaterialIndex ());\n\t\t\t\t\t\t\tfor (j = 0; j < textureCoords[i].length; j++) {\n\t\t\t\t\t\t\t\ttextureCoords[i][j].x /= material.textureWidth;\n\t\t\t\t\t\t\t\ttextureCoords[i][j].y /= -material.textureHeight;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn {\n\t\t\t\t\tvertexNormals : vertexNormals,\n\t\t\t\t\ttextureCoords : textureCoords\n\t\t\t\t};\n\t\t\t}\n\t\t\t\n\t\t\tfunction ExplodePolygonsByMaterial (polygonIndices, materialIndex, derivedData, explodeData)\n\t\t\t{\n\t\t\t\tfunction ExplodePolygon (index, derivedData, explodeData)\n\t\t\t\t{\n\t\t\t\t\tfunction CreateTriangle (vertex1, vertex2, vertex3, normal1, normal2, normal3, uv1, uv2, uv3)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (explodeData.onTriangle !== undefined && explodeData.onTriangle !== null) {\n\t\t\t\t\t\t\texplodeData.onTriangle (vertex1, vertex2, vertex3, normal1, normal2, normal3, uv1, uv2, uv3);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tvar polygon = body.GetPolygon (index);\n\t\t\t\t\tvar count = polygon.VertexIndexCount ();\n\t\t\t\t\tif (count < 3) {\n\t\t\t\t\t\tJSM.Message ('Invalid polygon found.');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tvar vertex1, vertex2, vertex3;\n\t\t\t\t\tvar normal1, normal2, normal3;\n\t\t\t\t\tvar uv1, uv2, uv3;\n\n\t\t\t\t\tvar convexPolygon = false;\n\t\t\t\t\tif (explodeData.hasConvexPolygons !== undefined && explodeData.hasConvexPolygons !== null) {\n\t\t\t\t\t\tconvexPolygon = explodeData.hasConvexPolygons;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tvar i;\n\t\t\t\t\tif (count == 3 || convexPolygon) {\n\t\t\t\t\t\tfor (i = 0; i < count - 2; i++) {\n\t\t\t\t\t\t\tvertex1 = body.GetVertexPosition (polygon.GetVertexIndex (0));\n\t\t\t\t\t\t\tvertex2 = body.GetVertexPosition (polygon.GetVertexIndex ((i + 1) % count));\n\t\t\t\t\t\t\tvertex3 = body.GetVertexPosition (polygon.GetVertexIndex ((i + 2) % count));\n\t\t\t\t\t\t\tnormal1 = derivedData.vertexNormals[index][0];\n\t\t\t\t\t\t\tnormal2 = derivedData.vertexNormals[index][(i + 1) % count];\n\t\t\t\t\t\t\tnormal3 = derivedData.vertexNormals[index][(i + 2) % count];\n\t\t\t\t\t\t\tuv1 = null;\n\t\t\t\t\t\t\tuv2 = null;\n\t\t\t\t\t\t\tuv3 = null;\n\t\t\t\t\t\t\tif (derivedData.textureCoords !== null) {\n\t\t\t\t\t\t\t\tuv1 = derivedData.textureCoords[index][0];\n\t\t\t\t\t\t\t\tuv2 = derivedData.textureCoords[index][(i + 1) % count];\n\t\t\t\t\t\t\t\tuv3 = derivedData.textureCoords[index][(i + 2) % count];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tCreateTriangle (vertex1, vertex2, vertex3, normal1, normal2, normal3, uv1, uv2, uv3);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar polygon3D = new JSM.Polygon ();\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar vertex;\n\t\t\t\t\t\tfor (i = 0; i < count; i++) {\n\t\t\t\t\t\t\tvertex = body.GetVertexPosition (polygon.vertices[i]);\n\t\t\t\t\t\t\tpolygon3D.AddVertex (vertex.x, vertex.y, vertex.z);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar normal = JSM.CalculateBodyPolygonNormal (body, index);\n\t\t\t\t\t\tvar triangles = JSM.TriangulatePolygon (polygon3D, normal);\n\t\t\t\t\t\tif (triangles !== null) {\n\t\t\t\t\t\t\tvar triangle;\n\t\t\t\t\t\t\tfor (i = 0; i < triangles.length; i++) {\n\t\t\t\t\t\t\t\ttriangle = triangles[i];\n\t\t\t\t\t\t\t\tvertex1 = body.GetVertexPosition (polygon.GetVertexIndex (triangle[0]));\n\t\t\t\t\t\t\t\tvertex2 = body.GetVertexPosition (polygon.GetVertexIndex (triangle[1]));\n\t\t\t\t\t\t\t\tvertex3 = body.GetVertexPosition (polygon.GetVertexIndex (triangle[2]));\n\t\t\t\t\t\t\t\tnormal1 = derivedData.vertexNormals[index][triangle[0]];\n\t\t\t\t\t\t\t\tnormal2 = derivedData.vertexNormals[index][triangle[1]];\n\t\t\t\t\t\t\t\tnormal3 = derivedData.vertexNormals[index][triangle[2]];\n\t\t\t\t\t\t\t\tuv1 = null;\n\t\t\t\t\t\t\t\tuv2 = null;\n\t\t\t\t\t\t\t\tuv3 = null;\n\t\t\t\t\t\t\t\tif (derivedData.textureCoords !== null) {\n\t\t\t\t\t\t\t\t\tuv1 = derivedData.textureCoords[index][triangle[0]];\n\t\t\t\t\t\t\t\t\tuv2 = derivedData.textureCoords[index][triangle[1]];\n\t\t\t\t\t\t\t\t\tuv3 = derivedData.textureCoords[index][triangle[2]];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tCreateTriangle (vertex1, vertex2, vertex3, normal1, normal2, normal3, uv1, uv2, uv3);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tJSM.Message ('Triangulation failed.');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (polygonIndices.length === 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar material = materials.GetMaterial (materialIndex);\n\t\t\t\tif (explodeData.onGeometryStart !== undefined && explodeData.onGeometryStart !== null) {\n\t\t\t\t\texplodeData.onGeometryStart (material);\n\t\t\t\t}\n\n\t\t\t\tvar i;\n\t\t\t\tfor (i = 0; i < polygonIndices.length; i++) {\n\t\t\t\t\tExplodePolygon (polygonIndices[i], derivedData, explodeData);\n\t\t\t\t}\n\n\t\t\t\tif (explodeData.onGeometryEnd !== undefined && explodeData.onGeometryEnd !== null) {\n\t\t\t\t\texplodeData.onGeometryEnd (material);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (body.PolygonCount () === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tvar polygonsByMaterial = [];\n\t\t\tvar polygonsWithNoMaterial = [];\n\t\t\tSeparateByMaterial (materials, polygonsByMaterial, polygonsWithNoMaterial, {\n\t\t\t\titemCount : function () {\n\t\t\t\t\treturn body.PolygonCount ();\n\t\t\t\t},\n\t\t\t\tgetMaterial : function (index) {\n\t\t\t\t\tvar polygon = body.GetPolygon (index);\n\t\t\t\t\treturn polygon.GetMaterialIndex ();\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tvar derivedData = CalculatePolygonsDerivedData (body, materials);\n\t\t\tvar i;\n\t\t\tfor (i = 0; i < polygonsByMaterial.length; i++) {\n\t\t\t\tExplodePolygonsByMaterial (polygonsByMaterial[i], i, derivedData, explodeData);\n\t\t\t}\n\t\t\tExplodePolygonsByMaterial (polygonsWithNoMaterial, -1, derivedData, explodeData);\n\t\t}\n\n\t\tif (explodeData === undefined || explodeData === null) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (materials === undefined || materials === null) {\n\t\t\tmaterials = new JSM.MaterialSet ();\n\t\t}\t\n\t\t\n\t\tExplodePoints (body, materials, explodeData);\n\t\tExplodeLines (body, materials, explodeData);\n\t\tExplodePolygons (body, materials, explodeData);\n\t\treturn true;\n\t};\n\n\treturn JSM;\n});\n"]}